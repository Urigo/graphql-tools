{"file":"/home/ardat_000/Guild/graphql-tools/packages/schema/src/decorateWithLogger.ts","mappings":";;;AAAA,qCAAqE;AAGrE;;;;GAIG;AACH,SAAgB,kBAAkB,CAChC,EAAkC,EAClC,MAAe,EACf,IAAY;IAEZ,MAAM,QAAQ,GAAG,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,8BAAoB,CAAC;IAExD,MAAM,QAAQ,GAAG,CAAC,CAAQ,EAAE,EAAE;QAC5B,iCAAiC;QACjC,MAAM,IAAI,GAAG,IAAI,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;QACrB,4EAA4E;QAC5E,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC;YACpC,IAAI,CAAC,OAAO,GAAG,qBAAqB,IAAI,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC;SAC1D;QACD,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACnB,CAAC,CAAC;IAEF,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QAC/B,IAAI;YACF,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;YAC/C,6DAA6D;YAC7D,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,UAAU,IAAI,OAAO,MAAM,CAAC,KAAK,KAAK,UAAU,EAAE;gBACrF,MAAM,CAAC,KAAK,CAAC,CAAC,MAAsB,EAAE,EAAE;oBACtC,8CAA8C;oBAC9C,MAAM,KAAK,GAAG,MAAM,YAAY,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;oBACnE,QAAQ,CAAC,KAAK,CAAC,CAAC;oBAEhB,kEAAkE;oBAClE,OAAO,MAAM,CAAC;gBAChB,CAAC,CAAC,CAAC;aACJ;YACD,OAAO,MAAM,CAAC;SACf;QAAC,OAAO,CAAC,EAAE;YACV,QAAQ,CAAC,CAAC,CAAC,CAAC;YACZ,8CAA8C;YAC9C,MAAM,CAAC,CAAC;SACT;IACH,CAAC,CAAC;AACJ,CAAC;AAxCD,gDAwCC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/schema/src/decorateWithLogger.ts"],"sourcesContent":["import { defaultFieldResolver, GraphQLFieldResolver } from 'graphql';\nimport { ILogger } from './types';\n\n/*\n * fn: The function to decorate with the logger\n * logger: an object instance of type Logger\n * hint: an optional hint to add to the error's message\n */\nexport function decorateWithLogger(\n  fn: GraphQLFieldResolver<any, any>,\n  logger: ILogger,\n  hint: string\n): GraphQLFieldResolver<any, any> {\n  const resolver = fn != null ? fn : defaultFieldResolver;\n\n  const logError = (e: Error) => {\n    // TODO: clone the error properly\n    const newE = new Error();\n    newE.stack = e.stack;\n    /* istanbul ignore else: always get the hint from addErrorLoggingToSchema */\n    if (hint) {\n      newE['originalMessage'] = e.message;\n      newE.message = `Error in resolver ${hint}\\n${e.message}`;\n    }\n    logger.log(newE);\n  };\n\n  return (root, args, ctx, info) => {\n    try {\n      const result = resolver(root, args, ctx, info);\n      // If the resolver returns a Promise log any Promise rejects.\n      if (result && typeof result.then === 'function' && typeof result.catch === 'function') {\n        result.catch((reason: Error | string) => {\n          // make sure that it's an error we're logging.\n          const error = reason instanceof Error ? reason : new Error(reason);\n          logError(error);\n\n          // We don't want to leave an unhandled exception so pass on error.\n          return reason;\n        });\n      }\n      return result;\n    } catch (e) {\n      logError(e);\n      // we want to pass on the error, just in case.\n      throw e;\n    }\n  };\n}\n"],"version":3}