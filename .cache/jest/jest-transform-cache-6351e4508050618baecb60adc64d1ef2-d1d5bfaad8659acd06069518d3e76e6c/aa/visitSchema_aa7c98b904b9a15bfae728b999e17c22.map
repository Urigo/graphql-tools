{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/visitSchema.ts","mappings":"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","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/visitSchema.ts"],"sourcesContent":["import {\n  GraphQLInterfaceType,\n  GraphQLObjectType,\n  GraphQLSchema,\n  isNamedType,\n  GraphQLType,\n  GraphQLNamedType,\n  GraphQLInputField,\n  isSchema,\n  isObjectType,\n  isInterfaceType,\n  isInputObjectType,\n  isScalarType,\n  isUnionType,\n  isEnumType,\n  isInputType,\n  GraphQLEnumValue,\n  GraphQLEnumType,\n} from 'graphql';\n\nimport {\n  VisitableSchemaType,\n  VisitorSelector,\n  VisitSchemaKind,\n  NamedTypeVisitor,\n  SchemaVisitorMap,\n} from './Interfaces';\n\nimport { healSchema } from './heal';\nimport { SchemaVisitor } from './SchemaVisitor';\n\nfunction isSchemaVisitor(obj: any): obj is SchemaVisitor {\n  if ('schema' in obj && isSchema(obj.schema)) {\n    if ('visitSchema' in obj && typeof obj.visitSchema === 'function') {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Generic function for visiting GraphQLSchema objects.\nexport function visitSchema(\n  schema: GraphQLSchema,\n  // To accommodate as many different visitor patterns as possible, the\n  // visitSchema function does not simply accept a single instance of the\n  // SchemaVisitor class, but instead accepts a function that takes the\n  // current VisitableSchemaType object and the name of a visitor method and\n  // returns an array of SchemaVisitor instances that implement the visitor\n  // method and have an interest in handling the given VisitableSchemaType\n  // object. In the simplest case, this function can always return an array\n  // containing a single visitor object, without even looking at the type or\n  // methodName parameters. In other cases, this function might sometimes\n  // return an empty array to indicate there are no visitors that should be\n  // applied to the given VisitableSchemaType object. For an example of a\n  // visitor pattern that benefits from this abstraction, see the\n  // SchemaDirectiveVisitor class below.\n  visitorOrVisitorSelector: VisitorSelector | Array<SchemaVisitor | SchemaVisitorMap> | SchemaVisitor | SchemaVisitorMap\n): GraphQLSchema {\n  const visitorSelector =\n    typeof visitorOrVisitorSelector === 'function' ? visitorOrVisitorSelector : () => visitorOrVisitorSelector;\n\n  // Helper function that calls visitorSelector and applies the resulting\n  // visitors to the given type, with arguments [type, ...args].\n  function callMethod<T extends VisitableSchemaType>(methodName: string, type: T, ...args: Array<any>): T | null {\n    let visitors = visitorSelector(type, methodName);\n    visitors = Array.isArray(visitors) ? visitors : [visitors];\n\n    let finalType: T | null = type;\n    visitors.every(visitorOrVisitorDef => {\n      let newType;\n      if (isSchemaVisitor(visitorOrVisitorDef)) {\n        newType = visitorOrVisitorDef[methodName](finalType, ...args);\n      } else if (\n        isNamedType(finalType) &&\n        (methodName === 'visitScalar' ||\n          methodName === 'visitEnum' ||\n          methodName === 'visitObject' ||\n          methodName === 'visitInputObject' ||\n          methodName === 'visitUnion' ||\n          methodName === 'visitInterface')\n      ) {\n        const specifiers = getTypeSpecifiers(finalType, schema);\n        const typeVisitor = getVisitor(visitorOrVisitorDef, specifiers);\n        newType = typeVisitor != null ? typeVisitor(finalType, schema) : undefined;\n      }\n\n      if (typeof newType === 'undefined') {\n        // Keep going without modifying type.\n        return true;\n      }\n\n      if (methodName === 'visitSchema' || isSchema(finalType)) {\n        throw new Error(`Method ${methodName} cannot replace schema with ${newType as string}`);\n      }\n\n      if (newType === null) {\n        // Stop the loop and return null form callMethod, which will cause\n        // the type to be removed from the schema.\n        finalType = null;\n        return false;\n      }\n\n      // Update type to the new type returned by the visitor method, so that\n      // later directives will see the new type, and callMethod will return\n      // the final type.\n      finalType = newType;\n      return true;\n    });\n\n    // If there were no directives for this type object, or if all visitor\n    // methods returned nothing, type will be returned unmodified.\n    return finalType;\n  }\n\n  // Recursive helper function that calls any appropriate visitor methods for\n  // each object in the schema, then traverses the object's children (if any).\n  function visit<T extends VisitableSchemaType>(type: T): T | null {\n    if (isSchema(type)) {\n      // Unlike the other types, the root GraphQLSchema object cannot be\n      // replaced by visitor methods, because that would make life very hard\n      // for SchemaVisitor subclasses that rely on the original schema object.\n      callMethod('visitSchema', type);\n\n      const typeMap: Record<string, GraphQLNamedType | null> = type.getTypeMap();\n      Object.entries(typeMap).forEach(([typeName, namedType]) => {\n        if (!typeName.startsWith('__') && namedType != null) {\n          // Call visit recursively to let it determine which concrete\n          // subclass of GraphQLNamedType we found in the type map.\n          // We do not use updateEachKey because we want to preserve\n          // deleted types in the typeMap so that other types that reference\n          // the deleted types can be healed.\n          typeMap[typeName] = visit(namedType);\n        }\n      });\n\n      return type;\n    }\n\n    if (isObjectType(type)) {\n      // Note that callMethod('visitObject', type) may not actually call any\n      // methods, if there are no @directive annotations associated with this\n      // type, or if this SchemaDirectiveVisitor subclass does not override\n      // the visitObject method.\n      const newObject = callMethod('visitObject', type);\n      if (newObject != null) {\n        visitFields(newObject);\n      }\n      return newObject;\n    }\n\n    if (isInterfaceType(type)) {\n      const newInterface = callMethod('visitInterface', type);\n      if (newInterface != null) {\n        visitFields(newInterface);\n      }\n      return newInterface;\n    }\n\n    if (isInputObjectType(type)) {\n      const newInputObject = callMethod('visitInputObject', type);\n\n      if (newInputObject != null) {\n        const fieldMap = newInputObject.getFields() as Record<string, GraphQLInputField>;\n        for (const key of Object.keys(fieldMap)) {\n          fieldMap[key] = callMethod('visitInputFieldDefinition', fieldMap[key], {\n            // Since we call a different method for input object fields, we\n            // can't reuse the visitFields function here.\n            objectType: newInputObject,\n          });\n          if (!fieldMap[key]) {\n            delete fieldMap[key];\n          }\n        }\n      }\n\n      return newInputObject;\n    }\n\n    if (isScalarType(type)) {\n      return callMethod('visitScalar', type);\n    }\n\n    if (isUnionType(type)) {\n      return callMethod('visitUnion', type);\n    }\n\n    if (isEnumType(type)) {\n      let newEnum = callMethod('visitEnum', type);\n\n      if (newEnum != null) {\n        const newValues: Array<GraphQLEnumValue> = newEnum\n          .getValues()\n          .map(value =>\n            callMethod('visitEnumValue', value, {\n              enumType: newEnum,\n            })\n          )\n          .filter(Boolean);\n\n        // Recreate the enum type if any of the values changed\n        const valuesUpdated = newValues.some((value, index) => value !== newEnum.getValues()[index]);\n        if (valuesUpdated) {\n          newEnum = new GraphQLEnumType({\n            ...(newEnum as GraphQLEnumType).toConfig(),\n            values: newValues.reduce(\n              (prev, value) => ({\n                ...prev,\n                [value.name]: {\n                  value: value.value,\n                  deprecationReason: value.deprecationReason,\n                  description: value.description,\n                  astNode: value.astNode,\n                },\n              }),\n              {}\n            ),\n          }) as GraphQLEnumType & T;\n        }\n      }\n\n      return newEnum;\n    }\n\n    throw new Error(`Unexpected schema type: ${(type as unknown) as string}`);\n  }\n\n  function visitFields(type: GraphQLObjectType | GraphQLInterfaceType) {\n    const fieldMap = type.getFields();\n    for (const [key, field] of Object.entries(fieldMap)) {\n      // It would be nice if we could call visit(field) recursively here, but\n      // GraphQLField is merely a type, not a value that can be detected using\n      // an instanceof check, so we have to visit the fields in this lexical\n      // context, so that TypeScript can validate the call to\n      // visitFieldDefinition.\n      const newField = callMethod('visitFieldDefinition', field, {\n        // While any field visitor needs a reference to the field object, some\n        // field visitors may also need to know the enclosing (parent) type,\n        // perhaps to determine if the parent is a GraphQLObjectType or a\n        // GraphQLInterfaceType. To obtain a reference to the parent, a\n        // visitor method can have a second parameter, which will be an object\n        // with an .objectType property referring to the parent.\n        objectType: type,\n      });\n\n      if (newField?.args != null) {\n        newField.args = newField.args\n          .map(arg =>\n            callMethod('visitArgumentDefinition', arg, {\n              // Like visitFieldDefinition, visitArgumentDefinition takes a\n              // second parameter that provides additional context, namely the\n              // parent .field and grandparent .objectType. Remember that the\n              // current GraphQLSchema is always available via this.schema.\n              field: newField,\n              objectType: type,\n            })\n          )\n          .filter(Boolean);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (newField) {\n        fieldMap[key] = newField;\n      } else {\n        delete fieldMap[key];\n      }\n    }\n  }\n\n  visit(schema);\n\n  // Automatically update any references to named schema types replaced\n  // during the traversal, so implementers don't have to worry about that.\n  healSchema(schema);\n\n  // Return schema for convenience, even though schema parameter has all updated types.\n  return schema;\n}\n\nfunction getTypeSpecifiers(type: GraphQLType, schema: GraphQLSchema): Array<VisitSchemaKind> {\n  const specifiers = [VisitSchemaKind.TYPE];\n  if (isObjectType(type)) {\n    specifiers.push(VisitSchemaKind.COMPOSITE_TYPE, VisitSchemaKind.OBJECT_TYPE);\n    const query = schema.getQueryType();\n    const mutation = schema.getMutationType();\n    const subscription = schema.getSubscriptionType();\n    if (type === query) {\n      specifiers.push(VisitSchemaKind.ROOT_OBJECT, VisitSchemaKind.QUERY);\n    } else if (type === mutation) {\n      specifiers.push(VisitSchemaKind.ROOT_OBJECT, VisitSchemaKind.MUTATION);\n    } else if (type === subscription) {\n      specifiers.push(VisitSchemaKind.ROOT_OBJECT, VisitSchemaKind.SUBSCRIPTION);\n    }\n  } else if (isInputType(type)) {\n    specifiers.push(VisitSchemaKind.INPUT_OBJECT_TYPE);\n  } else if (isInterfaceType(type)) {\n    specifiers.push(VisitSchemaKind.COMPOSITE_TYPE, VisitSchemaKind.ABSTRACT_TYPE, VisitSchemaKind.INTERFACE_TYPE);\n  } else if (isUnionType(type)) {\n    specifiers.push(VisitSchemaKind.COMPOSITE_TYPE, VisitSchemaKind.ABSTRACT_TYPE, VisitSchemaKind.UNION_TYPE);\n  } else if (isEnumType(type)) {\n    specifiers.push(VisitSchemaKind.ENUM_TYPE);\n  } else if (isScalarType(type)) {\n    specifiers.push(VisitSchemaKind.SCALAR_TYPE);\n  }\n\n  return specifiers;\n}\n\nfunction getVisitor(visitorDef: SchemaVisitorMap, specifiers: Array<VisitSchemaKind>): NamedTypeVisitor | null {\n  let typeVisitor: NamedTypeVisitor | undefined;\n  const stack = [...specifiers];\n  while (!typeVisitor && stack.length > 0) {\n    const next = stack.pop();\n    typeVisitor = visitorDef[next] as NamedTypeVisitor;\n  }\n\n  return typeVisitor != null ? typeVisitor : null;\n}\n"],"version":3}