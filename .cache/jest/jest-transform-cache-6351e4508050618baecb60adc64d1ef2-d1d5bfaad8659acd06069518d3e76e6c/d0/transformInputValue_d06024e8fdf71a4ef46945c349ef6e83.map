{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/transformInputValue.ts","mappings":";;;AAAA,qCAAuG;AAIvG,SAAgB,mBAAmB,CACjC,IAAsB,EACtB,KAAU,EACV,4BAAuD,IAAI,EAC3D,8BAA2D,IAAI;IAE/D,IAAI,KAAK,IAAI,IAAI,EAAE;QACjB,OAAO,KAAK,CAAC;KACd;IAED,MAAM,YAAY,GAAG,yBAAe,CAAC,IAAI,CAAC,CAAC;IAE3C,IAAI,oBAAU,CAAC,YAAY,CAAC,EAAE;QAC5B,OAAO,yBAAyB,IAAI,IAAI,CAAC,CAAC,CAAC,yBAAyB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;KACnG;SAAM,IAAI,oBAAU,CAAC,YAAY,CAAC,EAAE;QACnC,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,UAAe,EAAE,EAAE,CACnC,mBAAmB,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,EAAE,yBAAyB,EAAE,2BAA2B,CAAC,CAC7G,CAAC;KACH;SAAM,IAAI,2BAAiB,CAAC,YAAY,CAAC,EAAE;QAC1C,MAAM,MAAM,GAAG,YAAY,CAAC,SAAS,EAAE,CAAC;QACxC,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAC/B,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,KAAK,IAAI,IAAI,EAAE;gBACjB,QAAQ,CAAC,GAAG,CAAC,GAAG,mBAAmB,CACjC,KAAK,CAAC,IAAI,EACV,KAAK,CAAC,GAAG,CAAC,EACV,yBAAyB,EACzB,2BAA2B,CAC5B,CAAC;aACH;QACH,CAAC,CAAC,CAAC;QACH,OAAO,2BAA2B,IAAI,IAAI,CAAC,CAAC,CAAC,2BAA2B,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;KAC7G;IAED,8CAA8C;AAChD,CAAC;AApCD,kDAoCC;AAED,SAAgB,mBAAmB,CAAC,IAAsB,EAAE,KAAU;IACpE,OAAO,mBAAmB,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC;AAFD,kDAEC;AAED,SAAgB,eAAe,CAAC,IAAsB,EAAE,KAAU;IAChE,OAAO,mBAAmB,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,CAAC;AAFD,0CAEC;AAED,SAAgB,sBAAsB,CAAC,IAAsB,EAAE,KAAU;IACvE,OAAO,mBAAmB,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC3E,CAAC;AAFD,wDAEC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/transformInputValue.ts"],"sourcesContent":["import { GraphQLInputType, getNullableType, isLeafType, isListType, isInputObjectType } from 'graphql';\n\nimport { InputLeafValueTransformer, InputObjectValueTransformer } from './types';\n\nexport function transformInputValue(\n  type: GraphQLInputType,\n  value: any,\n  inputLeafValueTransformer: InputLeafValueTransformer = null,\n  inputObjectValueTransformer: InputObjectValueTransformer = null\n): any {\n  if (value == null) {\n    return value;\n  }\n\n  const nullableType = getNullableType(type);\n\n  if (isLeafType(nullableType)) {\n    return inputLeafValueTransformer != null ? inputLeafValueTransformer(nullableType, value) : value;\n  } else if (isListType(nullableType)) {\n    return value.map((listMember: any) =>\n      transformInputValue(nullableType.ofType, listMember, inputLeafValueTransformer, inputObjectValueTransformer)\n    );\n  } else if (isInputObjectType(nullableType)) {\n    const fields = nullableType.getFields();\n    const newValue = {};\n    Object.keys(value).forEach(key => {\n      const field = fields[key];\n      if (field != null) {\n        newValue[key] = transformInputValue(\n          field.type,\n          value[key],\n          inputLeafValueTransformer,\n          inputObjectValueTransformer\n        );\n      }\n    });\n    return inputObjectValueTransformer != null ? inputObjectValueTransformer(nullableType, newValue) : newValue;\n  }\n\n  // unreachable, no other possible return value\n}\n\nexport function serializeInputValue(type: GraphQLInputType, value: any) {\n  return transformInputValue(type, value, (t, v) => t.serialize(v));\n}\n\nexport function parseInputValue(type: GraphQLInputType, value: any) {\n  return transformInputValue(type, value, (t, v) => t.parseValue(v));\n}\n\nexport function parseInputValueLiteral(type: GraphQLInputType, value: any) {\n  return transformInputValue(type, value, (t, v) => t.parseLiteral(v, {}));\n}\n"],"version":3}