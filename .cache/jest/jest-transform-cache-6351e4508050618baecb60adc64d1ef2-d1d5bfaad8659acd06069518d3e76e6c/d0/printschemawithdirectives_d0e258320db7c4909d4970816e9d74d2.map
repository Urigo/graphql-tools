{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/print-schema-with-directives.ts","mappings":"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","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/print-schema-with-directives.ts"],"sourcesContent":["import {\n  GraphQLSchema,\n  print,\n  GraphQLNamedType,\n  Kind,\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  TypeDefinitionNode,\n  DirectiveNode,\n  FieldDefinitionNode,\n  InputValueDefinitionNode,\n  GraphQLArgument,\n  EnumValueDefinitionNode,\n  isSpecifiedDirective,\n  GraphQLDirective,\n  DirectiveDefinitionNode,\n  astFromValue,\n  ArgumentNode,\n  SchemaDefinitionNode,\n  OperationTypeDefinitionNode,\n  SchemaExtensionNode,\n  OperationTypeNode,\n  GraphQLObjectType,\n  GraphQLDeprecatedDirective,\n  isObjectType,\n  ObjectTypeDefinitionNode,\n  GraphQLField,\n  NamedTypeNode,\n  TypeExtensionNode,\n  GraphQLInterfaceType,\n  InterfaceTypeDefinitionNode,\n  isInterfaceType,\n  isUnionType,\n  UnionTypeDefinitionNode,\n  GraphQLUnionType,\n  isInputObjectType,\n  GraphQLInputObjectType,\n  InputObjectTypeDefinitionNode,\n  GraphQLInputField,\n  isEnumType,\n  isScalarType,\n  GraphQLEnumType,\n  GraphQLEnumValue,\n  EnumTypeDefinitionNode,\n  GraphQLScalarType,\n  ScalarTypeDefinitionNode,\n  StringValueNode,\n  DefinitionNode,\n  DocumentNode,\n} from 'graphql';\nimport { GetDocumentNodeFromSchemaOptions, PrintSchemaWithDirectivesOptions } from './types';\n\nimport { astFromType } from './astFromType';\nimport { getDirectivesInExtensions } from './get-directives';\nimport { astFromValueUntyped } from './astFromValueUntyped';\n\nexport function getDocumentNodeFromSchema(\n  schema: GraphQLSchema,\n  options: GetDocumentNodeFromSchemaOptions = {}\n): DocumentNode {\n  const pathToDirectivesInExtensions = options.pathToDirectivesInExtensions;\n\n  const typesMap = schema.getTypeMap();\n\n  const schemaNode = astFromSchema(schema, pathToDirectivesInExtensions);\n  const definitions: Array<DefinitionNode> = schemaNode != null ? [schemaNode] : [];\n\n  for (const typeName in typesMap) {\n    const type = typesMap[typeName];\n    const isPredefinedScalar = isSpecifiedScalarType(type);\n    const isIntrospection = isIntrospectionType(type);\n\n    if (isPredefinedScalar || isIntrospection) {\n      continue;\n    }\n\n    if (isObjectType(type)) {\n      definitions.push(astFromObjectType(type, schema, pathToDirectivesInExtensions));\n    } else if (isInterfaceType(type)) {\n      definitions.push(astFromInterfaceType(type, schema, pathToDirectivesInExtensions));\n    } else if (isUnionType(type)) {\n      definitions.push(astFromUnionType(type, schema, pathToDirectivesInExtensions));\n    } else if (isInputObjectType(type)) {\n      definitions.push(astFromInputObjectType(type, schema, pathToDirectivesInExtensions));\n    } else if (isEnumType(type)) {\n      definitions.push(astFromEnumType(type, schema, pathToDirectivesInExtensions));\n    } else if (isScalarType(type)) {\n      definitions.push(astFromScalarType(type, schema, pathToDirectivesInExtensions));\n    } else {\n      throw new Error(`Unknown type ${type}.`);\n    }\n  }\n\n  const directives = schema.getDirectives();\n  for (const directive of directives) {\n    if (isSpecifiedDirective(directive)) {\n      continue;\n    }\n\n    definitions.push(astFromDirective(directive, schema, pathToDirectivesInExtensions));\n  }\n\n  return {\n    kind: Kind.DOCUMENT,\n    definitions,\n  };\n}\n\n// this approach uses the default schema printer rather than a custom solution, so may be more backwards compatible\n// currently does not allow customization of printSchema options having to do with comments.\nexport function printSchemaWithDirectives(\n  schema: GraphQLSchema,\n  options: PrintSchemaWithDirectivesOptions = {}\n): string {\n  const documentNode = getDocumentNodeFromSchema(schema, options);\n  return print(documentNode);\n}\n\nexport function astFromSchema(\n  schema: GraphQLSchema,\n  pathToDirectivesInExtensions: Array<string>\n): SchemaDefinitionNode | SchemaExtensionNode {\n  const operationTypeMap: Record<OperationTypeNode, OperationTypeDefinitionNode> = {\n    query: undefined,\n    mutation: undefined,\n    subscription: undefined,\n  };\n\n  let nodes: Array<SchemaDefinitionNode | SchemaExtensionNode> = [];\n  if (schema.astNode != null) {\n    nodes.push(schema.astNode);\n  }\n  if (schema.extensionASTNodes != null) {\n    nodes = nodes.concat(schema.extensionASTNodes);\n  }\n\n  nodes.forEach(node => {\n    if (node.operationTypes) {\n      node.operationTypes.forEach(operationTypeDefinitionNode => {\n        operationTypeMap[operationTypeDefinitionNode.operation] = operationTypeDefinitionNode;\n      });\n    }\n  });\n\n  const rootTypeMap: Record<OperationTypeNode, GraphQLObjectType> = {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType(),\n  };\n\n  Object.keys(operationTypeMap).forEach(operationTypeNode => {\n    if (rootTypeMap[operationTypeNode] != null) {\n      if (operationTypeMap[operationTypeNode] != null) {\n        operationTypeMap[operationTypeNode].type = astFromType(rootTypeMap[operationTypeNode]);\n      } else {\n        operationTypeMap[operationTypeNode] = {\n          kind: Kind.OPERATION_TYPE_DEFINITION,\n          operation: operationTypeNode,\n          type: astFromType(rootTypeMap[operationTypeNode]),\n        };\n      }\n    }\n  });\n\n  const operationTypes = Object.values(operationTypeMap).filter(\n    operationTypeDefinitionNode => operationTypeDefinitionNode != null\n  );\n\n  const directives = getDirectiveNodes(schema, schema, pathToDirectivesInExtensions);\n\n  if (!operationTypes.length && !directives.length) {\n    return null;\n  }\n\n  const schemaNode: SchemaDefinitionNode | SchemaExtensionNode = {\n    kind: operationTypes != null ? Kind.SCHEMA_DEFINITION : Kind.SCHEMA_EXTENSION,\n    operationTypes,\n    directives,\n  };\n\n  ((schemaNode as unknown) as { description: StringValueNode }).description =\n    ((schema.astNode as unknown) as { description: string })?.description ??\n    ((schema as unknown) as { description: string }).description != null\n      ? {\n          kind: Kind.STRING,\n          value: ((schema as unknown) as { description: string }).description,\n          block: true,\n        }\n      : undefined;\n\n  return schemaNode;\n}\n\nexport function astFromDirective(\n  directive: GraphQLDirective,\n  schema: GraphQLSchema,\n  pathToDirectivesInExtensions: Array<string>\n): DirectiveDefinitionNode {\n  return {\n    kind: Kind.DIRECTIVE_DEFINITION,\n    description:\n      directive.astNode?.description ??\n      (directive.description\n        ? {\n            kind: Kind.STRING,\n            value: directive.description,\n          }\n        : undefined),\n    name: {\n      kind: Kind.NAME,\n      value: directive.name,\n    },\n    arguments: directive?.args\n      ? directive.args.map(arg => astFromArg(arg, schema, pathToDirectivesInExtensions))\n      : undefined,\n    repeatable: directive.isRepeatable,\n    locations: directive?.locations\n      ? directive.locations.map(location => ({\n          kind: Kind.NAME,\n          value: location,\n        }))\n      : undefined,\n  };\n}\n\nexport function getDirectiveNodes(\n  entity: GraphQLSchema | GraphQLNamedType | GraphQLEnumValue,\n  schema: GraphQLSchema,\n  pathToDirectivesInExtensions: Array<string>\n): Array<DirectiveNode> {\n  const directivesInExtensions = getDirectivesInExtensions(entity, pathToDirectivesInExtensions);\n\n  let nodes: Array<\n    SchemaDefinitionNode | SchemaExtensionNode | TypeDefinitionNode | TypeExtensionNode | EnumValueDefinitionNode\n  > = [];\n  if (entity.astNode != null) {\n    nodes.push(entity.astNode);\n  }\n  if ('extensionASTNodes' in entity && entity.extensionASTNodes != null) {\n    nodes = nodes.concat(entity.extensionASTNodes);\n  }\n\n  let directives: Array<DirectiveNode>;\n  if (directivesInExtensions != null) {\n    directives = makeDirectiveNodes(schema, directivesInExtensions);\n  } else {\n    directives = [].concat(...nodes.filter(node => node.directives != null).map(node => node.directives));\n  }\n\n  return directives;\n}\n\nexport function getDeprecatableDirectiveNodes(\n  entity: GraphQLArgument | GraphQLField<any, any> | GraphQLInputField,\n  schema: GraphQLSchema,\n  pathToDirectivesInExtensions: Array<string>\n): Array<DirectiveNode> {\n  let directiveNodesBesidesDeprecated: Array<DirectiveNode> = [];\n  let deprecatedDirectiveNode: DirectiveNode;\n\n  const directivesInExtensions = getDirectivesInExtensions(entity, pathToDirectivesInExtensions);\n\n  let directives: ReadonlyArray<DirectiveNode>;\n  if (directivesInExtensions != null) {\n    directives = makeDirectiveNodes(schema, directivesInExtensions);\n  } else {\n    directives = entity.astNode?.directives;\n  }\n\n  if (directives != null) {\n    directiveNodesBesidesDeprecated = directives.filter(directive => directive.name.value !== 'deprecated');\n    if (((entity as unknown) as { deprecationReason: string }).deprecationReason != null) {\n      deprecatedDirectiveNode = directives.filter(directive => directive.name.value === 'deprecated')?.[0];\n    }\n  }\n\n  if (\n    ((entity as unknown) as { deprecationReason: string }).deprecationReason != null &&\n    deprecatedDirectiveNode == null\n  ) {\n    deprecatedDirectiveNode = makeDeprecatedDirective(\n      ((entity as unknown) as { deprecationReason: string }).deprecationReason\n    );\n  }\n\n  return deprecatedDirectiveNode == null\n    ? directiveNodesBesidesDeprecated\n    : [deprecatedDirectiveNode].concat(directiveNodesBesidesDeprecated);\n}\n\nexport function astFromArg(\n  arg: GraphQLArgument,\n  schema: GraphQLSchema,\n  pathToDirectivesInExtensions: Array<string>\n): InputValueDefinitionNode {\n  return {\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    description:\n      arg.astNode?.description ?? arg.description\n        ? {\n            kind: Kind.STRING,\n            value: arg.description,\n            block: true,\n          }\n        : undefined,\n    name: {\n      kind: Kind.NAME,\n      value: arg.name,\n    },\n    type: astFromType(arg.type),\n    defaultValue: arg.defaultValue !== undefined ? astFromValue(arg.defaultValue, arg.type) : undefined,\n    directives: getDeprecatableDirectiveNodes(arg, schema, pathToDirectivesInExtensions),\n  };\n}\n\nexport function astFromObjectType(\n  type: GraphQLObjectType,\n  schema: GraphQLSchema,\n  pathToDirectivesInExtensions: Array<string>\n): ObjectTypeDefinitionNode {\n  return {\n    kind: Kind.OBJECT_TYPE_DEFINITION,\n    description:\n      type.astNode?.description ?? type.description\n        ? {\n            kind: Kind.STRING,\n            value: type.description,\n            block: true,\n          }\n        : undefined,\n    name: {\n      kind: Kind.NAME,\n      value: type.name,\n    },\n    fields: Object.values(type.getFields()).map(field => astFromField(field, schema, pathToDirectivesInExtensions)),\n    interfaces: Object.values(type.getInterfaces()).map(iFace => astFromType(iFace) as NamedTypeNode),\n    directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n  };\n}\n\nexport function astFromInterfaceType(\n  type: GraphQLInterfaceType,\n  schema: GraphQLSchema,\n  pathToDirectivesInExtensions: Array<string>\n): InterfaceTypeDefinitionNode {\n  const node = {\n    kind: Kind.INTERFACE_TYPE_DEFINITION,\n    description:\n      type.astNode?.description ?? type.description\n        ? {\n            kind: Kind.STRING,\n            value: type.description,\n            block: true,\n          }\n        : undefined,\n    name: {\n      kind: Kind.NAME,\n      value: type.name,\n    },\n    fields: Object.values(type.getFields()).map(field => astFromField(field, schema, pathToDirectivesInExtensions)),\n    directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n  };\n\n  if ('getInterfaces' in type) {\n    ((node as unknown) as { interfaces: Array<NamedTypeNode> }).interfaces = Object.values(\n      ((type as unknown) as GraphQLObjectType).getInterfaces()\n    ).map(iFace => astFromType(iFace) as NamedTypeNode);\n  }\n\n  return node;\n}\n\nexport function astFromUnionType(\n  type: GraphQLUnionType,\n  schema: GraphQLSchema,\n  pathToDirectivesInExtensions: Array<string>\n): UnionTypeDefinitionNode {\n  return {\n    kind: Kind.UNION_TYPE_DEFINITION,\n    description:\n      type.astNode?.description ?? type.description\n        ? {\n            kind: Kind.STRING,\n            value: type.description,\n            block: true,\n          }\n        : undefined,\n    name: {\n      kind: Kind.NAME,\n      value: type.name,\n    },\n    directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    types: type.getTypes().map(type => astFromType(type) as NamedTypeNode),\n  };\n}\n\nexport function astFromInputObjectType(\n  type: GraphQLInputObjectType,\n  schema: GraphQLSchema,\n  pathToDirectivesInExtensions: Array<string>\n): InputObjectTypeDefinitionNode {\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description:\n      type.astNode?.description ?? type.description\n        ? {\n            kind: Kind.STRING,\n            value: type.description,\n            block: true,\n          }\n        : undefined,\n    name: {\n      kind: Kind.NAME,\n      value: type.name,\n    },\n    fields: Object.values(type.getFields()).map(field =>\n      astFromInputField(field, schema, pathToDirectivesInExtensions)\n    ),\n    directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n  };\n}\n\nexport function astFromEnumType(\n  type: GraphQLEnumType,\n  schema: GraphQLSchema,\n  pathToDirectivesInExtensions: Array<string>\n): EnumTypeDefinitionNode {\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    description:\n      type.astNode?.description ?? type.description\n        ? {\n            kind: Kind.STRING,\n            value: type.description,\n            block: true,\n          }\n        : undefined,\n    name: {\n      kind: Kind.NAME,\n      value: type.name,\n    },\n    values: Object.values(type.getValues()).map(value => astFromEnumValue(value, schema, pathToDirectivesInExtensions)),\n    directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n  };\n}\n\nexport function astFromScalarType(\n  type: GraphQLScalarType,\n  schema: GraphQLSchema,\n  pathToDirectivesInExtensions: Array<string>\n): ScalarTypeDefinitionNode {\n  let directiveNodesBesidesSpecifiedBy: Array<DirectiveNode> = [];\n  let specifiedByDirectiveNode: DirectiveNode;\n\n  const directivesInExtensions = getDirectivesInExtensions(type, pathToDirectivesInExtensions);\n\n  let allDirectives: ReadonlyArray<DirectiveNode>;\n  if (directivesInExtensions != null) {\n    allDirectives = makeDirectiveNodes(schema, directivesInExtensions);\n  } else {\n    allDirectives = type.astNode?.directives;\n  }\n\n  if (allDirectives != null) {\n    directiveNodesBesidesSpecifiedBy = allDirectives.filter(directive => directive.name.value !== 'specifiedBy');\n    if (((type as unknown) as { specifiedByUrl: string }).specifiedByUrl != null) {\n      specifiedByDirectiveNode = allDirectives.filter(directive => directive.name.value === 'specifiedBy')?.[0];\n    }\n  }\n\n  if (((type as unknown) as { specifiedByUrl: string }).specifiedByUrl != null && specifiedByDirectiveNode == null) {\n    specifiedByDirectiveNode = makeDirectiveNode('specifiedBy', {\n      url: ((type as unknown) as { specifiedByUrl: string }).specifiedByUrl,\n    });\n  }\n\n  const directives =\n    specifiedByDirectiveNode == null\n      ? directiveNodesBesidesSpecifiedBy\n      : [specifiedByDirectiveNode].concat(directiveNodesBesidesSpecifiedBy);\n\n  return {\n    kind: Kind.SCALAR_TYPE_DEFINITION,\n    description:\n      type.astNode?.description ?? type.description\n        ? {\n            kind: Kind.STRING,\n            value: type.description,\n            block: true,\n          }\n        : undefined,\n    name: {\n      kind: Kind.NAME,\n      value: type.name,\n    },\n    directives,\n  };\n}\n\nexport function astFromField(\n  field: GraphQLField<any, any>,\n  schema: GraphQLSchema,\n  pathToDirectivesInExtensions: Array<string>\n): FieldDefinitionNode {\n  return {\n    kind: Kind.FIELD_DEFINITION,\n    description:\n      field.astNode?.description ?? field.description\n        ? {\n            kind: Kind.STRING,\n            value: field.description,\n            block: true,\n          }\n        : undefined,\n    name: {\n      kind: Kind.NAME,\n      value: field.name,\n    },\n    arguments: field.args.map(arg => astFromArg(arg, schema, pathToDirectivesInExtensions)),\n    type: astFromType(field.type),\n    directives: getDeprecatableDirectiveNodes(field, schema, pathToDirectivesInExtensions),\n  };\n}\n\nexport function astFromInputField(\n  field: GraphQLInputField,\n  schema: GraphQLSchema,\n  pathToDirectivesInExtensions: Array<string>\n): InputValueDefinitionNode {\n  return {\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    description:\n      field.astNode?.description ?? field.description\n        ? {\n            kind: Kind.STRING,\n            value: field.description,\n            block: true,\n          }\n        : undefined,\n    name: {\n      kind: Kind.NAME,\n      value: field.name,\n    },\n    type: astFromType(field.type),\n    directives: getDeprecatableDirectiveNodes(field, schema, pathToDirectivesInExtensions),\n    defaultValue: astFromValue(field.defaultValue, field.type),\n  };\n}\n\nexport function astFromEnumValue(\n  value: GraphQLEnumValue,\n  schema: GraphQLSchema,\n  pathToDirectivesInExtensions: Array<string>\n): EnumValueDefinitionNode {\n  return {\n    kind: Kind.ENUM_VALUE_DEFINITION,\n    description:\n      value.astNode?.description ?? value.description\n        ? {\n            kind: Kind.STRING,\n            value: value.description,\n            block: true,\n          }\n        : undefined,\n    name: {\n      kind: Kind.NAME,\n      value: value.name,\n    },\n    directives: getDirectiveNodes(value, schema, pathToDirectivesInExtensions),\n  };\n}\n\nexport function makeDeprecatedDirective(deprecationReason: string): DirectiveNode {\n  return makeDirectiveNode('deprecated', { reason: deprecationReason }, GraphQLDeprecatedDirective);\n}\n\nexport function makeDirectiveNode(\n  name: string,\n  args: Record<string, any>,\n  directive?: GraphQLDirective\n): DirectiveNode {\n  const directiveArguments: Array<ArgumentNode> = [];\n\n  if (directive != null) {\n    directive.args.forEach(arg => {\n      const argName = arg.name;\n      const argValue = args[argName];\n      if (argValue !== undefined) {\n        directiveArguments.push({\n          kind: Kind.ARGUMENT,\n          name: {\n            kind: Kind.NAME,\n            value: argName,\n          },\n          value: astFromValue(argValue, arg.type),\n        });\n      }\n    });\n  } else {\n    Object.entries(args).forEach(([argName, argValue]) => {\n      directiveArguments.push({\n        kind: Kind.ARGUMENT,\n        name: {\n          kind: Kind.NAME,\n          value: argName,\n        },\n        value: astFromValueUntyped(argValue),\n      });\n    });\n  }\n\n  return {\n    kind: Kind.DIRECTIVE,\n    name: {\n      kind: Kind.NAME,\n      value: name,\n    },\n    arguments: directiveArguments,\n  };\n}\n\nexport function makeDirectiveNodes(schema: GraphQLSchema, directiveValues: Record<string, any>): Array<DirectiveNode> {\n  const directiveNodes: Array<DirectiveNode> = [];\n  Object.entries(directiveValues).forEach(([directiveName, arrayOrSingleValue]) => {\n    const directive = schema.getDirective(directiveName);\n    if (Array.isArray(arrayOrSingleValue)) {\n      arrayOrSingleValue.forEach(value => {\n        directiveNodes.push(makeDirectiveNode(directiveName, value, directive));\n      });\n    } else {\n      directiveNodes.push(makeDirectiveNode(directiveName, arrayOrSingleValue, directive));\n    }\n  });\n  return directiveNodes;\n}\n"],"version":3}