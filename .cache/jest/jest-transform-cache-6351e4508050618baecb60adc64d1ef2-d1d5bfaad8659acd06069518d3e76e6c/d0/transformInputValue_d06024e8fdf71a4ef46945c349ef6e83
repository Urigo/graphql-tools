4d28fa1ee1d5424e9e3508d2b1cf3ed2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseInputValueLiteral = exports.parseInputValue = exports.serializeInputValue = exports.transformInputValue = void 0;
const graphql_1 = require("graphql");
function transformInputValue(type, value, inputLeafValueTransformer = null, inputObjectValueTransformer = null) {
    if (value == null) {
        return value;
    }
    const nullableType = graphql_1.getNullableType(type);
    if (graphql_1.isLeafType(nullableType)) {
        return inputLeafValueTransformer != null ? inputLeafValueTransformer(nullableType, value) : value;
    }
    else if (graphql_1.isListType(nullableType)) {
        return value.map((listMember) => transformInputValue(nullableType.ofType, listMember, inputLeafValueTransformer, inputObjectValueTransformer));
    }
    else if (graphql_1.isInputObjectType(nullableType)) {
        const fields = nullableType.getFields();
        const newValue = {};
        Object.keys(value).forEach(key => {
            const field = fields[key];
            if (field != null) {
                newValue[key] = transformInputValue(field.type, value[key], inputLeafValueTransformer, inputObjectValueTransformer);
            }
        });
        return inputObjectValueTransformer != null ? inputObjectValueTransformer(nullableType, newValue) : newValue;
    }
    // unreachable, no other possible return value
}
exports.transformInputValue = transformInputValue;
function serializeInputValue(type, value) {
    return transformInputValue(type, value, (t, v) => t.serialize(v));
}
exports.serializeInputValue = serializeInputValue;
function parseInputValue(type, value) {
    return transformInputValue(type, value, (t, v) => t.parseValue(v));
}
exports.parseInputValue = parseInputValue;
function parseInputValueLiteral(type, value) {
    return transformInputValue(type, value, (t, v) => t.parseLiteral(v, {}));
}
exports.parseInputValueLiteral = parseInputValueLiteral;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJkYXRfMDAwL0d1aWxkL2dyYXBocWwtdG9vbHMvcGFja2FnZXMvdXRpbHMvc3JjL3RyYW5zZm9ybUlucHV0VmFsdWUudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQXVHO0FBSXZHLFNBQWdCLG1CQUFtQixDQUNqQyxJQUFzQixFQUN0QixLQUFVLEVBQ1YsNEJBQXVELElBQUksRUFDM0QsOEJBQTJELElBQUk7SUFFL0QsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO1FBQ2pCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxNQUFNLFlBQVksR0FBRyx5QkFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTNDLElBQUksb0JBQVUsQ0FBQyxZQUFZLENBQUMsRUFBRTtRQUM1QixPQUFPLHlCQUF5QixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMseUJBQXlCLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7S0FDbkc7U0FBTSxJQUFJLG9CQUFVLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDbkMsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBZSxFQUFFLEVBQUUsQ0FDbkMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUseUJBQXlCLEVBQUUsMkJBQTJCLENBQUMsQ0FDN0csQ0FBQztLQUNIO1NBQU0sSUFBSSwyQkFBaUIsQ0FBQyxZQUFZLENBQUMsRUFBRTtRQUMxQyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDeEMsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMxQixJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7Z0JBQ2pCLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxtQkFBbUIsQ0FDakMsS0FBSyxDQUFDLElBQUksRUFDVixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQ1YseUJBQXlCLEVBQ3pCLDJCQUEyQixDQUM1QixDQUFDO2FBQ0g7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sMkJBQTJCLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQywyQkFBMkIsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztLQUM3RztJQUVELDhDQUE4QztBQUNoRCxDQUFDO0FBcENELGtEQW9DQztBQUVELFNBQWdCLG1CQUFtQixDQUFDLElBQXNCLEVBQUUsS0FBVTtJQUNwRSxPQUFPLG1CQUFtQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEUsQ0FBQztBQUZELGtEQUVDO0FBRUQsU0FBZ0IsZUFBZSxDQUFDLElBQXNCLEVBQUUsS0FBVTtJQUNoRSxPQUFPLG1CQUFtQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckUsQ0FBQztBQUZELDBDQUVDO0FBRUQsU0FBZ0Isc0JBQXNCLENBQUMsSUFBc0IsRUFBRSxLQUFVO0lBQ3ZFLE9BQU8sbUJBQW1CLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDM0UsQ0FBQztBQUZELHdEQUVDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2FyZGF0XzAwMC9HdWlsZC9ncmFwaHFsLXRvb2xzL3BhY2thZ2VzL3V0aWxzL3NyYy90cmFuc2Zvcm1JbnB1dFZhbHVlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdyYXBoUUxJbnB1dFR5cGUsIGdldE51bGxhYmxlVHlwZSwgaXNMZWFmVHlwZSwgaXNMaXN0VHlwZSwgaXNJbnB1dE9iamVjdFR5cGUgfSBmcm9tICdncmFwaHFsJztcblxuaW1wb3J0IHsgSW5wdXRMZWFmVmFsdWVUcmFuc2Zvcm1lciwgSW5wdXRPYmplY3RWYWx1ZVRyYW5zZm9ybWVyIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1JbnB1dFZhbHVlKFxuICB0eXBlOiBHcmFwaFFMSW5wdXRUeXBlLFxuICB2YWx1ZTogYW55LFxuICBpbnB1dExlYWZWYWx1ZVRyYW5zZm9ybWVyOiBJbnB1dExlYWZWYWx1ZVRyYW5zZm9ybWVyID0gbnVsbCxcbiAgaW5wdXRPYmplY3RWYWx1ZVRyYW5zZm9ybWVyOiBJbnB1dE9iamVjdFZhbHVlVHJhbnNmb3JtZXIgPSBudWxsXG4pOiBhbnkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGNvbnN0IG51bGxhYmxlVHlwZSA9IGdldE51bGxhYmxlVHlwZSh0eXBlKTtcblxuICBpZiAoaXNMZWFmVHlwZShudWxsYWJsZVR5cGUpKSB7XG4gICAgcmV0dXJuIGlucHV0TGVhZlZhbHVlVHJhbnNmb3JtZXIgIT0gbnVsbCA/IGlucHV0TGVhZlZhbHVlVHJhbnNmb3JtZXIobnVsbGFibGVUeXBlLCB2YWx1ZSkgOiB2YWx1ZTtcbiAgfSBlbHNlIGlmIChpc0xpc3RUeXBlKG51bGxhYmxlVHlwZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKChsaXN0TWVtYmVyOiBhbnkpID0+XG4gICAgICB0cmFuc2Zvcm1JbnB1dFZhbHVlKG51bGxhYmxlVHlwZS5vZlR5cGUsIGxpc3RNZW1iZXIsIGlucHV0TGVhZlZhbHVlVHJhbnNmb3JtZXIsIGlucHV0T2JqZWN0VmFsdWVUcmFuc2Zvcm1lcilcbiAgICApO1xuICB9IGVsc2UgaWYgKGlzSW5wdXRPYmplY3RUeXBlKG51bGxhYmxlVHlwZSkpIHtcbiAgICBjb25zdCBmaWVsZHMgPSBudWxsYWJsZVR5cGUuZ2V0RmllbGRzKCk7XG4gICAgY29uc3QgbmV3VmFsdWUgPSB7fTtcbiAgICBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgY29uc3QgZmllbGQgPSBmaWVsZHNba2V5XTtcbiAgICAgIGlmIChmaWVsZCAhPSBudWxsKSB7XG4gICAgICAgIG5ld1ZhbHVlW2tleV0gPSB0cmFuc2Zvcm1JbnB1dFZhbHVlKFxuICAgICAgICAgIGZpZWxkLnR5cGUsXG4gICAgICAgICAgdmFsdWVba2V5XSxcbiAgICAgICAgICBpbnB1dExlYWZWYWx1ZVRyYW5zZm9ybWVyLFxuICAgICAgICAgIGlucHV0T2JqZWN0VmFsdWVUcmFuc2Zvcm1lclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBpbnB1dE9iamVjdFZhbHVlVHJhbnNmb3JtZXIgIT0gbnVsbCA/IGlucHV0T2JqZWN0VmFsdWVUcmFuc2Zvcm1lcihudWxsYWJsZVR5cGUsIG5ld1ZhbHVlKSA6IG5ld1ZhbHVlO1xuICB9XG5cbiAgLy8gdW5yZWFjaGFibGUsIG5vIG90aGVyIHBvc3NpYmxlIHJldHVybiB2YWx1ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplSW5wdXRWYWx1ZSh0eXBlOiBHcmFwaFFMSW5wdXRUeXBlLCB2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0cmFuc2Zvcm1JbnB1dFZhbHVlKHR5cGUsIHZhbHVlLCAodCwgdikgPT4gdC5zZXJpYWxpemUodikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VJbnB1dFZhbHVlKHR5cGU6IEdyYXBoUUxJbnB1dFR5cGUsIHZhbHVlOiBhbnkpIHtcbiAgcmV0dXJuIHRyYW5zZm9ybUlucHV0VmFsdWUodHlwZSwgdmFsdWUsICh0LCB2KSA9PiB0LnBhcnNlVmFsdWUodikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VJbnB1dFZhbHVlTGl0ZXJhbCh0eXBlOiBHcmFwaFFMSW5wdXRUeXBlLCB2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0cmFuc2Zvcm1JbnB1dFZhbHVlKHR5cGUsIHZhbHVlLCAodCwgdikgPT4gdC5wYXJzZUxpdGVyYWwodiwge30pKTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==