5c779aa7035274ce8590a6d666419fd7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBuiltInForStub = exports.isNamedStub = exports.createStub = exports.createNamedStub = void 0;
const graphql_1 = require("graphql");
function createNamedStub(name, type) {
    let constructor;
    if (type === 'object') {
        constructor = graphql_1.GraphQLObjectType;
    }
    else if (type === 'interface') {
        constructor = graphql_1.GraphQLInterfaceType;
    }
    else {
        constructor = graphql_1.GraphQLInputObjectType;
    }
    return new constructor({
        name,
        fields: {
            __fake: {
                type: graphql_1.GraphQLString,
            },
        },
    });
}
exports.createNamedStub = createNamedStub;
function createStub(node, type) {
    switch (node.kind) {
        case graphql_1.Kind.LIST_TYPE:
            return new graphql_1.GraphQLList(createStub(node.type, type));
        case graphql_1.Kind.NON_NULL_TYPE:
            return new graphql_1.GraphQLNonNull(createStub(node.type, type));
        default:
            if (type === 'output') {
                return createNamedStub(node.name.value, 'object');
            }
            return createNamedStub(node.name.value, 'input');
    }
}
exports.createStub = createStub;
function isNamedStub(type) {
    if (graphql_1.isObjectType(type) || graphql_1.isInterfaceType(type) || graphql_1.isInputObjectType(type)) {
        const fields = type.getFields();
        const fieldNames = Object.keys(fields);
        return fieldNames.length === 1 && fields[fieldNames[0]].name === '__fake';
    }
    return false;
}
exports.isNamedStub = isNamedStub;
function getBuiltInForStub(type) {
    switch (type.name) {
        case graphql_1.GraphQLInt.name:
            return graphql_1.GraphQLInt;
        case graphql_1.GraphQLFloat.name:
            return graphql_1.GraphQLFloat;
        case graphql_1.GraphQLString.name:
            return graphql_1.GraphQLString;
        case graphql_1.GraphQLBoolean.name:
            return graphql_1.GraphQLBoolean;
        case graphql_1.GraphQLID.name:
            return graphql_1.GraphQLID;
        default:
            return type;
    }
}
exports.getBuiltInForStub = getBuiltInForStub;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJkYXRfMDAwL0d1aWxkL2dyYXBocWwtdG9vbHMvcGFja2FnZXMvdXRpbHMvc3JjL3N0dWIudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBb0JpQjtBQUtqQixTQUFnQixlQUFlLENBQzdCLElBQVksRUFDWixJQUFTO0lBRVQsSUFBSSxXQUFnQixDQUFDO0lBQ3JCLElBQUksSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUNyQixXQUFXLEdBQUcsMkJBQWlCLENBQUM7S0FDakM7U0FBTSxJQUFJLElBQUksS0FBSyxXQUFXLEVBQUU7UUFDL0IsV0FBVyxHQUFHLDhCQUFvQixDQUFDO0tBQ3BDO1NBQU07UUFDTCxXQUFXLEdBQUcsZ0NBQXNCLENBQUM7S0FDdEM7SUFFRCxPQUFPLElBQUksV0FBVyxDQUFDO1FBQ3JCLElBQUk7UUFDSixNQUFNLEVBQUU7WUFDTixNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLHVCQUFhO2FBQ3BCO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBckJELDBDQXFCQztBQUtELFNBQWdCLFVBQVUsQ0FBQyxJQUFjLEVBQUUsSUFBUztJQUNsRCxRQUFRLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDakIsS0FBSyxjQUFJLENBQUMsU0FBUztZQUNqQixPQUFPLElBQUkscUJBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3RELEtBQUssY0FBSSxDQUFDLGFBQWE7WUFDckIsT0FBTyxJQUFJLHdCQUFjLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN6RDtZQUNFLElBQUksSUFBSSxLQUFLLFFBQVEsRUFBRTtnQkFDckIsT0FBTyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDbkQ7WUFDRCxPQUFPLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNwRDtBQUNILENBQUM7QUFaRCxnQ0FZQztBQUVELFNBQWdCLFdBQVcsQ0FBQyxJQUFzQjtJQUNoRCxJQUFJLHNCQUFZLENBQUMsSUFBSSxDQUFDLElBQUkseUJBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSwyQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMxRSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QyxPQUFPLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDO0tBQzNFO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBUkQsa0NBUUM7QUFFRCxTQUFnQixpQkFBaUIsQ0FBQyxJQUFzQjtJQUN0RCxRQUFRLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDakIsS0FBSyxvQkFBVSxDQUFDLElBQUk7WUFDbEIsT0FBTyxvQkFBVSxDQUFDO1FBQ3BCLEtBQUssc0JBQVksQ0FBQyxJQUFJO1lBQ3BCLE9BQU8sc0JBQVksQ0FBQztRQUN0QixLQUFLLHVCQUFhLENBQUMsSUFBSTtZQUNyQixPQUFPLHVCQUFhLENBQUM7UUFDdkIsS0FBSyx3QkFBYyxDQUFDLElBQUk7WUFDdEIsT0FBTyx3QkFBYyxDQUFDO1FBQ3hCLEtBQUssbUJBQVMsQ0FBQyxJQUFJO1lBQ2pCLE9BQU8sbUJBQVMsQ0FBQztRQUNuQjtZQUNFLE9BQU8sSUFBSSxDQUFDO0tBQ2Y7QUFDSCxDQUFDO0FBZkQsOENBZUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvYXJkYXRfMDAwL0d1aWxkL2dyYXBocWwtdG9vbHMvcGFja2FnZXMvdXRpbHMvc3JjL3N0dWIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgR3JhcGhRTE9iamVjdFR5cGUsXG4gIEdyYXBoUUxJbnRlcmZhY2VUeXBlLFxuICBHcmFwaFFMSW5wdXRPYmplY3RUeXBlLFxuICBHcmFwaFFMU3RyaW5nLFxuICBHcmFwaFFMTmFtZWRUeXBlLFxuICBHcmFwaFFMSW50LFxuICBHcmFwaFFMRmxvYXQsXG4gIEdyYXBoUUxCb29sZWFuLFxuICBHcmFwaFFMSUQsXG4gIGlzT2JqZWN0VHlwZSxcbiAgaXNJbnRlcmZhY2VUeXBlLFxuICBpc0lucHV0T2JqZWN0VHlwZSxcbiAgVHlwZU5vZGUsXG4gIEtpbmQsXG4gIEdyYXBoUUxUeXBlLFxuICBHcmFwaFFMTGlzdCxcbiAgR3JhcGhRTE5vbk51bGwsXG4gIEdyYXBoUUxPdXRwdXRUeXBlLFxuICBHcmFwaFFMSW5wdXRUeXBlLFxufSBmcm9tICdncmFwaHFsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkU3R1YihuYW1lOiBzdHJpbmcsIHR5cGU6ICdvYmplY3QnKTogR3JhcGhRTE9iamVjdFR5cGU7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTmFtZWRTdHViKG5hbWU6IHN0cmluZywgdHlwZTogJ2ludGVyZmFjZScpOiBHcmFwaFFMSW50ZXJmYWNlVHlwZTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOYW1lZFN0dWIobmFtZTogc3RyaW5nLCB0eXBlOiAnaW5wdXQnKTogR3JhcGhRTElucHV0T2JqZWN0VHlwZTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOYW1lZFN0dWIoXG4gIG5hbWU6IHN0cmluZyxcbiAgdHlwZTogYW55XG4pOiBHcmFwaFFMT2JqZWN0VHlwZSB8IEdyYXBoUUxJbnRlcmZhY2VUeXBlIHwgR3JhcGhRTElucHV0T2JqZWN0VHlwZSB7XG4gIGxldCBjb25zdHJ1Y3RvcjogYW55O1xuICBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdHJ1Y3RvciA9IEdyYXBoUUxPYmplY3RUeXBlO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdpbnRlcmZhY2UnKSB7XG4gICAgY29uc3RydWN0b3IgPSBHcmFwaFFMSW50ZXJmYWNlVHlwZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdHJ1Y3RvciA9IEdyYXBoUUxJbnB1dE9iamVjdFR5cGU7XG4gIH1cblxuICByZXR1cm4gbmV3IGNvbnN0cnVjdG9yKHtcbiAgICBuYW1lLFxuICAgIGZpZWxkczoge1xuICAgICAgX19mYWtlOiB7XG4gICAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3R1Yihub2RlOiBUeXBlTm9kZSwgdHlwZTogJ291dHB1dCcpOiBHcmFwaFFMT3V0cHV0VHlwZTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdHViKG5vZGU6IFR5cGVOb2RlLCB0eXBlOiAnaW5wdXQnKTogR3JhcGhRTElucHV0VHlwZTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdHViKG5vZGU6IFR5cGVOb2RlLCB0eXBlOiAnb3V0cHV0JyB8ICdpbnB1dCcpOiBHcmFwaFFMVHlwZTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdHViKG5vZGU6IFR5cGVOb2RlLCB0eXBlOiBhbnkpOiBhbnkge1xuICBzd2l0Y2ggKG5vZGUua2luZCkge1xuICAgIGNhc2UgS2luZC5MSVNUX1RZUEU6XG4gICAgICByZXR1cm4gbmV3IEdyYXBoUUxMaXN0KGNyZWF0ZVN0dWIobm9kZS50eXBlLCB0eXBlKSk7XG4gICAgY2FzZSBLaW5kLk5PTl9OVUxMX1RZUEU6XG4gICAgICByZXR1cm4gbmV3IEdyYXBoUUxOb25OdWxsKGNyZWF0ZVN0dWIobm9kZS50eXBlLCB0eXBlKSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmICh0eXBlID09PSAnb3V0cHV0Jykge1xuICAgICAgICByZXR1cm4gY3JlYXRlTmFtZWRTdHViKG5vZGUubmFtZS52YWx1ZSwgJ29iamVjdCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZU5hbWVkU3R1Yihub2RlLm5hbWUudmFsdWUsICdpbnB1dCcpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05hbWVkU3R1Yih0eXBlOiBHcmFwaFFMTmFtZWRUeXBlKTogYm9vbGVhbiB7XG4gIGlmIChpc09iamVjdFR5cGUodHlwZSkgfHwgaXNJbnRlcmZhY2VUeXBlKHR5cGUpIHx8IGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgY29uc3QgZmllbGRzID0gdHlwZS5nZXRGaWVsZHMoKTtcbiAgICBjb25zdCBmaWVsZE5hbWVzID0gT2JqZWN0LmtleXMoZmllbGRzKTtcbiAgICByZXR1cm4gZmllbGROYW1lcy5sZW5ndGggPT09IDEgJiYgZmllbGRzW2ZpZWxkTmFtZXNbMF1dLm5hbWUgPT09ICdfX2Zha2UnO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnVpbHRJbkZvclN0dWIodHlwZTogR3JhcGhRTE5hbWVkVHlwZSk6IEdyYXBoUUxOYW1lZFR5cGUge1xuICBzd2l0Y2ggKHR5cGUubmFtZSkge1xuICAgIGNhc2UgR3JhcGhRTEludC5uYW1lOlxuICAgICAgcmV0dXJuIEdyYXBoUUxJbnQ7XG4gICAgY2FzZSBHcmFwaFFMRmxvYXQubmFtZTpcbiAgICAgIHJldHVybiBHcmFwaFFMRmxvYXQ7XG4gICAgY2FzZSBHcmFwaFFMU3RyaW5nLm5hbWU6XG4gICAgICByZXR1cm4gR3JhcGhRTFN0cmluZztcbiAgICBjYXNlIEdyYXBoUUxCb29sZWFuLm5hbWU6XG4gICAgICByZXR1cm4gR3JhcGhRTEJvb2xlYW47XG4gICAgY2FzZSBHcmFwaFFMSUQubmFtZTpcbiAgICAgIHJldHVybiBHcmFwaFFMSUQ7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB0eXBlO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=