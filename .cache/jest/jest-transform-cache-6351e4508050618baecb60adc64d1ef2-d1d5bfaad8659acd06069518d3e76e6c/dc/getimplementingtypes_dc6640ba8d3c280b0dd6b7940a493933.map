{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/get-implementing-types.ts","mappings":";;;AAAA,qCAAsD;AAEtD,SAAgB,oBAAoB,CAAC,aAAqB,EAAE,MAAqB;IAC/E,MAAM,WAAW,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;IACxC,MAAM,MAAM,GAAa,EAAE,CAAC;IAE5B,KAAK,MAAM,eAAe,IAAI,WAAW,EAAE;QACzC,MAAM,WAAW,GAAG,WAAW,CAAC,eAAe,CAAC,CAAC;QACjD,IAAI,sBAAY,CAAC,WAAW,CAAC,EAAE;YAC7B,MAAM,aAAa,GAAG,WAAW,CAAC,aAAa,EAAE,CAAC;YAElD,IAAI,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,aAAa,CAAC,EAAE;gBACzD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aAC/B;SACF;KACF;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAhBD,oDAgBC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/get-implementing-types.ts"],"sourcesContent":["import { GraphQLSchema, isObjectType } from 'graphql';\n\nexport function getImplementingTypes(interfaceName: string, schema: GraphQLSchema): string[] {\n  const allTypesMap = schema.getTypeMap();\n  const result: string[] = [];\n\n  for (const graphqlTypeName in allTypesMap) {\n    const graphqlType = allTypesMap[graphqlTypeName];\n    if (isObjectType(graphqlType)) {\n      const allInterfaces = graphqlType.getInterfaces();\n\n      if (allInterfaces.find(int => int.name === interfaceName)) {\n        result.push(graphqlType.name);\n      }\n    }\n  }\n\n  return result;\n}\n"],"version":3}