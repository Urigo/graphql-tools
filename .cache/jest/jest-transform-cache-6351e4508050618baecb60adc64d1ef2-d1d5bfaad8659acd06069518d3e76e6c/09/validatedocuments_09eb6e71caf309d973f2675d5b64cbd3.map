{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/validate-documents.ts","mappings":"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","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/validate-documents.ts"],"sourcesContent":["import {\n  Kind,\n  validate,\n  GraphQLSchema,\n  GraphQLError,\n  specifiedRules,\n  FragmentDefinitionNode,\n  ValidationContext,\n  ASTVisitor,\n} from 'graphql';\nimport { Source } from './loaders';\nimport AggregateError from '@ardatan/aggregate-error';\n\nexport type ValidationRule = (context: ValidationContext) => ASTVisitor;\n\nexport interface LoadDocumentError {\n  readonly filePath: string;\n  readonly errors: ReadonlyArray<GraphQLError>;\n}\n\nexport async function validateGraphQlDocuments(\n  schema: GraphQLSchema,\n  documentFiles: Source[],\n  effectiveRules?: ValidationRule[]\n): Promise<ReadonlyArray<LoadDocumentError>> {\n  effectiveRules = effectiveRules || createDefaultRules();\n  const allFragments: FragmentDefinitionNode[] = [];\n\n  documentFiles.forEach(documentFile => {\n    if (documentFile.document) {\n      for (const definitionNode of documentFile.document.definitions) {\n        if (definitionNode.kind === Kind.FRAGMENT_DEFINITION) {\n          allFragments.push(definitionNode);\n        }\n      }\n    }\n  });\n\n  const allErrors: LoadDocumentError[] = [];\n\n  await Promise.all(\n    documentFiles.map(async documentFile => {\n      const documentToValidate = {\n        kind: Kind.DOCUMENT,\n        definitions: [...allFragments, ...documentFile.document.definitions].filter((definition, index, list) => {\n          if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n            const firstIndex = list.findIndex(\n              def => def.kind === Kind.FRAGMENT_DEFINITION && def.name.value === definition.name.value\n            );\n            const isDuplicated = firstIndex !== index;\n\n            if (isDuplicated) {\n              return false;\n            }\n          }\n\n          return true;\n        }),\n      };\n\n      const errors = validate(schema, documentToValidate, effectiveRules);\n\n      if (errors.length > 0) {\n        allErrors.push({\n          filePath: documentFile.location,\n          errors,\n        });\n      }\n    })\n  );\n\n  return allErrors;\n}\n\nexport function checkValidationErrors(loadDocumentErrors: ReadonlyArray<LoadDocumentError>): void | never {\n  if (loadDocumentErrors.length > 0) {\n    const errors: Error[] = [];\n\n    for (const loadDocumentError of loadDocumentErrors) {\n      for (const graphQLError of loadDocumentError.errors) {\n        const error = new Error();\n        error.name = 'GraphQLDocumentError';\n        error.message = `${error.name}: ${graphQLError.message}`;\n        error.stack = error.message;\n        graphQLError.locations.forEach(\n          location => (error.stack += `\\n    at ${loadDocumentError.filePath}:${location.line}:${location.column}`)\n        );\n\n        errors.push(error);\n      }\n    }\n\n    throw new AggregateError(errors);\n  }\n}\n\nfunction createDefaultRules() {\n  const ignored = ['NoUnusedFragmentsRule', 'NoUnusedVariablesRule', 'KnownDirectivesRule'];\n\n  // GraphQL v14 has no Rule suffix in function names\n  // Adding `*Rule` makes validation backwards compatible\n  ignored.forEach(rule => {\n    ignored.push(rule.replace(/Rule$/, ''));\n  });\n\n  return specifiedRules.filter((f: (...args: any[]) => any) => !ignored.includes(f.name));\n}\n"],"version":3}