3f0444ec40abcc4f1f842841376acbd0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.argumentToArgumentConfig = exports.argsToFieldConfigArgumentMap = exports.fieldToFieldConfig = exports.inputFieldToFieldConfig = void 0;
function inputFieldToFieldConfig(field) {
    return {
        description: field.description,
        type: field.type,
        defaultValue: field.defaultValue,
        extensions: field.extensions,
        astNode: field.astNode,
    };
}
exports.inputFieldToFieldConfig = inputFieldToFieldConfig;
function fieldToFieldConfig(field) {
    return {
        description: field.description,
        type: field.type,
        args: argsToFieldConfigArgumentMap(field.args),
        resolve: field.resolve,
        subscribe: field.subscribe,
        deprecationReason: field.deprecationReason,
        extensions: field.extensions,
        astNode: field.astNode,
    };
}
exports.fieldToFieldConfig = fieldToFieldConfig;
function argsToFieldConfigArgumentMap(args) {
    const newArguments = {};
    args.forEach(arg => {
        newArguments[arg.name] = argumentToArgumentConfig(arg);
    });
    return newArguments;
}
exports.argsToFieldConfigArgumentMap = argsToFieldConfigArgumentMap;
function argumentToArgumentConfig(arg) {
    return {
        description: arg.description,
        type: arg.type,
        defaultValue: arg.defaultValue,
        extensions: arg.extensions,
        astNode: arg.astNode,
    };
}
exports.argumentToArgumentConfig = argumentToArgumentConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJkYXRfMDAwL0d1aWxkL2dyYXBocWwtdG9vbHMvcGFja2FnZXMvdXRpbHMvc3JjL3RvQ29uZmlnLnRzIiwibWFwcGluZ3MiOiI7OztBQVVBLFNBQWdCLHVCQUF1QixDQUFDLEtBQXdCO0lBQzlELE9BQU87UUFDTCxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7UUFDOUIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1FBQ2hCLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtRQUNoQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7UUFDNUIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO0tBQ3ZCLENBQUM7QUFDSixDQUFDO0FBUkQsMERBUUM7QUFFRCxTQUFnQixrQkFBa0IsQ0FBQyxLQUE2QjtJQUM5RCxPQUFPO1FBQ0wsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1FBQzlCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtRQUNoQixJQUFJLEVBQUUsNEJBQTRCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztRQUM5QyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87UUFDdEIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1FBQzFCLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxpQkFBaUI7UUFDMUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1FBQzVCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztLQUN2QixDQUFDO0FBQ0osQ0FBQztBQVhELGdEQVdDO0FBRUQsU0FBZ0IsNEJBQTRCLENBQUMsSUFBb0M7SUFDL0UsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDO0lBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDakIsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUM7QUFQRCxvRUFPQztBQUVELFNBQWdCLHdCQUF3QixDQUFDLEdBQW9CO0lBQzNELE9BQU87UUFDTCxXQUFXLEVBQUUsR0FBRyxDQUFDLFdBQVc7UUFDNUIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO1FBQ2QsWUFBWSxFQUFFLEdBQUcsQ0FBQyxZQUFZO1FBQzlCLFVBQVUsRUFBRSxHQUFHLENBQUMsVUFBVTtRQUMxQixPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87S0FDckIsQ0FBQztBQUNKLENBQUM7QUFSRCw0REFRQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9hcmRhdF8wMDAvR3VpbGQvZ3JhcGhxbC10b29scy9wYWNrYWdlcy91dGlscy9zcmMvdG9Db25maWcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgR3JhcGhRTEFyZ3VtZW50LFxuICBHcmFwaFFMRmllbGRDb25maWdBcmd1bWVudE1hcCxcbiAgR3JhcGhRTEZpZWxkLFxuICBHcmFwaFFMSW5wdXRGaWVsZCxcbiAgR3JhcGhRTElucHV0RmllbGRDb25maWcsXG4gIEdyYXBoUUxBcmd1bWVudENvbmZpZyxcbiAgR3JhcGhRTEZpZWxkQ29uZmlnLFxufSBmcm9tICdncmFwaHFsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlucHV0RmllbGRUb0ZpZWxkQ29uZmlnKGZpZWxkOiBHcmFwaFFMSW5wdXRGaWVsZCk6IEdyYXBoUUxJbnB1dEZpZWxkQ29uZmlnIHtcbiAgcmV0dXJuIHtcbiAgICBkZXNjcmlwdGlvbjogZmllbGQuZGVzY3JpcHRpb24sXG4gICAgdHlwZTogZmllbGQudHlwZSxcbiAgICBkZWZhdWx0VmFsdWU6IGZpZWxkLmRlZmF1bHRWYWx1ZSxcbiAgICBleHRlbnNpb25zOiBmaWVsZC5leHRlbnNpb25zLFxuICAgIGFzdE5vZGU6IGZpZWxkLmFzdE5vZGUsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWVsZFRvRmllbGRDb25maWcoZmllbGQ6IEdyYXBoUUxGaWVsZDxhbnksIGFueT4pOiBHcmFwaFFMRmllbGRDb25maWc8YW55LCBhbnk+IHtcbiAgcmV0dXJuIHtcbiAgICBkZXNjcmlwdGlvbjogZmllbGQuZGVzY3JpcHRpb24sXG4gICAgdHlwZTogZmllbGQudHlwZSxcbiAgICBhcmdzOiBhcmdzVG9GaWVsZENvbmZpZ0FyZ3VtZW50TWFwKGZpZWxkLmFyZ3MpLFxuICAgIHJlc29sdmU6IGZpZWxkLnJlc29sdmUsXG4gICAgc3Vic2NyaWJlOiBmaWVsZC5zdWJzY3JpYmUsXG4gICAgZGVwcmVjYXRpb25SZWFzb246IGZpZWxkLmRlcHJlY2F0aW9uUmVhc29uLFxuICAgIGV4dGVuc2lvbnM6IGZpZWxkLmV4dGVuc2lvbnMsXG4gICAgYXN0Tm9kZTogZmllbGQuYXN0Tm9kZSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFyZ3NUb0ZpZWxkQ29uZmlnQXJndW1lbnRNYXAoYXJnczogUmVhZG9ubHlBcnJheTxHcmFwaFFMQXJndW1lbnQ+KTogR3JhcGhRTEZpZWxkQ29uZmlnQXJndW1lbnRNYXAge1xuICBjb25zdCBuZXdBcmd1bWVudHMgPSB7fTtcbiAgYXJncy5mb3JFYWNoKGFyZyA9PiB7XG4gICAgbmV3QXJndW1lbnRzW2FyZy5uYW1lXSA9IGFyZ3VtZW50VG9Bcmd1bWVudENvbmZpZyhhcmcpO1xuICB9KTtcblxuICByZXR1cm4gbmV3QXJndW1lbnRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXJndW1lbnRUb0FyZ3VtZW50Q29uZmlnKGFyZzogR3JhcGhRTEFyZ3VtZW50KTogR3JhcGhRTEFyZ3VtZW50Q29uZmlnIHtcbiAgcmV0dXJuIHtcbiAgICBkZXNjcmlwdGlvbjogYXJnLmRlc2NyaXB0aW9uLFxuICAgIHR5cGU6IGFyZy50eXBlLFxuICAgIGRlZmF1bHRWYWx1ZTogYXJnLmRlZmF1bHRWYWx1ZSxcbiAgICBleHRlbnNpb25zOiBhcmcuZXh0ZW5zaW9ucyxcbiAgICBhc3ROb2RlOiBhcmcuYXN0Tm9kZSxcbiAgfTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==