{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/loaders.ts","mappings":"","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/loaders.ts"],"sourcesContent":["import { DocumentNode, GraphQLSchema, BuildSchemaOptions } from 'graphql';\nimport { GraphQLSchemaValidationOptions } from 'graphql/type/schema';\nimport { GraphQLParseOptions } from './Interfaces';\n\nexport interface Source {\n  document?: DocumentNode;\n  schema?: GraphQLSchema;\n  rawSDL?: string;\n  location?: string;\n}\n\nexport type SingleFileOptions = GraphQLParseOptions &\n  GraphQLSchemaValidationOptions &\n  BuildSchemaOptions & {\n    cwd?: string;\n  };\n\nexport type WithList<T> = T | T[];\nexport type ElementOf<TList> = TList extends Array<infer TElement> ? TElement : never;\nexport type SchemaPointer = WithList<string>;\nexport type SchemaPointerSingle = ElementOf<SchemaPointer>;\nexport type DocumentGlobPathPointer = string;\nexport type DocumentPointer = WithList<DocumentGlobPathPointer>;\nexport type DocumentPointerSingle = ElementOf<DocumentPointer>;\n\nexport interface Loader<TPointer = string, TOptions extends SingleFileOptions = SingleFileOptions> {\n  loaderId(): string;\n  canLoad(pointer: TPointer, options?: TOptions): Promise<boolean>;\n  canLoadSync?(pointer: TPointer, options?: TOptions): boolean;\n  load(pointer: TPointer, options?: TOptions): Promise<Source | never>;\n  loadSync?(pointer: TPointer, options?: TOptions): Source | never;\n}\n\nexport type SchemaLoader<TOptions extends SingleFileOptions = SingleFileOptions> = Loader<\n  SchemaPointerSingle,\n  TOptions\n>;\n\nexport type DocumentLoader<TOptions extends SingleFileOptions = SingleFileOptions> = Loader<\n  DocumentPointerSingle,\n  TOptions\n>;\n\nexport type UniversalLoader<TOptions extends SingleFileOptions = SingleFileOptions> = Loader<\n  SchemaPointerSingle | DocumentPointerSingle,\n  TOptions\n>;\n"],"version":3}