{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/getArgumentValues.ts","mappings":";;;AAAA,qCAWiB;AAEjB,uCAAoC;AAEpC;;;;;;;GAOG;AACH,SAAgB,iBAAiB,CAC/B,GAA8C,EAC9C,IAA+B,EAC/B,iBAAsC,EAAE;;IAExC,MAAM,WAAW,GAAwB,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,MAAM,CAC5E,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;QACvB,GAAG,IAAI;QACP,CAAC,GAAG,CAAC,EAAE,KAAK;KACb,CAAC,EACF,EAAE,CACH,CAAC;IAEF,MAAM,aAAa,GAAG,EAAE,CAAC;IAEzB,uEAAuE;IACvE,MAAM,aAAa,GAAG,MAAA,IAAI,CAAC,SAAS,mCAAI,EAAE,CAAC;IAC3C,MAAM,UAAU,GAAiC,aAAa,CAAC,MAAM,CACnE,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;QACd,GAAG,IAAI;QACP,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG;KACtB,CAAC,EACF,EAAE,CACH,CAAC;IAEF,KAAK,MAAM,MAAM,IAAI,GAAG,CAAC,IAAI,EAAE;QAC7B,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACzB,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC;QAC5B,MAAM,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;QAEtC,IAAI,CAAC,YAAY,EAAE;YACjB,IAAI,MAAM,CAAC,YAAY,KAAK,SAAS,EAAE;gBACrC,aAAa,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC;aAC3C;iBAAM,IAAI,uBAAa,CAAC,OAAO,CAAC,EAAE;gBACjC,MAAM,IAAI,sBAAY,CACpB,aAAa,IAAI,uBAAuB,iBAAO,CAAC,OAAO,CAAC,IAAI,GAAG,mBAAmB,EAClF,IAAI,CACL,CAAC;aACH;YACD,SAAS;SACV;QAED,MAAM,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC;QACrC,IAAI,MAAM,GAAG,SAAS,CAAC,IAAI,KAAK,cAAI,CAAC,IAAI,CAAC;QAE1C,IAAI,SAAS,CAAC,IAAI,KAAK,cAAI,CAAC,QAAQ,EAAE;YACpC,MAAM,YAAY,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;YAC1C,IAAI,cAAc,IAAI,IAAI,IAAI,CAAC,CAAC,YAAY,IAAI,WAAW,CAAC,EAAE;gBAC5D,IAAI,MAAM,CAAC,YAAY,KAAK,SAAS,EAAE;oBACrC,aAAa,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC;iBAC3C;qBAAM,IAAI,uBAAa,CAAC,OAAO,CAAC,EAAE;oBACjC,MAAM,IAAI,sBAAY,CACpB,aAAa,IAAI,uBAAuB,iBAAO,CAAC,OAAO,CAAC,IAAI;wBAC1D,+BAA+B,YAAY,2CAA2C,EACxF,SAAS,CACV,CAAC;iBACH;gBACD,SAAS;aACV;YACD,MAAM,GAAG,cAAc,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC;SAC/C;QAED,IAAI,MAAM,IAAI,uBAAa,CAAC,OAAO,CAAC,EAAE;YACpC,MAAM,IAAI,sBAAY,CACpB,aAAa,IAAI,uBAAuB,iBAAO,CAAC,OAAO,CAAC,IAAI,GAAG,mBAAmB,EAClF,SAAS,CACV,CAAC;SACH;QAED,MAAM,YAAY,GAAG,sBAAY,CAAC,SAAS,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;QACtE,IAAI,YAAY,KAAK,SAAS,EAAE;YAC9B,oEAAoE;YACpE,kEAAkE;YAClE,2CAA2C;YAC3C,MAAM,IAAI,sBAAY,CAAC,aAAa,IAAI,uBAAuB,eAAK,CAAC,SAAS,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;SAChG;QACD,aAAa,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC;KACpC;IACD,OAAO,aAAa,CAAC;AACvB,CAAC;AA/ED,8CA+EC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/getArgumentValues.ts"],"sourcesContent":["import {\n  valueFromAST,\n  GraphQLField,\n  GraphQLDirective,\n  DirectiveNode,\n  FieldNode,\n  isNonNullType,\n  GraphQLError,\n  Kind,\n  print,\n  ArgumentNode,\n} from 'graphql';\n\nimport { inspect } from './inspect';\n\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getArgumentValues(\n  def: GraphQLField<any, any> | GraphQLDirective,\n  node: FieldNode | DirectiveNode,\n  variableValues: Record<string, any> = {}\n): Record<string, any> {\n  const variableMap: Record<string, any> = Object.entries(variableValues).reduce(\n    (prev, [key, value]) => ({\n      ...prev,\n      [key]: value,\n    }),\n    {}\n  );\n\n  const coercedValues = {};\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const argumentNodes = node.arguments ?? [];\n  const argNodeMap: Record<string, ArgumentNode> = argumentNodes.reduce(\n    (prev, arg) => ({\n      ...prev,\n      [arg.name.value]: arg,\n    }),\n    {}\n  );\n\n  for (const argDef of def.args) {\n    const name = argDef.name;\n    const argType = argDef.type;\n    const argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError(\n          `Argument \"${name}\" of required type \"${inspect(argType)}\" ` + 'was not provided.',\n          node\n        );\n      }\n      continue;\n    }\n\n    const valueNode = argumentNode.value;\n    let isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      const variableName = valueNode.name.value;\n      if (variableValues == null || !(variableName in variableMap)) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (isNonNullType(argType)) {\n          throw new GraphQLError(\n            `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n              `was provided the variable \"$${variableName}\" which was not provided a runtime value.`,\n            valueNode\n          );\n        }\n        continue;\n      }\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && isNonNullType(argType)) {\n      throw new GraphQLError(\n        `Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` + 'must not be null.',\n        valueNode\n      );\n    }\n\n    const coercedValue = valueFromAST(valueNode, argType, variableValues);\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(`Argument \"${name}\" has invalid value ${print(valueNode)}.`, valueNode);\n    }\n    coercedValues[name] = coercedValue;\n  }\n  return coercedValues;\n}\n"],"version":3}