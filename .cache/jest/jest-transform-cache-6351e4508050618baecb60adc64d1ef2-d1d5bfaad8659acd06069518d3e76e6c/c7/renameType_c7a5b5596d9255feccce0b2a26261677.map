{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/renameType.ts","mappings":"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","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/renameType.ts"],"sourcesContent":["import {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLObjectType,\n  GraphQLNamedType,\n  GraphQLScalarType,\n  GraphQLUnionType,\n  isEnumType,\n  isInterfaceType,\n  isInputObjectType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from 'graphql';\n\nexport function renameType(type: GraphQLObjectType, newTypeName: string): GraphQLObjectType;\nexport function renameType(type: GraphQLInterfaceType, newTypeName: string): GraphQLInterfaceType;\nexport function renameType(type: GraphQLUnionType, newTypeName: string): GraphQLUnionType;\nexport function renameType(type: GraphQLEnumType, newTypeName: string): GraphQLEnumType;\nexport function renameType(type: GraphQLScalarType, newTypeName: string): GraphQLScalarType;\nexport function renameType(type: GraphQLInputObjectType, newTypeName: string): GraphQLInputObjectType;\nexport function renameType(type: GraphQLNamedType, newTypeName: string): GraphQLNamedType;\nexport function renameType(type: any, newTypeName: string): GraphQLNamedType {\n  if (isObjectType(type)) {\n    return new GraphQLObjectType({\n      ...type.toConfig(),\n      name: newTypeName,\n      astNode:\n        type.astNode == null\n          ? type.astNode\n          : {\n              ...type.astNode,\n              name: {\n                ...type.astNode.name,\n                value: newTypeName,\n              },\n            },\n      extensionASTNodes:\n        type.extensionASTNodes == null\n          ? type.extensionASTNodes\n          : type.extensionASTNodes.map(node => ({\n              ...node,\n              name: {\n                ...node.name,\n                value: newTypeName,\n              },\n            })),\n    });\n  } else if (isInterfaceType(type)) {\n    return new GraphQLInterfaceType({\n      ...type.toConfig(),\n      name: newTypeName,\n      astNode:\n        type.astNode == null\n          ? type.astNode\n          : {\n              ...type.astNode,\n              name: {\n                ...type.astNode.name,\n                value: newTypeName,\n              },\n            },\n      extensionASTNodes:\n        type.extensionASTNodes == null\n          ? type.extensionASTNodes\n          : type.extensionASTNodes.map(node => ({\n              ...node,\n              name: {\n                ...node.name,\n                value: newTypeName,\n              },\n            })),\n    });\n  } else if (isUnionType(type)) {\n    return new GraphQLUnionType({\n      ...type.toConfig(),\n      name: newTypeName,\n      astNode:\n        type.astNode == null\n          ? type.astNode\n          : {\n              ...type.astNode,\n              name: {\n                ...type.astNode.name,\n                value: newTypeName,\n              },\n            },\n      extensionASTNodes:\n        type.extensionASTNodes == null\n          ? type.extensionASTNodes\n          : type.extensionASTNodes.map(node => ({\n              ...node,\n              name: {\n                ...node.name,\n                value: newTypeName,\n              },\n            })),\n    });\n  } else if (isInputObjectType(type)) {\n    return new GraphQLInputObjectType({\n      ...type.toConfig(),\n      name: newTypeName,\n      astNode:\n        type.astNode == null\n          ? type.astNode\n          : {\n              ...type.astNode,\n              name: {\n                ...type.astNode.name,\n                value: newTypeName,\n              },\n            },\n      extensionASTNodes:\n        type.extensionASTNodes == null\n          ? type.extensionASTNodes\n          : type.extensionASTNodes.map(node => ({\n              ...node,\n              name: {\n                ...node.name,\n                value: newTypeName,\n              },\n            })),\n    });\n  } else if (isEnumType(type)) {\n    return new GraphQLEnumType({\n      ...type.toConfig(),\n      name: newTypeName,\n      astNode:\n        type.astNode == null\n          ? type.astNode\n          : {\n              ...type.astNode,\n              name: {\n                ...type.astNode.name,\n                value: newTypeName,\n              },\n            },\n      extensionASTNodes:\n        type.extensionASTNodes == null\n          ? type.extensionASTNodes\n          : type.extensionASTNodes.map(node => ({\n              ...node,\n              name: {\n                ...node.name,\n                value: newTypeName,\n              },\n            })),\n    });\n  } else if (isScalarType(type)) {\n    return new GraphQLScalarType({\n      ...type.toConfig(),\n      name: newTypeName,\n      astNode:\n        type.astNode == null\n          ? type.astNode\n          : {\n              ...type.astNode,\n              name: {\n                ...type.astNode.name,\n                value: newTypeName,\n              },\n            },\n      extensionASTNodes:\n        type.extensionASTNodes == null\n          ? type.extensionASTNodes\n          : type.extensionASTNodes.map(node => ({\n              ...node,\n              name: {\n                ...node.name,\n                value: newTypeName,\n              },\n            })),\n    });\n  }\n\n  throw new Error(`Unknown type ${type as string}.`);\n}\n"],"version":3}