{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/observableToAsyncIterable.ts","mappings":"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","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/observableToAsyncIterable.ts"],"sourcesContent":["export interface Observer<T> {\n  next: (value: T) => void;\n  error: (error: Error) => void;\n  complete: () => void;\n}\n\nexport interface Observable<T> {\n  subscribe(\n    observer: Observer<T>\n  ): {\n    unsubscribe: () => void;\n  };\n}\n\nexport type Callback = (value?: any) => any;\n\nexport function observableToAsyncIterable<T>(observable: Observable<T>): AsyncIterableIterator<T> {\n  const pullQueue: Array<Callback> = [];\n  const pushQueue: Array<any> = [];\n\n  let listening = true;\n\n  const pushValue = (value: any) => {\n    if (pullQueue.length !== 0) {\n      pullQueue.shift()({ value, done: false });\n    } else {\n      pushQueue.push({ value, done: false });\n    }\n  };\n\n  const pushError = (error: any) => {\n    if (pullQueue.length !== 0) {\n      pullQueue.shift()({ value: { errors: [error] }, done: false });\n    } else {\n      pushQueue.push({ value: { errors: [error] }, done: false });\n    }\n  };\n\n  const pushDone = () => {\n    if (pullQueue.length !== 0) {\n      pullQueue.shift()({ done: true });\n    } else {\n      pushQueue.push({ done: true });\n    }\n  };\n\n  const pullValue = () =>\n    new Promise(resolve => {\n      if (pushQueue.length !== 0) {\n        const element = pushQueue.shift();\n        // either {value: {errors: [...]}} or {value: ...}\n        resolve(element);\n      } else {\n        pullQueue.push(resolve);\n      }\n    });\n\n  const subscription = observable.subscribe({\n    next(value: any) {\n      pushValue(value);\n    },\n    error(err: Error) {\n      pushError(err);\n    },\n    complete() {\n      pushDone();\n    },\n  });\n\n  const emptyQueue = () => {\n    if (listening) {\n      listening = false;\n      subscription.unsubscribe();\n      pullQueue.forEach(resolve => resolve({ value: undefined, done: true }));\n      pullQueue.length = 0;\n      pushQueue.length = 0;\n    }\n  };\n\n  return {\n    next() {\n      return listening ? pullValue() : this.return();\n    },\n    return() {\n      emptyQueue();\n      return Promise.resolve({ value: undefined, done: true });\n    },\n    throw(error) {\n      emptyQueue();\n      return Promise.reject(error);\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n"],"version":3}