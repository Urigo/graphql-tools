b32a9cad832f199fd6dc29928559bd2d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.observableToAsyncIterable = void 0;
function observableToAsyncIterable(observable) {
    const pullQueue = [];
    const pushQueue = [];
    let listening = true;
    const pushValue = (value) => {
        if (pullQueue.length !== 0) {
            pullQueue.shift()({ value, done: false });
        }
        else {
            pushQueue.push({ value, done: false });
        }
    };
    const pushError = (error) => {
        if (pullQueue.length !== 0) {
            pullQueue.shift()({ value: { errors: [error] }, done: false });
        }
        else {
            pushQueue.push({ value: { errors: [error] }, done: false });
        }
    };
    const pushDone = () => {
        if (pullQueue.length !== 0) {
            pullQueue.shift()({ done: true });
        }
        else {
            pushQueue.push({ done: true });
        }
    };
    const pullValue = () => new Promise(resolve => {
        if (pushQueue.length !== 0) {
            const element = pushQueue.shift();
            // either {value: {errors: [...]}} or {value: ...}
            resolve(element);
        }
        else {
            pullQueue.push(resolve);
        }
    });
    const subscription = observable.subscribe({
        next(value) {
            pushValue(value);
        },
        error(err) {
            pushError(err);
        },
        complete() {
            pushDone();
        },
    });
    const emptyQueue = () => {
        if (listening) {
            listening = false;
            subscription.unsubscribe();
            pullQueue.forEach(resolve => resolve({ value: undefined, done: true }));
            pullQueue.length = 0;
            pushQueue.length = 0;
        }
    };
    return {
        next() {
            return listening ? pullValue() : this.return();
        },
        return() {
            emptyQueue();
            return Promise.resolve({ value: undefined, done: true });
        },
        throw(error) {
            emptyQueue();
            return Promise.reject(error);
        },
        [Symbol.asyncIterator]() {
            return this;
        },
    };
}
exports.observableToAsyncIterable = observableToAsyncIterable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJkYXRfMDAwL0d1aWxkL2dyYXBocWwtdG9vbHMvcGFja2FnZXMvdXRpbHMvc3JjL29ic2VydmFibGVUb0FzeW5jSXRlcmFibGUudHMiLCJtYXBwaW5ncyI6Ijs7O0FBZ0JBLFNBQWdCLHlCQUF5QixDQUFJLFVBQXlCO0lBQ3BFLE1BQU0sU0FBUyxHQUFvQixFQUFFLENBQUM7SUFDdEMsTUFBTSxTQUFTLEdBQWUsRUFBRSxDQUFDO0lBRWpDLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQztJQUVyQixNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQVUsRUFBRSxFQUFFO1FBQy9CLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDMUIsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQzNDO2FBQU07WUFDTCxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsTUFBTSxTQUFTLEdBQUcsQ0FBQyxLQUFVLEVBQUUsRUFBRTtRQUMvQixJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzFCLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDaEU7YUFBTTtZQUNMLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQzdEO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsTUFBTSxRQUFRLEdBQUcsR0FBRyxFQUFFO1FBQ3BCLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDMUIsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7U0FDbkM7YUFBTTtZQUNMLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNoQztJQUNILENBQUMsQ0FBQztJQUVGLE1BQU0sU0FBUyxHQUFHLEdBQUcsRUFBRSxDQUNyQixJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNwQixJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzFCLE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNsQyxrREFBa0Q7WUFDbEQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2xCO2FBQU07WUFDTCxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFTCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxLQUFVO1lBQ2IsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25CLENBQUM7UUFDRCxLQUFLLENBQUMsR0FBVTtZQUNkLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixDQUFDO1FBQ0QsUUFBUTtZQUNOLFFBQVEsRUFBRSxDQUFDO1FBQ2IsQ0FBQztLQUNGLENBQUMsQ0FBQztJQUVILE1BQU0sVUFBVSxHQUFHLEdBQUcsRUFBRTtRQUN0QixJQUFJLFNBQVMsRUFBRTtZQUNiLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFDbEIsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzNCLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDeEUsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDckIsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7U0FDdEI7SUFDSCxDQUFDLENBQUM7SUFFRixPQUFPO1FBQ0wsSUFBSTtZQUNGLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2pELENBQUM7UUFDRCxNQUFNO1lBQ0osVUFBVSxFQUFFLENBQUM7WUFDYixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzNELENBQUM7UUFDRCxLQUFLLENBQUMsS0FBSztZQUNULFVBQVUsRUFBRSxDQUFDO1lBQ2IsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9CLENBQUM7UUFDRCxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7WUFDcEIsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUEvRUQsOERBK0VDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2FyZGF0XzAwMC9HdWlsZC9ncmFwaHFsLXRvb2xzL3BhY2thZ2VzL3V0aWxzL3NyYy9vYnNlcnZhYmxlVG9Bc3luY0l0ZXJhYmxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgT2JzZXJ2ZXI8VD4ge1xuICBuZXh0OiAodmFsdWU6IFQpID0+IHZvaWQ7XG4gIGVycm9yOiAoZXJyb3I6IEVycm9yKSA9PiB2b2lkO1xuICBjb21wbGV0ZTogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPYnNlcnZhYmxlPFQ+IHtcbiAgc3Vic2NyaWJlKFxuICAgIG9ic2VydmVyOiBPYnNlcnZlcjxUPlxuICApOiB7XG4gICAgdW5zdWJzY3JpYmU6ICgpID0+IHZvaWQ7XG4gIH07XG59XG5cbmV4cG9ydCB0eXBlIENhbGxiYWNrID0gKHZhbHVlPzogYW55KSA9PiBhbnk7XG5cbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZhYmxlVG9Bc3luY0l0ZXJhYmxlPFQ+KG9ic2VydmFibGU6IE9ic2VydmFibGU8VD4pOiBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VD4ge1xuICBjb25zdCBwdWxsUXVldWU6IEFycmF5PENhbGxiYWNrPiA9IFtdO1xuICBjb25zdCBwdXNoUXVldWU6IEFycmF5PGFueT4gPSBbXTtcblxuICBsZXQgbGlzdGVuaW5nID0gdHJ1ZTtcblxuICBjb25zdCBwdXNoVmFsdWUgPSAodmFsdWU6IGFueSkgPT4ge1xuICAgIGlmIChwdWxsUXVldWUubGVuZ3RoICE9PSAwKSB7XG4gICAgICBwdWxsUXVldWUuc2hpZnQoKSh7IHZhbHVlLCBkb25lOiBmYWxzZSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaFF1ZXVlLnB1c2goeyB2YWx1ZSwgZG9uZTogZmFsc2UgfSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHB1c2hFcnJvciA9IChlcnJvcjogYW55KSA9PiB7XG4gICAgaWYgKHB1bGxRdWV1ZS5sZW5ndGggIT09IDApIHtcbiAgICAgIHB1bGxRdWV1ZS5zaGlmdCgpKHsgdmFsdWU6IHsgZXJyb3JzOiBbZXJyb3JdIH0sIGRvbmU6IGZhbHNlIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoUXVldWUucHVzaCh7IHZhbHVlOiB7IGVycm9yczogW2Vycm9yXSB9LCBkb25lOiBmYWxzZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcHVzaERvbmUgPSAoKSA9PiB7XG4gICAgaWYgKHB1bGxRdWV1ZS5sZW5ndGggIT09IDApIHtcbiAgICAgIHB1bGxRdWV1ZS5zaGlmdCgpKHsgZG9uZTogdHJ1ZSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaFF1ZXVlLnB1c2goeyBkb25lOiB0cnVlIH0pO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBwdWxsVmFsdWUgPSAoKSA9PlxuICAgIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgaWYgKHB1c2hRdWV1ZS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHB1c2hRdWV1ZS5zaGlmdCgpO1xuICAgICAgICAvLyBlaXRoZXIge3ZhbHVlOiB7ZXJyb3JzOiBbLi4uXX19IG9yIHt2YWx1ZTogLi4ufVxuICAgICAgICByZXNvbHZlKGVsZW1lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVsbFF1ZXVlLnB1c2gocmVzb2x2ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgY29uc3Qgc3Vic2NyaXB0aW9uID0gb2JzZXJ2YWJsZS5zdWJzY3JpYmUoe1xuICAgIG5leHQodmFsdWU6IGFueSkge1xuICAgICAgcHVzaFZhbHVlKHZhbHVlKTtcbiAgICB9LFxuICAgIGVycm9yKGVycjogRXJyb3IpIHtcbiAgICAgIHB1c2hFcnJvcihlcnIpO1xuICAgIH0sXG4gICAgY29tcGxldGUoKSB7XG4gICAgICBwdXNoRG9uZSgpO1xuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IGVtcHR5UXVldWUgPSAoKSA9PiB7XG4gICAgaWYgKGxpc3RlbmluZykge1xuICAgICAgbGlzdGVuaW5nID0gZmFsc2U7XG4gICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIHB1bGxRdWV1ZS5mb3JFYWNoKHJlc29sdmUgPT4gcmVzb2x2ZSh7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfSkpO1xuICAgICAgcHVsbFF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgICBwdXNoUXVldWUubGVuZ3RoID0gMDtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBuZXh0KCkge1xuICAgICAgcmV0dXJuIGxpc3RlbmluZyA/IHB1bGxWYWx1ZSgpIDogdGhpcy5yZXR1cm4oKTtcbiAgICB9LFxuICAgIHJldHVybigpIHtcbiAgICAgIGVtcHR5UXVldWUoKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH0pO1xuICAgIH0sXG4gICAgdGhyb3coZXJyb3IpIHtcbiAgICAgIGVtcHR5UXVldWUoKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfSxcbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgfTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==