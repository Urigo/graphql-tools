{"file":"/home/ardat_000/Guild/graphql-tools/packages/mock/src/mockServer.ts","mappings":";;;AACA,qCAA2D;AAC3D,kDAAuE;AACvE,yDAAsD;AAGtD;;;;;;;;;;;GAWG;AACH,SAAgB,UAAU,CACxB,MAAwC,EACxC,KAAa,EACb,iBAAiB,GAAG,KAAK;IAEzB,IAAI,QAAuB,CAAC;IAC5B,IAAI,CAAC,kBAAQ,CAAC,MAAM,CAAC,EAAE;QACrB,yDAAyD;QACzD,QAAQ,GAAG,uCAA8B,CAAC,MAAM,CAAC,CAAC;KACnD;SAAM;QACL,QAAQ,GAAG,MAAM,CAAC;KACnB;IAED,QAAQ,GAAG,mCAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC,CAAC;IAE5E,OAAO,EAAE,KAAK,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,iBAAO,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC;AAC5E,CAAC;AAhBD,gCAgBC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/mock/src/mockServer.ts"],"sourcesContent":["import { ITypeDefinitions } from '@graphql-tools/utils';\nimport { GraphQLSchema, isSchema, graphql } from 'graphql';\nimport { buildSchemaFromTypeDefinitions } from '@graphql-tools/schema';\nimport { addMocksToSchema } from './addMocksToSchema';\nimport { IMockServer, IMocks } from './types';\n\n/**\n * A convenience wrapper on top of addMocksToSchema. It adds your mock resolvers\n * to your schema and returns a client that will correctly execute your query with\n * variables. Note: when executing queries from the returned server, context and\n * root will both equal `{}`.\n * @param schema The schema to which to add mocks. This can also be a set of type\n * definitions instead.\n * @param mocks The mocks to add to the schema.\n * @param preserveResolvers Set to `true` to prevent existing resolvers from being\n * overwritten to provide mock data. This can be used to mock some parts of the\n * server and not others.\n */\nexport function mockServer(\n  schema: GraphQLSchema | ITypeDefinitions,\n  mocks: IMocks,\n  preserveResolvers = false\n): IMockServer {\n  let mySchema: GraphQLSchema;\n  if (!isSchema(schema)) {\n    // TODO: provide useful error messages here if this fails\n    mySchema = buildSchemaFromTypeDefinitions(schema);\n  } else {\n    mySchema = schema;\n  }\n\n  mySchema = addMocksToSchema({ schema: mySchema, mocks, preserveResolvers });\n\n  return { query: (query, vars) => graphql(mySchema, query, {}, {}, vars) };\n}\n"],"version":3}