d3cec1045615b3b77e2d5385ec73bd0d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockServer = void 0;
const graphql_1 = require("graphql");
const schema_1 = require("@graphql-tools/schema");
const addMocksToSchema_1 = require("./addMocksToSchema");
/**
 * A convenience wrapper on top of addMocksToSchema. It adds your mock resolvers
 * to your schema and returns a client that will correctly execute your query with
 * variables. Note: when executing queries from the returned server, context and
 * root will both equal `{}`.
 * @param schema The schema to which to add mocks. This can also be a set of type
 * definitions instead.
 * @param mocks The mocks to add to the schema.
 * @param preserveResolvers Set to `true` to prevent existing resolvers from being
 * overwritten to provide mock data. This can be used to mock some parts of the
 * server and not others.
 */
function mockServer(schema, mocks, preserveResolvers = false) {
    let mySchema;
    if (!graphql_1.isSchema(schema)) {
        // TODO: provide useful error messages here if this fails
        mySchema = schema_1.buildSchemaFromTypeDefinitions(schema);
    }
    else {
        mySchema = schema;
    }
    mySchema = addMocksToSchema_1.addMocksToSchema({ schema: mySchema, mocks, preserveResolvers });
    return { query: (query, vars) => graphql_1.graphql(mySchema, query, {}, {}, vars) };
}
exports.mockServer = mockServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJkYXRfMDAwL0d1aWxkL2dyYXBocWwtdG9vbHMvcGFja2FnZXMvbW9jay9zcmMvbW9ja1NlcnZlci50cyIsIm1hcHBpbmdzIjoiOzs7QUFDQSxxQ0FBMkQ7QUFDM0Qsa0RBQXVFO0FBQ3ZFLHlEQUFzRDtBQUd0RDs7Ozs7Ozs7Ozs7R0FXRztBQUNILFNBQWdCLFVBQVUsQ0FDeEIsTUFBd0MsRUFDeEMsS0FBYSxFQUNiLGlCQUFpQixHQUFHLEtBQUs7SUFFekIsSUFBSSxRQUF1QixDQUFDO0lBQzVCLElBQUksQ0FBQyxrQkFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3JCLHlEQUF5RDtRQUN6RCxRQUFRLEdBQUcsdUNBQThCLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDbkQ7U0FBTTtRQUNMLFFBQVEsR0FBRyxNQUFNLENBQUM7S0FDbkI7SUFFRCxRQUFRLEdBQUcsbUNBQWdCLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7SUFFNUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLGlCQUFPLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDNUUsQ0FBQztBQWhCRCxnQ0FnQkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvYXJkYXRfMDAwL0d1aWxkL2dyYXBocWwtdG9vbHMvcGFja2FnZXMvbW9jay9zcmMvbW9ja1NlcnZlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVHlwZURlZmluaXRpb25zIH0gZnJvbSAnQGdyYXBocWwtdG9vbHMvdXRpbHMnO1xuaW1wb3J0IHsgR3JhcGhRTFNjaGVtYSwgaXNTY2hlbWEsIGdyYXBocWwgfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7IGJ1aWxkU2NoZW1hRnJvbVR5cGVEZWZpbml0aW9ucyB9IGZyb20gJ0BncmFwaHFsLXRvb2xzL3NjaGVtYSc7XG5pbXBvcnQgeyBhZGRNb2Nrc1RvU2NoZW1hIH0gZnJvbSAnLi9hZGRNb2Nrc1RvU2NoZW1hJztcbmltcG9ydCB7IElNb2NrU2VydmVyLCBJTW9ja3MgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBBIGNvbnZlbmllbmNlIHdyYXBwZXIgb24gdG9wIG9mIGFkZE1vY2tzVG9TY2hlbWEuIEl0IGFkZHMgeW91ciBtb2NrIHJlc29sdmVyc1xuICogdG8geW91ciBzY2hlbWEgYW5kIHJldHVybnMgYSBjbGllbnQgdGhhdCB3aWxsIGNvcnJlY3RseSBleGVjdXRlIHlvdXIgcXVlcnkgd2l0aFxuICogdmFyaWFibGVzLiBOb3RlOiB3aGVuIGV4ZWN1dGluZyBxdWVyaWVzIGZyb20gdGhlIHJldHVybmVkIHNlcnZlciwgY29udGV4dCBhbmRcbiAqIHJvb3Qgd2lsbCBib3RoIGVxdWFsIGB7fWAuXG4gKiBAcGFyYW0gc2NoZW1hIFRoZSBzY2hlbWEgdG8gd2hpY2ggdG8gYWRkIG1vY2tzLiBUaGlzIGNhbiBhbHNvIGJlIGEgc2V0IG9mIHR5cGVcbiAqIGRlZmluaXRpb25zIGluc3RlYWQuXG4gKiBAcGFyYW0gbW9ja3MgVGhlIG1vY2tzIHRvIGFkZCB0byB0aGUgc2NoZW1hLlxuICogQHBhcmFtIHByZXNlcnZlUmVzb2x2ZXJzIFNldCB0byBgdHJ1ZWAgdG8gcHJldmVudCBleGlzdGluZyByZXNvbHZlcnMgZnJvbSBiZWluZ1xuICogb3ZlcndyaXR0ZW4gdG8gcHJvdmlkZSBtb2NrIGRhdGEuIFRoaXMgY2FuIGJlIHVzZWQgdG8gbW9jayBzb21lIHBhcnRzIG9mIHRoZVxuICogc2VydmVyIGFuZCBub3Qgb3RoZXJzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbW9ja1NlcnZlcihcbiAgc2NoZW1hOiBHcmFwaFFMU2NoZW1hIHwgSVR5cGVEZWZpbml0aW9ucyxcbiAgbW9ja3M6IElNb2NrcyxcbiAgcHJlc2VydmVSZXNvbHZlcnMgPSBmYWxzZVxuKTogSU1vY2tTZXJ2ZXIge1xuICBsZXQgbXlTY2hlbWE6IEdyYXBoUUxTY2hlbWE7XG4gIGlmICghaXNTY2hlbWEoc2NoZW1hKSkge1xuICAgIC8vIFRPRE86IHByb3ZpZGUgdXNlZnVsIGVycm9yIG1lc3NhZ2VzIGhlcmUgaWYgdGhpcyBmYWlsc1xuICAgIG15U2NoZW1hID0gYnVpbGRTY2hlbWFGcm9tVHlwZURlZmluaXRpb25zKHNjaGVtYSk7XG4gIH0gZWxzZSB7XG4gICAgbXlTY2hlbWEgPSBzY2hlbWE7XG4gIH1cblxuICBteVNjaGVtYSA9IGFkZE1vY2tzVG9TY2hlbWEoeyBzY2hlbWE6IG15U2NoZW1hLCBtb2NrcywgcHJlc2VydmVSZXNvbHZlcnMgfSk7XG5cbiAgcmV0dXJuIHsgcXVlcnk6IChxdWVyeSwgdmFycykgPT4gZ3JhcGhxbChteVNjaGVtYSwgcXVlcnksIHt9LCB7fSwgdmFycykgfTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==