{"file":"/home/ardat_000/Guild/graphql-tools/packages/schema/src/checkForResolveTypeResolver.ts","mappings":";;;AAEA,gDAAgF;AAEhF,uFAAuF;AACvF,SAAgB,2BAA2B,CAAC,MAAqB,EAAE,8BAAiD;IAClH,iBAAS,CAAC,MAAM,EAAE;QAChB,CAAC,kBAAU,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACrB,MAAM,OAAO,GACX,SAAS,IAAI,CAAC,IAAI,8DAA8D;oBAChF,mFAAmF,CAAC;gBACtF,IAAI,8BAA8B,KAAK,OAAO,EAAE;oBAC9C,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;iBAC1B;gBAED,IAAI,8BAA8B,KAAK,MAAM,EAAE;oBAC7C,sCAAsC;oBACtC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACvB;aACF;YACD,OAAO,SAAS,CAAC;QACnB,CAAC;KACF,CAAC,CAAC;AACL,CAAC;AAnBD,kEAmBC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/schema/src/checkForResolveTypeResolver.ts"],"sourcesContent":["import { GraphQLSchema } from 'graphql';\n\nimport { MapperKind, mapSchema, ValidatorBehavior } from '@graphql-tools/utils';\n\n// If we have any union or interface types throw if no there is no resolveType resolver\nexport function checkForResolveTypeResolver(schema: GraphQLSchema, requireResolversForResolveType: ValidatorBehavior) {\n  mapSchema(schema, {\n    [MapperKind.ABSTRACT_TYPE]: type => {\n      if (!type.resolveType) {\n        const message =\n          `Type \"${type.name}\" is missing a \"__resolveType\" resolver. Pass 'ignore' into ` +\n          '\"resolverValidationOptions.requireResolversForResolveType\" to disable this error.';\n        if (requireResolversForResolveType === 'error') {\n          throw new Error(message);\n        }\n\n        if (requireResolversForResolveType === 'warn') {\n          // eslint-disable-next-line no-console\n          console.warn(message);\n        }\n      }\n      return undefined;\n    },\n  });\n}\n"],"version":3}