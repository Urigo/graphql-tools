664f0346682f0a312ce34bf4144cfc30
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compareNodes = exports.nodeToString = exports.compareStrings = exports.isValidPath = exports.isDocumentString = exports.isNotEqual = exports.isEqual = exports.asArray = void 0;
const graphql_1 = require("graphql");
const asArray = (fns) => (Array.isArray(fns) ? fns : fns ? [fns] : []);
exports.asArray = asArray;
function isEqual(a, b) {
    if (Array.isArray(a) && Array.isArray(b)) {
        if (a.length !== b.length) {
            return false;
        }
        for (let index = 0; index < a.length; index++) {
            if (a[index] !== b[index]) {
                return false;
            }
        }
        return true;
    }
    return a === b || (!a && !b);
}
exports.isEqual = isEqual;
function isNotEqual(a, b) {
    return !isEqual(a, b);
}
exports.isNotEqual = isNotEqual;
function isDocumentString(str) {
    // XXX: is-valid-path or is-glob treat SDL as a valid path
    // (`scalar Date` for example)
    // this why checking the extension is fast enough
    // and prevent from parsing the string in order to find out
    // if the string is a SDL
    if (/\.[a-z0-9]+$/i.test(str)) {
        return false;
    }
    try {
        graphql_1.parse(str);
        return true;
    }
    catch (e) { }
    return false;
}
exports.isDocumentString = isDocumentString;
const invalidPathRegex = /[‘“!%&^<=>`]/;
function isValidPath(str) {
    return typeof str === 'string' && !invalidPathRegex.test(str);
}
exports.isValidPath = isValidPath;
function compareStrings(a, b) {
    if (a.toString() < b.toString()) {
        return -1;
    }
    if (a.toString() > b.toString()) {
        return 1;
    }
    return 0;
}
exports.compareStrings = compareStrings;
function nodeToString(a) {
    if ('alias' in a) {
        return a.alias.value;
    }
    if ('name' in a) {
        return a.name.value;
    }
    return a.kind;
}
exports.nodeToString = nodeToString;
function compareNodes(a, b, customFn) {
    const aStr = nodeToString(a);
    const bStr = nodeToString(b);
    if (typeof customFn === 'function') {
        return customFn(aStr, bStr);
    }
    return compareStrings(aStr, bStr);
}
exports.compareNodes = compareNodes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJkYXRfMDAwL0d1aWxkL2dyYXBocWwtdG9vbHMvcGFja2FnZXMvdXRpbHMvc3JjL2hlbHBlcnMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQXlDO0FBRWxDLE1BQU0sT0FBTyxHQUFHLENBQUksR0FBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUE3RSxRQUFBLE9BQU8sV0FBc0U7QUFFMUYsU0FBZ0IsT0FBTyxDQUFJLENBQUksRUFBRSxDQUFJO0lBQ25DLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3hDLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ3pCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUM3QyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3pCLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7U0FDRjtRQUVELE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFoQkQsMEJBZ0JDO0FBRUQsU0FBZ0IsVUFBVSxDQUFJLENBQUksRUFBRSxDQUFJO0lBQ3RDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLENBQUM7QUFGRCxnQ0FFQztBQUVELFNBQWdCLGdCQUFnQixDQUFDLEdBQVc7SUFDMUMsMERBQTBEO0lBQzFELDhCQUE4QjtJQUM5QixpREFBaUQ7SUFDakQsMkRBQTJEO0lBQzNELHlCQUF5QjtJQUN6QixJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDN0IsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELElBQUk7UUFDRixlQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxPQUFPLElBQUksQ0FBQztLQUNiO0lBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRTtJQUVkLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQWhCRCw0Q0FnQkM7QUFFRCxNQUFNLGdCQUFnQixHQUFHLGNBQWMsQ0FBQztBQUN4QyxTQUFnQixXQUFXLENBQUMsR0FBVztJQUNyQyxPQUFPLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoRSxDQUFDO0FBRkQsa0NBRUM7QUFFRCxTQUFnQixjQUFjLENBQU8sQ0FBSSxFQUFFLENBQUk7SUFDN0MsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1FBQy9CLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDWDtJQUVELElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtRQUMvQixPQUFPLENBQUMsQ0FBQztLQUNWO0lBRUQsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBVkQsd0NBVUM7QUFFRCxTQUFnQixZQUFZLENBQUMsQ0FBVTtJQUNyQyxJQUFJLE9BQU8sSUFBSSxDQUFDLEVBQUU7UUFDaEIsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztLQUN0QjtJQUVELElBQUksTUFBTSxJQUFJLENBQUMsRUFBRTtRQUNmLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDckI7SUFFRCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQVZELG9DQVVDO0FBRUQsU0FBZ0IsWUFBWSxDQUFDLENBQVUsRUFBRSxDQUFVLEVBQUUsUUFBcUM7SUFDeEYsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdCLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU3QixJQUFJLE9BQU8sUUFBUSxLQUFLLFVBQVUsRUFBRTtRQUNsQyxPQUFPLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDN0I7SUFFRCxPQUFPLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQVRELG9DQVNDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2FyZGF0XzAwMC9HdWlsZC9ncmFwaHFsLXRvb2xzL3BhY2thZ2VzL3V0aWxzL3NyYy9oZWxwZXJzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlLCBBU1ROb2RlIH0gZnJvbSAnZ3JhcGhxbCc7XG5cbmV4cG9ydCBjb25zdCBhc0FycmF5ID0gPFQ+KGZuczogVCB8IFRbXSkgPT4gKEFycmF5LmlzQXJyYXkoZm5zKSA/IGZucyA6IGZucyA/IFtmbnNdIDogW10pO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNFcXVhbDxUPihhOiBULCBiOiBUKTogYm9vbGVhbiB7XG4gIGlmIChBcnJheS5pc0FycmF5KGEpICYmIEFycmF5LmlzQXJyYXkoYikpIHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGEubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoYVtpbmRleF0gIT09IGJbaW5kZXhdKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBhID09PSBiIHx8ICghYSAmJiAhYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vdEVxdWFsPFQ+KGE6IFQsIGI6IFQpOiBib29sZWFuIHtcbiAgcmV0dXJuICFpc0VxdWFsKGEsIGIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEb2N1bWVudFN0cmluZyhzdHI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAvLyBYWFg6IGlzLXZhbGlkLXBhdGggb3IgaXMtZ2xvYiB0cmVhdCBTREwgYXMgYSB2YWxpZCBwYXRoXG4gIC8vIChgc2NhbGFyIERhdGVgIGZvciBleGFtcGxlKVxuICAvLyB0aGlzIHdoeSBjaGVja2luZyB0aGUgZXh0ZW5zaW9uIGlzIGZhc3QgZW5vdWdoXG4gIC8vIGFuZCBwcmV2ZW50IGZyb20gcGFyc2luZyB0aGUgc3RyaW5nIGluIG9yZGVyIHRvIGZpbmQgb3V0XG4gIC8vIGlmIHRoZSBzdHJpbmcgaXMgYSBTRExcbiAgaWYgKC9cXC5bYS16MC05XSskL2kudGVzdChzdHIpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBwYXJzZShzdHIpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuY29uc3QgaW52YWxpZFBhdGhSZWdleCA9IC9b4oCY4oCcISUmXjw9PmBdLztcbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkUGF0aChzdHI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgJiYgIWludmFsaWRQYXRoUmVnZXgudGVzdChzdHIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVN0cmluZ3M8QSwgQj4oYTogQSwgYjogQikge1xuICBpZiAoYS50b1N0cmluZygpIDwgYi50b1N0cmluZygpKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgaWYgKGEudG9TdHJpbmcoKSA+IGIudG9TdHJpbmcoKSkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub2RlVG9TdHJpbmcoYTogQVNUTm9kZSkge1xuICBpZiAoJ2FsaWFzJyBpbiBhKSB7XG4gICAgcmV0dXJuIGEuYWxpYXMudmFsdWU7XG4gIH1cblxuICBpZiAoJ25hbWUnIGluIGEpIHtcbiAgICByZXR1cm4gYS5uYW1lLnZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGEua2luZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVOb2RlcyhhOiBBU1ROb2RlLCBiOiBBU1ROb2RlLCBjdXN0b21Gbj86IChhOiBhbnksIGI6IGFueSkgPT4gbnVtYmVyKSB7XG4gIGNvbnN0IGFTdHIgPSBub2RlVG9TdHJpbmcoYSk7XG4gIGNvbnN0IGJTdHIgPSBub2RlVG9TdHJpbmcoYik7XG5cbiAgaWYgKHR5cGVvZiBjdXN0b21GbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBjdXN0b21GbihhU3RyLCBiU3RyKTtcbiAgfVxuXG4gIHJldHVybiBjb21wYXJlU3RyaW5ncyhhU3RyLCBiU3RyKTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==