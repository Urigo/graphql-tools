{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/mapSchema.ts","mappings":"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","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/mapSchema.ts"],"sourcesContent":["import {\n  GraphQLDirective,\n  GraphQLObjectType,\n  GraphQLNamedType,\n  GraphQLSchema,\n  GraphQLType,\n  isInterfaceType,\n  isEnumType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n  isInputObjectType,\n  GraphQLFieldConfig,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLInputFieldConfig,\n  GraphQLObjectTypeConfig,\n  GraphQLInterfaceTypeConfig,\n  GraphQLInputObjectTypeConfig,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isNamedType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLEnumType,\n  InputValueDefinitionNode,\n  FieldDefinitionNode,\n  Kind,\n  EnumValueDefinitionNode,\n} from 'graphql';\n\nimport {\n  SchemaMapper,\n  MapperKind,\n  TypeMap,\n  NamedTypeMapper,\n  DirectiveMapper,\n  GenericFieldMapper,\n  IDefaultValueIteratorFn,\n  ArgumentMapper,\n  EnumValueMapper,\n} from './Interfaces';\n\nimport { rewireTypes } from './rewire';\nimport { serializeInputValue, parseInputValue } from './transformInputValue';\n\nexport function mapSchema(schema: GraphQLSchema, schemaMapper: SchemaMapper = {}): GraphQLSchema {\n  const originalTypeMap = schema.getTypeMap();\n\n  let newTypeMap = mapDefaultValues(originalTypeMap, schema, serializeInputValue);\n  newTypeMap = mapTypes(newTypeMap, schema, schemaMapper, type => isLeafType(type));\n  newTypeMap = mapEnumValues(newTypeMap, schema, schemaMapper);\n  newTypeMap = mapDefaultValues(newTypeMap, schema, parseInputValue);\n\n  newTypeMap = mapTypes(newTypeMap, schema, schemaMapper, type => !isLeafType(type));\n  newTypeMap = mapFields(newTypeMap, schema, schemaMapper);\n  newTypeMap = mapArguments(newTypeMap, schema, schemaMapper);\n\n  const originalDirectives = schema.getDirectives();\n  const newDirectives = mapDirectives(originalDirectives, schema, schemaMapper);\n\n  const queryType = schema.getQueryType();\n  const mutationType = schema.getMutationType();\n  const subscriptionType = schema.getSubscriptionType();\n\n  const newQueryTypeName =\n    queryType != null ? (newTypeMap[queryType.name] != null ? newTypeMap[queryType.name].name : undefined) : undefined;\n  const newMutationTypeName =\n    mutationType != null\n      ? newTypeMap[mutationType.name] != null\n        ? newTypeMap[mutationType.name].name\n        : undefined\n      : undefined;\n  const newSubscriptionTypeName =\n    subscriptionType != null\n      ? newTypeMap[subscriptionType.name] != null\n        ? newTypeMap[subscriptionType.name].name\n        : undefined\n      : undefined;\n\n  const { typeMap, directives } = rewireTypes(newTypeMap, newDirectives);\n\n  return new GraphQLSchema({\n    ...schema.toConfig(),\n    query: newQueryTypeName ? (typeMap[newQueryTypeName] as GraphQLObjectType) : undefined,\n    mutation: newMutationTypeName ? (typeMap[newMutationTypeName] as GraphQLObjectType) : undefined,\n    subscription: newSubscriptionTypeName != null ? (typeMap[newSubscriptionTypeName] as GraphQLObjectType) : undefined,\n    types: Object.keys(typeMap).map(typeName => typeMap[typeName]),\n    directives,\n  });\n}\n\nfunction mapTypes(\n  originalTypeMap: TypeMap,\n  schema: GraphQLSchema,\n  schemaMapper: SchemaMapper,\n  testFn: (originalType: GraphQLNamedType) => boolean = () => true\n): TypeMap {\n  const newTypeMap = {};\n\n  Object.keys(originalTypeMap).forEach(typeName => {\n    if (!typeName.startsWith('__')) {\n      const originalType = originalTypeMap[typeName];\n\n      if (originalType == null || !testFn(originalType)) {\n        newTypeMap[typeName] = originalType;\n        return;\n      }\n\n      const typeMapper = getTypeMapper(schema, schemaMapper, typeName);\n\n      if (typeMapper == null) {\n        newTypeMap[typeName] = originalType;\n        return;\n      }\n\n      const maybeNewType = typeMapper(originalType, schema);\n\n      if (maybeNewType === undefined) {\n        newTypeMap[typeName] = originalType;\n        return;\n      }\n\n      newTypeMap[typeName] = maybeNewType;\n    }\n  });\n\n  return newTypeMap;\n}\n\nfunction mapEnumValues(originalTypeMap: TypeMap, schema: GraphQLSchema, schemaMapper: SchemaMapper): TypeMap {\n  const enumValueMapper = getEnumValueMapper(schemaMapper);\n  if (!enumValueMapper) {\n    return originalTypeMap;\n  }\n\n  return mapTypes(\n    originalTypeMap,\n    schema,\n    {\n      [MapperKind.ENUM_TYPE]: type => {\n        const config = type.toConfig();\n        const originalEnumValueConfigMap = config.values;\n        const newEnumValueConfigMap = {};\n        Object.keys(originalEnumValueConfigMap).forEach(externalValue => {\n          const originalEnumValueConfig = originalEnumValueConfigMap[externalValue];\n          const mappedEnumValue = enumValueMapper(originalEnumValueConfig, type.name, schema, externalValue);\n          if (mappedEnumValue === undefined) {\n            newEnumValueConfigMap[externalValue] = originalEnumValueConfig;\n          } else if (Array.isArray(mappedEnumValue)) {\n            const [newExternalValue, newEnumValueConfig] = mappedEnumValue;\n            newEnumValueConfigMap[newExternalValue] =\n              newEnumValueConfig === undefined ? originalEnumValueConfig : newEnumValueConfig;\n          } else if (mappedEnumValue !== null) {\n            newEnumValueConfigMap[externalValue] = mappedEnumValue;\n          }\n        });\n        return correctASTNodes(\n          new GraphQLEnumType({\n            ...config,\n            values: newEnumValueConfigMap,\n          })\n        );\n      },\n    },\n    type => isEnumType(type)\n  );\n}\n\nfunction mapDefaultValues(originalTypeMap: TypeMap, schema: GraphQLSchema, fn: IDefaultValueIteratorFn): TypeMap {\n  const newTypeMap = mapArguments(originalTypeMap, schema, {\n    [MapperKind.ARGUMENT]: argumentConfig => {\n      if (argumentConfig.defaultValue === undefined) {\n        return argumentConfig;\n      }\n\n      const maybeNewType = getNewType(originalTypeMap, argumentConfig.type);\n      if (maybeNewType != null) {\n        return {\n          ...argumentConfig,\n          defaultValue: fn(maybeNewType, argumentConfig.defaultValue),\n        };\n      }\n    },\n  });\n\n  return mapFields(newTypeMap, schema, {\n    [MapperKind.INPUT_OBJECT_FIELD]: inputFieldConfig => {\n      if (inputFieldConfig.defaultValue === undefined) {\n        return inputFieldConfig;\n      }\n\n      const maybeNewType = getNewType(newTypeMap, inputFieldConfig.type);\n      if (maybeNewType != null) {\n        return {\n          ...inputFieldConfig,\n          defaultValue: fn(maybeNewType, inputFieldConfig.defaultValue),\n        };\n      }\n    },\n  });\n}\n\nfunction getNewType<T extends GraphQLType>(newTypeMap: TypeMap, type: T): T | null {\n  if (isListType(type)) {\n    const newType = getNewType(newTypeMap, type.ofType);\n    return newType != null ? (new GraphQLList(newType) as T) : null;\n  } else if (isNonNullType(type)) {\n    const newType = getNewType(newTypeMap, type.ofType);\n    return newType != null ? (new GraphQLNonNull(newType) as T) : null;\n  } else if (isNamedType(type)) {\n    const newType = newTypeMap[type.name];\n    return newType != null ? (newType as T) : null;\n  }\n\n  return null;\n}\n\nfunction mapFields(originalTypeMap: TypeMap, schema: GraphQLSchema, schemaMapper: SchemaMapper): TypeMap {\n  const newTypeMap = {};\n\n  Object.keys(originalTypeMap).forEach(typeName => {\n    if (!typeName.startsWith('__')) {\n      const originalType = originalTypeMap[typeName];\n\n      if (!isObjectType(originalType) && !isInterfaceType(originalType) && !isInputObjectType(originalType)) {\n        newTypeMap[typeName] = originalType;\n        return;\n      }\n\n      const fieldMapper = getFieldMapper(schema, schemaMapper, typeName);\n      if (fieldMapper == null) {\n        newTypeMap[typeName] = originalType;\n        return;\n      }\n\n      const config = originalType.toConfig();\n\n      const originalFieldConfigMap = config.fields;\n      const newFieldConfigMap = {};\n      Object.keys(originalFieldConfigMap).forEach(fieldName => {\n        const originalFieldConfig = originalFieldConfigMap[fieldName];\n        const mappedField = fieldMapper(originalFieldConfig, fieldName, typeName, schema);\n        if (mappedField === undefined) {\n          newFieldConfigMap[fieldName] = originalFieldConfig;\n        } else if (Array.isArray(mappedField)) {\n          const [newFieldName, newFieldConfig] = mappedField;\n          if (newFieldConfig.astNode != null) {\n            newFieldConfig.astNode = {\n              ...newFieldConfig.astNode,\n              name: {\n                ...newFieldConfig.astNode.name,\n                value: newFieldName,\n              },\n            };\n          }\n          newFieldConfigMap[newFieldName] = newFieldConfig === undefined ? originalFieldConfig : newFieldConfig;\n        } else if (mappedField !== null) {\n          newFieldConfigMap[fieldName] = mappedField;\n        }\n      });\n\n      if (isObjectType(originalType)) {\n        newTypeMap[typeName] = correctASTNodes(\n          new GraphQLObjectType({\n            ...(config as GraphQLObjectTypeConfig<any, any>),\n            fields: newFieldConfigMap,\n          })\n        );\n      } else if (isInterfaceType(originalType)) {\n        newTypeMap[typeName] = correctASTNodes(\n          new GraphQLInterfaceType({\n            ...(config as GraphQLInterfaceTypeConfig<any, any>),\n            fields: newFieldConfigMap,\n          })\n        );\n      } else {\n        newTypeMap[typeName] = correctASTNodes(\n          new GraphQLInputObjectType({\n            ...(config as GraphQLInputObjectTypeConfig),\n            fields: newFieldConfigMap,\n          })\n        );\n      }\n    }\n  });\n\n  return newTypeMap;\n}\n\nfunction mapArguments(originalTypeMap: TypeMap, schema: GraphQLSchema, schemaMapper: SchemaMapper): TypeMap {\n  const newTypeMap = {};\n\n  Object.keys(originalTypeMap).forEach(typeName => {\n    if (!typeName.startsWith('__')) {\n      const originalType = originalTypeMap[typeName];\n\n      if (!isObjectType(originalType) && !isInterfaceType(originalType)) {\n        newTypeMap[typeName] = originalType;\n        return;\n      }\n\n      const argumentMapper = getArgumentMapper(schemaMapper);\n      if (argumentMapper == null) {\n        newTypeMap[typeName] = originalType;\n        return;\n      }\n\n      const config = originalType.toConfig();\n\n      const originalFieldConfigMap = config.fields;\n      const newFieldConfigMap = {};\n      Object.keys(originalFieldConfigMap).forEach(fieldName => {\n        const originalFieldConfig = originalFieldConfigMap[fieldName];\n        const originalArgumentConfigMap = originalFieldConfig.args;\n\n        if (originalArgumentConfigMap == null) {\n          newFieldConfigMap[fieldName] = originalFieldConfig;\n          return;\n        }\n\n        const argumentNames = Object.keys(originalArgumentConfigMap);\n\n        if (!argumentNames.length) {\n          newFieldConfigMap[fieldName] = originalFieldConfig;\n          return;\n        }\n\n        const newArgumentConfigMap = {};\n\n        argumentNames.forEach(argumentName => {\n          const originalArgumentConfig = originalArgumentConfigMap[argumentName];\n\n          const mappedArgument = argumentMapper(originalArgumentConfig, fieldName, typeName, schema);\n\n          if (mappedArgument === undefined) {\n            newArgumentConfigMap[argumentName] = originalArgumentConfig;\n          } else if (Array.isArray(mappedArgument)) {\n            const [newArgumentName, newArgumentConfig] = mappedArgument;\n            newArgumentConfigMap[newArgumentName] = newArgumentConfig;\n          } else if (mappedArgument !== null) {\n            newArgumentConfigMap[argumentName] = mappedArgument;\n          }\n        });\n        newFieldConfigMap[fieldName] = {\n          ...originalFieldConfig,\n          args: newArgumentConfigMap,\n        };\n      });\n\n      if (isObjectType(originalType)) {\n        newTypeMap[typeName] = new GraphQLObjectType({\n          ...((config as unknown) as GraphQLObjectTypeConfig<any, any>),\n          fields: newFieldConfigMap,\n        });\n      } else if (isInterfaceType(originalType)) {\n        newTypeMap[typeName] = new GraphQLInterfaceType({\n          ...((config as unknown) as GraphQLInterfaceTypeConfig<any, any>),\n          fields: newFieldConfigMap,\n        });\n      } else {\n        newTypeMap[typeName] = new GraphQLInputObjectType({\n          ...((config as unknown) as GraphQLInputObjectTypeConfig),\n          fields: newFieldConfigMap,\n        });\n      }\n    }\n  });\n\n  return newTypeMap;\n}\n\nfunction mapDirectives(\n  originalDirectives: ReadonlyArray<GraphQLDirective>,\n  schema: GraphQLSchema,\n  schemaMapper: SchemaMapper\n): Array<GraphQLDirective> {\n  const directiveMapper = getDirectiveMapper(schemaMapper);\n  if (directiveMapper == null) {\n    return originalDirectives.slice();\n  }\n\n  const newDirectives: Array<GraphQLDirective> = [];\n\n  originalDirectives.forEach(directive => {\n    const mappedDirective = directiveMapper(directive, schema);\n    if (mappedDirective === undefined) {\n      newDirectives.push(directive);\n    } else if (mappedDirective !== null) {\n      newDirectives.push(mappedDirective);\n    }\n  });\n\n  return newDirectives;\n}\n\nfunction getTypeSpecifiers(schema: GraphQLSchema, typeName: string): Array<MapperKind> {\n  const type = schema.getType(typeName);\n  const specifiers = [MapperKind.TYPE];\n\n  if (isObjectType(type)) {\n    specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.OBJECT_TYPE);\n    const query = schema.getQueryType();\n    const mutation = schema.getMutationType();\n    const subscription = schema.getSubscriptionType();\n    if (query != null && typeName === query.name) {\n      specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.QUERY);\n    } else if (mutation != null && typeName === mutation.name) {\n      specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.MUTATION);\n    } else if (subscription != null && typeName === subscription.name) {\n      specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.SUBSCRIPTION);\n    }\n  } else if (isInputObjectType(type)) {\n    specifiers.push(MapperKind.INPUT_OBJECT_TYPE);\n  } else if (isInterfaceType(type)) {\n    specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.ABSTRACT_TYPE, MapperKind.INTERFACE_TYPE);\n  } else if (isUnionType(type)) {\n    specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.ABSTRACT_TYPE, MapperKind.UNION_TYPE);\n  } else if (isEnumType(type)) {\n    specifiers.push(MapperKind.ENUM_TYPE);\n  } else if (isScalarType(type)) {\n    specifiers.push(MapperKind.SCALAR_TYPE);\n  }\n\n  return specifiers;\n}\n\nfunction getTypeMapper(schema: GraphQLSchema, schemaMapper: SchemaMapper, typeName: string): NamedTypeMapper | null {\n  const specifiers = getTypeSpecifiers(schema, typeName);\n  let typeMapper: NamedTypeMapper | undefined;\n  const stack = [...specifiers];\n  while (!typeMapper && stack.length > 0) {\n    const next = stack.pop();\n    typeMapper = schemaMapper[next] as NamedTypeMapper;\n  }\n\n  return typeMapper != null ? typeMapper : null;\n}\n\nfunction getFieldSpecifiers(schema: GraphQLSchema, typeName: string): Array<MapperKind> {\n  const type = schema.getType(typeName);\n  const specifiers = [MapperKind.FIELD];\n\n  if (isObjectType(type)) {\n    specifiers.push(MapperKind.COMPOSITE_FIELD, MapperKind.OBJECT_FIELD);\n    const query = schema.getQueryType();\n    const mutation = schema.getMutationType();\n    const subscription = schema.getSubscriptionType();\n    if (query != null && typeName === query.name) {\n      specifiers.push(MapperKind.ROOT_FIELD, MapperKind.QUERY_ROOT_FIELD);\n    } else if (mutation != null && typeName === mutation.name) {\n      specifiers.push(MapperKind.ROOT_FIELD, MapperKind.MUTATION_ROOT_FIELD);\n    } else if (subscription != null && typeName === subscription.name) {\n      specifiers.push(MapperKind.ROOT_FIELD, MapperKind.SUBSCRIPTION_ROOT_FIELD);\n    }\n  } else if (isInterfaceType(type)) {\n    specifiers.push(MapperKind.COMPOSITE_FIELD, MapperKind.INTERFACE_FIELD);\n  } else if (isInputObjectType(type)) {\n    specifiers.push(MapperKind.INPUT_OBJECT_FIELD);\n  }\n\n  return specifiers;\n}\n\nfunction getFieldMapper<F extends GraphQLFieldConfig<any, any> | GraphQLInputFieldConfig>(\n  schema: GraphQLSchema,\n  schemaMapper: SchemaMapper,\n  typeName: string\n): GenericFieldMapper<F> | null {\n  const specifiers = getFieldSpecifiers(schema, typeName);\n  let fieldMapper: GenericFieldMapper<F> | undefined;\n  const stack = [...specifiers];\n  while (!fieldMapper && stack.length > 0) {\n    const next = stack.pop();\n    fieldMapper = schemaMapper[next] as GenericFieldMapper<F>;\n  }\n\n  return fieldMapper != null ? fieldMapper : null;\n}\n\nfunction getArgumentMapper(schemaMapper: SchemaMapper): ArgumentMapper | null {\n  const argumentMapper = schemaMapper[MapperKind.ARGUMENT];\n  return argumentMapper != null ? argumentMapper : null;\n}\n\nfunction getDirectiveMapper(schemaMapper: SchemaMapper): DirectiveMapper | null {\n  const directiveMapper = schemaMapper[MapperKind.DIRECTIVE];\n  return directiveMapper != null ? directiveMapper : null;\n}\n\nfunction getEnumValueMapper(schemaMapper: SchemaMapper): EnumValueMapper | null {\n  const enumValueMapper = schemaMapper[MapperKind.ENUM_VALUE];\n  return enumValueMapper != null ? enumValueMapper : null;\n}\n\nexport function correctASTNodes(type: GraphQLObjectType): GraphQLObjectType;\nexport function correctASTNodes(type: GraphQLInterfaceType): GraphQLInterfaceType;\nexport function correctASTNodes(type: GraphQLInputObjectType): GraphQLInputObjectType;\nexport function correctASTNodes(type: GraphQLEnumType): GraphQLEnumType;\nexport function correctASTNodes(type: GraphQLNamedType): GraphQLNamedType {\n  if (isObjectType(type)) {\n    const config = (type as GraphQLObjectType).toConfig();\n    if (config.astNode != null) {\n      const fields: Array<FieldDefinitionNode> = [];\n      Object.values(config.fields).forEach(fieldConfig => {\n        if (fieldConfig.astNode != null) {\n          fields.push(fieldConfig.astNode);\n        }\n      });\n      config.astNode = {\n        ...config.astNode,\n        kind: Kind.OBJECT_TYPE_DEFINITION,\n        fields,\n      };\n    }\n\n    if (config.extensionASTNodes != null) {\n      config.extensionASTNodes = config.extensionASTNodes.map(node => ({\n        ...node,\n        kind: Kind.OBJECT_TYPE_EXTENSION,\n        fields: undefined,\n      }));\n    }\n\n    return new GraphQLObjectType(config);\n  } else if (isInterfaceType(type)) {\n    const config = (type as GraphQLInterfaceType).toConfig();\n    if (config.astNode != null) {\n      const fields: Array<FieldDefinitionNode> = [];\n      Object.values(config.fields).forEach(fieldConfig => {\n        if (fieldConfig.astNode != null) {\n          fields.push(fieldConfig.astNode);\n        }\n      });\n      config.astNode = {\n        ...config.astNode,\n        kind: Kind.INTERFACE_TYPE_DEFINITION,\n        fields,\n      };\n    }\n\n    if (config.extensionASTNodes != null) {\n      config.extensionASTNodes = config.extensionASTNodes.map(node => ({\n        ...node,\n        kind: Kind.INTERFACE_TYPE_EXTENSION,\n        fields: undefined,\n      }));\n    }\n\n    return new GraphQLInterfaceType(config);\n  } else if (isInputObjectType(type)) {\n    const config = (type as GraphQLInputObjectType).toConfig();\n    if (config.astNode != null) {\n      const fields: Array<InputValueDefinitionNode> = [];\n      Object.values(config.fields).forEach(fieldConfig => {\n        if (fieldConfig.astNode != null) {\n          fields.push(fieldConfig.astNode);\n        }\n      });\n      config.astNode = {\n        ...config.astNode,\n        kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n        fields,\n      };\n    }\n\n    if (config.extensionASTNodes != null) {\n      config.extensionASTNodes = config.extensionASTNodes.map(node => ({\n        ...node,\n        kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n        fields: undefined,\n      }));\n    }\n\n    return new GraphQLInputObjectType(config);\n  } else if (isEnumType(type)) {\n    const config = (type as GraphQLEnumType).toConfig();\n    if (config.astNode != null) {\n      const values: Array<EnumValueDefinitionNode> = [];\n      Object.values(config.values).forEach(enumValueConfig => {\n        if (enumValueConfig.astNode != null) {\n          values.push(enumValueConfig.astNode);\n        }\n      });\n      config.astNode = {\n        ...config.astNode,\n        values,\n      };\n    }\n\n    if (config.extensionASTNodes != null) {\n      config.extensionASTNodes = config.extensionASTNodes.map(node => ({\n        ...node,\n        values: undefined,\n      }));\n    }\n\n    return new GraphQLEnumType(config);\n  } else {\n    return type;\n  }\n}\n"],"version":3}