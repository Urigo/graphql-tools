{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/parse-graphql-sdl.ts","mappings":"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","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/parse-graphql-sdl.ts"],"sourcesContent":["import {\n  DocumentNode,\n  Kind,\n  TokenKind,\n  ASTNode,\n  parse,\n  Source as GraphQLSource,\n  visit,\n  isTypeSystemDefinitionNode,\n  StringValueNode,\n  print,\n} from 'graphql';\nimport { dedentBlockStringValue } from 'graphql/language/blockString';\nimport { GraphQLParseOptions } from './Interfaces';\n\nexport function parseGraphQLSDL(location: string, rawSDL: string, options: GraphQLParseOptions = {}) {\n  let document: DocumentNode;\n  const sdl: string = rawSDL;\n  let sdlModified = false;\n\n  try {\n    if (options.commentDescriptions && sdl.includes('#')) {\n      sdlModified = true;\n      document = transformCommentsToDescriptions(rawSDL, options);\n\n      // If noLocation=true, we need to make sure to print and parse it again, to remove locations,\n      // since `transformCommentsToDescriptions` must have locations set in order to transform the comments\n      // into descriptions.\n      if (options.noLocation) {\n        document = parse(print(document), options);\n      }\n    } else {\n      document = parse(new GraphQLSource(sdl, location), options);\n    }\n  } catch (e) {\n    if (e.message.includes('EOF') && sdl.replace(/(\\#[^*]*)/g, '').trim() === '') {\n      document = {\n        kind: Kind.DOCUMENT,\n        definitions: [],\n      };\n    } else {\n      throw e;\n    }\n  }\n\n  return {\n    location,\n    document,\n    rawSDL: sdlModified ? print(document) : sdl,\n  };\n}\n\nexport function getLeadingCommentBlock(node: ASTNode): void | string {\n  const loc = node.loc;\n\n  if (!loc) {\n    return;\n  }\n\n  const comments = [];\n  let token = loc.startToken.prev;\n\n  while (\n    token != null &&\n    token.kind === TokenKind.COMMENT &&\n    token.next &&\n    token.prev &&\n    token.line + 1 === token.next.line &&\n    token.line !== token.prev.line\n  ) {\n    const value = String(token.value);\n    comments.push(value);\n    token = token.prev;\n  }\n\n  return comments.length > 0 ? comments.reverse().join('\\n') : undefined;\n}\n\nexport function transformCommentsToDescriptions(\n  sourceSdl: string,\n  options: GraphQLParseOptions = {}\n): DocumentNode | null {\n  const parsedDoc = parse(sourceSdl, {\n    ...options,\n    noLocation: false,\n  });\n  const modifiedDoc = visit(parsedDoc, {\n    leave: (node: ASTNode) => {\n      if (isDescribable(node)) {\n        const rawValue = getLeadingCommentBlock(node);\n\n        if (rawValue !== undefined) {\n          const commentsBlock = dedentBlockStringValue('\\n' + rawValue);\n          const isBlock = commentsBlock.includes('\\n');\n\n          if (!node.description) {\n            return {\n              ...node,\n              description: {\n                kind: Kind.STRING,\n                value: commentsBlock,\n                block: isBlock,\n              },\n            };\n          } else {\n            return {\n              ...node,\n              description: {\n                ...node.description,\n                value: node.description.value + '\\n' + commentsBlock,\n                block: true,\n              },\n            };\n          }\n        }\n      }\n    },\n  });\n\n  return modifiedDoc;\n}\n\ntype DiscriminateUnion<T, U> = T extends U ? T : never;\ntype DescribableASTNodes = DiscriminateUnion<\n  ASTNode,\n  {\n    description?: StringValueNode;\n  }\n>;\n\nexport function isDescribable(node: ASTNode): node is DescribableASTNodes {\n  return (\n    isTypeSystemDefinitionNode(node) ||\n    node.kind === Kind.FIELD_DEFINITION ||\n    node.kind === Kind.INPUT_VALUE_DEFINITION ||\n    node.kind === Kind.ENUM_VALUE_DEFINITION\n  );\n}\n"],"version":3}