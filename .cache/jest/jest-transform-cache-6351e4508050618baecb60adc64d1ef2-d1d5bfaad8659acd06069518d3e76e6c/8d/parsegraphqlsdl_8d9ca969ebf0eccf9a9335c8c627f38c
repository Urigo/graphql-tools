fccaf3840360ed24955234fde1b9312f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDescribable = exports.transformCommentsToDescriptions = exports.getLeadingCommentBlock = exports.parseGraphQLSDL = void 0;
const graphql_1 = require("graphql");
const blockString_1 = require("graphql/language/blockString");
function parseGraphQLSDL(location, rawSDL, options = {}) {
    let document;
    const sdl = rawSDL;
    let sdlModified = false;
    try {
        if (options.commentDescriptions && sdl.includes('#')) {
            sdlModified = true;
            document = transformCommentsToDescriptions(rawSDL, options);
            // If noLocation=true, we need to make sure to print and parse it again, to remove locations,
            // since `transformCommentsToDescriptions` must have locations set in order to transform the comments
            // into descriptions.
            if (options.noLocation) {
                document = graphql_1.parse(graphql_1.print(document), options);
            }
        }
        else {
            document = graphql_1.parse(new graphql_1.Source(sdl, location), options);
        }
    }
    catch (e) {
        if (e.message.includes('EOF') && sdl.replace(/(\#[^*]*)/g, '').trim() === '') {
            document = {
                kind: graphql_1.Kind.DOCUMENT,
                definitions: [],
            };
        }
        else {
            throw e;
        }
    }
    return {
        location,
        document,
        rawSDL: sdlModified ? graphql_1.print(document) : sdl,
    };
}
exports.parseGraphQLSDL = parseGraphQLSDL;
function getLeadingCommentBlock(node) {
    const loc = node.loc;
    if (!loc) {
        return;
    }
    const comments = [];
    let token = loc.startToken.prev;
    while (token != null &&
        token.kind === graphql_1.TokenKind.COMMENT &&
        token.next &&
        token.prev &&
        token.line + 1 === token.next.line &&
        token.line !== token.prev.line) {
        const value = String(token.value);
        comments.push(value);
        token = token.prev;
    }
    return comments.length > 0 ? comments.reverse().join('\n') : undefined;
}
exports.getLeadingCommentBlock = getLeadingCommentBlock;
function transformCommentsToDescriptions(sourceSdl, options = {}) {
    const parsedDoc = graphql_1.parse(sourceSdl, {
        ...options,
        noLocation: false,
    });
    const modifiedDoc = graphql_1.visit(parsedDoc, {
        leave: (node) => {
            if (isDescribable(node)) {
                const rawValue = getLeadingCommentBlock(node);
                if (rawValue !== undefined) {
                    const commentsBlock = blockString_1.dedentBlockStringValue('\n' + rawValue);
                    const isBlock = commentsBlock.includes('\n');
                    if (!node.description) {
                        return {
                            ...node,
                            description: {
                                kind: graphql_1.Kind.STRING,
                                value: commentsBlock,
                                block: isBlock,
                            },
                        };
                    }
                    else {
                        return {
                            ...node,
                            description: {
                                ...node.description,
                                value: node.description.value + '\n' + commentsBlock,
                                block: true,
                            },
                        };
                    }
                }
            }
        },
    });
    return modifiedDoc;
}
exports.transformCommentsToDescriptions = transformCommentsToDescriptions;
function isDescribable(node) {
    return (graphql_1.isTypeSystemDefinitionNode(node) ||
        node.kind === graphql_1.Kind.FIELD_DEFINITION ||
        node.kind === graphql_1.Kind.INPUT_VALUE_DEFINITION ||
        node.kind === graphql_1.Kind.ENUM_VALUE_DEFINITION);
}
exports.isDescribable = isDescribable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,