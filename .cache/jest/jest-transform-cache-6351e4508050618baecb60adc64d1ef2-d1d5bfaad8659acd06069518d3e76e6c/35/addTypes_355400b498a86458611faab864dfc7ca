c1e15b27ddeb5f645e81a621fcb87245
"use strict";
// addTypes uses toConfig to create a new schema with a new or replaced
// type or directive. Rewiring is employed so that the replaced type can be
// reconnected with the existing types.
//
// Rewiring is employed even for new types or directives as a convenience, so
// that type references within the new type or directive do not have to be to
// the identical objects within the original schema.
//
// In fact, the type references could even be stub types with entirely different
// fields, as long as the type references share the same name as the desired
// type within the original schema's type map.
//
// This makes it easy to perform simple schema operations (e.g. adding a new
// type with a fiew fields removed from an existing type) that could normally be
// performed by using toConfig directly, but is blocked if any intervening
// more advanced schema operations have caused the types to be recreated via
// rewiring.
//
// Type recreation happens, for example, with every use of mapSchema, as the
// types are always rewired. If fields are selected and removed using
// mapSchema, adding those fields to a new type can no longer be simply done
// by toConfig, as the types are not the identical JavaScript objects, and
// schema creation will fail with errors referencing multiple types with the
// same names.
//
// enhanceSchema can fill this gap by adding an additional round of rewiring.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.addTypes = void 0;
const graphql_1 = require("graphql");
const rewire_1 = require("./rewire");
function addTypes(schema, newTypesOrDirectives) {
    const queryType = schema.getQueryType();
    const mutationType = schema.getMutationType();
    const subscriptionType = schema.getSubscriptionType();
    const queryTypeName = queryType != null ? queryType.name : undefined;
    const mutationTypeName = mutationType != null ? mutationType.name : undefined;
    const subscriptionTypeName = subscriptionType != null ? subscriptionType.name : undefined;
    const config = schema.toConfig();
    const originalTypeMap = {};
    config.types.forEach(type => {
        originalTypeMap[type.name] = type;
    });
    const originalDirectiveMap = {};
    config.directives.forEach(directive => {
        originalDirectiveMap[directive.name] = directive;
    });
    newTypesOrDirectives.forEach(newTypeOrDirective => {
        if (graphql_1.isNamedType(newTypeOrDirective)) {
            originalTypeMap[newTypeOrDirective.name] = newTypeOrDirective;
        }
        else if (graphql_1.isDirective(newTypeOrDirective)) {
            originalDirectiveMap[newTypeOrDirective.name] = newTypeOrDirective;
        }
    });
    const { typeMap, directives } = rewire_1.rewireTypes(originalTypeMap, Object.keys(originalDirectiveMap).map(directiveName => originalDirectiveMap[directiveName]));
    return new graphql_1.GraphQLSchema({
        ...config,
        query: queryTypeName ? typeMap[queryTypeName] : undefined,
        mutation: mutationTypeName ? typeMap[mutationTypeName] : undefined,
        subscription: subscriptionTypeName != null ? typeMap[subscriptionTypeName] : undefined,
        types: Object.keys(typeMap).map(typeName => typeMap[typeName]),
        directives,
    });
}
exports.addTypes = addTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJkYXRfMDAwL0d1aWxkL2dyYXBocWwtdG9vbHMvcGFja2FnZXMvdXRpbHMvc3JjL2FkZFR5cGVzLnRzIiwibWFwcGluZ3MiOiI7QUFBQSx1RUFBdUU7QUFDdkUsMkVBQTJFO0FBQzNFLHVDQUF1QztBQUN2QyxFQUFFO0FBQ0YsNkVBQTZFO0FBQzdFLDZFQUE2RTtBQUM3RSxvREFBb0Q7QUFDcEQsRUFBRTtBQUNGLGdGQUFnRjtBQUNoRiw0RUFBNEU7QUFDNUUsOENBQThDO0FBQzlDLEVBQUU7QUFDRiw0RUFBNEU7QUFDNUUsZ0ZBQWdGO0FBQ2hGLDBFQUEwRTtBQUMxRSw0RUFBNEU7QUFDNUUsWUFBWTtBQUNaLEVBQUU7QUFDRiw0RUFBNEU7QUFDNUUscUVBQXFFO0FBQ3JFLDRFQUE0RTtBQUM1RSwwRUFBMEU7QUFDMUUsNEVBQTRFO0FBQzVFLGNBQWM7QUFDZCxFQUFFO0FBQ0YsNkVBQTZFO0FBQzdFLEVBQUU7OztBQUVGLHFDQU9pQjtBQUNqQixxQ0FBdUM7QUFFdkMsU0FBZ0IsUUFBUSxDQUN0QixNQUFxQixFQUNyQixvQkFBZ0U7SUFFaEUsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3hDLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUM5QyxNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBRXRELE1BQU0sYUFBYSxHQUFHLFNBQVMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNyRSxNQUFNLGdCQUFnQixHQUFHLFlBQVksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUM5RSxNQUFNLG9CQUFvQixHQUFHLGdCQUFnQixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFFMUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBRWpDLE1BQU0sZUFBZSxHQUFHLEVBQUUsQ0FBQztJQUMzQixNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMxQixlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0lBQ2hDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQ3BDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUM7SUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFFSCxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsRUFBRTtRQUNoRCxJQUFJLHFCQUFXLENBQUMsa0JBQWtCLENBQUMsRUFBRTtZQUNuQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEdBQUcsa0JBQWtCLENBQUM7U0FDL0Q7YUFBTSxJQUFJLHFCQUFXLENBQUMsa0JBQWtCLENBQUMsRUFBRTtZQUMxQyxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxrQkFBa0IsQ0FBQztTQUNwRTtJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxvQkFBVyxDQUN6QyxlQUFlLEVBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQzVGLENBQUM7SUFFRixPQUFPLElBQUksdUJBQWEsQ0FBQztRQUN2QixHQUFHLE1BQU07UUFDVCxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBRSxPQUFPLENBQUMsYUFBYSxDQUF1QixDQUFDLENBQUMsQ0FBQyxTQUFTO1FBQ2hGLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUUsT0FBTyxDQUFDLGdCQUFnQixDQUF1QixDQUFDLENBQUMsQ0FBQyxTQUFTO1FBQ3pGLFlBQVksRUFBRSxvQkFBb0IsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFFLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBdUIsQ0FBQyxDQUFDLENBQUMsU0FBUztRQUM3RyxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUQsVUFBVTtLQUNYLENBQUMsQ0FBQztBQUNMLENBQUM7QUE3Q0QsNEJBNkNDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2FyZGF0XzAwMC9HdWlsZC9ncmFwaHFsLXRvb2xzL3BhY2thZ2VzL3V0aWxzL3NyYy9hZGRUeXBlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhZGRUeXBlcyB1c2VzIHRvQ29uZmlnIHRvIGNyZWF0ZSBhIG5ldyBzY2hlbWEgd2l0aCBhIG5ldyBvciByZXBsYWNlZFxuLy8gdHlwZSBvciBkaXJlY3RpdmUuIFJld2lyaW5nIGlzIGVtcGxveWVkIHNvIHRoYXQgdGhlIHJlcGxhY2VkIHR5cGUgY2FuIGJlXG4vLyByZWNvbm5lY3RlZCB3aXRoIHRoZSBleGlzdGluZyB0eXBlcy5cbi8vXG4vLyBSZXdpcmluZyBpcyBlbXBsb3llZCBldmVuIGZvciBuZXcgdHlwZXMgb3IgZGlyZWN0aXZlcyBhcyBhIGNvbnZlbmllbmNlLCBzb1xuLy8gdGhhdCB0eXBlIHJlZmVyZW5jZXMgd2l0aGluIHRoZSBuZXcgdHlwZSBvciBkaXJlY3RpdmUgZG8gbm90IGhhdmUgdG8gYmUgdG9cbi8vIHRoZSBpZGVudGljYWwgb2JqZWN0cyB3aXRoaW4gdGhlIG9yaWdpbmFsIHNjaGVtYS5cbi8vXG4vLyBJbiBmYWN0LCB0aGUgdHlwZSByZWZlcmVuY2VzIGNvdWxkIGV2ZW4gYmUgc3R1YiB0eXBlcyB3aXRoIGVudGlyZWx5IGRpZmZlcmVudFxuLy8gZmllbGRzLCBhcyBsb25nIGFzIHRoZSB0eXBlIHJlZmVyZW5jZXMgc2hhcmUgdGhlIHNhbWUgbmFtZSBhcyB0aGUgZGVzaXJlZFxuLy8gdHlwZSB3aXRoaW4gdGhlIG9yaWdpbmFsIHNjaGVtYSdzIHR5cGUgbWFwLlxuLy9cbi8vIFRoaXMgbWFrZXMgaXQgZWFzeSB0byBwZXJmb3JtIHNpbXBsZSBzY2hlbWEgb3BlcmF0aW9ucyAoZS5nLiBhZGRpbmcgYSBuZXdcbi8vIHR5cGUgd2l0aCBhIGZpZXcgZmllbGRzIHJlbW92ZWQgZnJvbSBhbiBleGlzdGluZyB0eXBlKSB0aGF0IGNvdWxkIG5vcm1hbGx5IGJlXG4vLyBwZXJmb3JtZWQgYnkgdXNpbmcgdG9Db25maWcgZGlyZWN0bHksIGJ1dCBpcyBibG9ja2VkIGlmIGFueSBpbnRlcnZlbmluZ1xuLy8gbW9yZSBhZHZhbmNlZCBzY2hlbWEgb3BlcmF0aW9ucyBoYXZlIGNhdXNlZCB0aGUgdHlwZXMgdG8gYmUgcmVjcmVhdGVkIHZpYVxuLy8gcmV3aXJpbmcuXG4vL1xuLy8gVHlwZSByZWNyZWF0aW9uIGhhcHBlbnMsIGZvciBleGFtcGxlLCB3aXRoIGV2ZXJ5IHVzZSBvZiBtYXBTY2hlbWEsIGFzIHRoZVxuLy8gdHlwZXMgYXJlIGFsd2F5cyByZXdpcmVkLiBJZiBmaWVsZHMgYXJlIHNlbGVjdGVkIGFuZCByZW1vdmVkIHVzaW5nXG4vLyBtYXBTY2hlbWEsIGFkZGluZyB0aG9zZSBmaWVsZHMgdG8gYSBuZXcgdHlwZSBjYW4gbm8gbG9uZ2VyIGJlIHNpbXBseSBkb25lXG4vLyBieSB0b0NvbmZpZywgYXMgdGhlIHR5cGVzIGFyZSBub3QgdGhlIGlkZW50aWNhbCBKYXZhU2NyaXB0IG9iamVjdHMsIGFuZFxuLy8gc2NoZW1hIGNyZWF0aW9uIHdpbGwgZmFpbCB3aXRoIGVycm9ycyByZWZlcmVuY2luZyBtdWx0aXBsZSB0eXBlcyB3aXRoIHRoZVxuLy8gc2FtZSBuYW1lcy5cbi8vXG4vLyBlbmhhbmNlU2NoZW1hIGNhbiBmaWxsIHRoaXMgZ2FwIGJ5IGFkZGluZyBhbiBhZGRpdGlvbmFsIHJvdW5kIG9mIHJld2lyaW5nLlxuLy9cblxuaW1wb3J0IHtcbiAgR3JhcGhRTE9iamVjdFR5cGUsXG4gIEdyYXBoUUxTY2hlbWEsXG4gIEdyYXBoUUxOYW1lZFR5cGUsXG4gIEdyYXBoUUxEaXJlY3RpdmUsXG4gIGlzTmFtZWRUeXBlLFxuICBpc0RpcmVjdGl2ZSxcbn0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQgeyByZXdpcmVUeXBlcyB9IGZyb20gJy4vcmV3aXJlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFR5cGVzKFxuICBzY2hlbWE6IEdyYXBoUUxTY2hlbWEsXG4gIG5ld1R5cGVzT3JEaXJlY3RpdmVzOiBBcnJheTxHcmFwaFFMTmFtZWRUeXBlIHwgR3JhcGhRTERpcmVjdGl2ZT5cbik6IEdyYXBoUUxTY2hlbWEge1xuICBjb25zdCBxdWVyeVR5cGUgPSBzY2hlbWEuZ2V0UXVlcnlUeXBlKCk7XG4gIGNvbnN0IG11dGF0aW9uVHlwZSA9IHNjaGVtYS5nZXRNdXRhdGlvblR5cGUoKTtcbiAgY29uc3Qgc3Vic2NyaXB0aW9uVHlwZSA9IHNjaGVtYS5nZXRTdWJzY3JpcHRpb25UeXBlKCk7XG5cbiAgY29uc3QgcXVlcnlUeXBlTmFtZSA9IHF1ZXJ5VHlwZSAhPSBudWxsID8gcXVlcnlUeXBlLm5hbWUgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IG11dGF0aW9uVHlwZU5hbWUgPSBtdXRhdGlvblR5cGUgIT0gbnVsbCA/IG11dGF0aW9uVHlwZS5uYW1lIDogdW5kZWZpbmVkO1xuICBjb25zdCBzdWJzY3JpcHRpb25UeXBlTmFtZSA9IHN1YnNjcmlwdGlvblR5cGUgIT0gbnVsbCA/IHN1YnNjcmlwdGlvblR5cGUubmFtZSA6IHVuZGVmaW5lZDtcblxuICBjb25zdCBjb25maWcgPSBzY2hlbWEudG9Db25maWcoKTtcblxuICBjb25zdCBvcmlnaW5hbFR5cGVNYXAgPSB7fTtcbiAgY29uZmlnLnR5cGVzLmZvckVhY2godHlwZSA9PiB7XG4gICAgb3JpZ2luYWxUeXBlTWFwW3R5cGUubmFtZV0gPSB0eXBlO1xuICB9KTtcblxuICBjb25zdCBvcmlnaW5hbERpcmVjdGl2ZU1hcCA9IHt9O1xuICBjb25maWcuZGlyZWN0aXZlcy5mb3JFYWNoKGRpcmVjdGl2ZSA9PiB7XG4gICAgb3JpZ2luYWxEaXJlY3RpdmVNYXBbZGlyZWN0aXZlLm5hbWVdID0gZGlyZWN0aXZlO1xuICB9KTtcblxuICBuZXdUeXBlc09yRGlyZWN0aXZlcy5mb3JFYWNoKG5ld1R5cGVPckRpcmVjdGl2ZSA9PiB7XG4gICAgaWYgKGlzTmFtZWRUeXBlKG5ld1R5cGVPckRpcmVjdGl2ZSkpIHtcbiAgICAgIG9yaWdpbmFsVHlwZU1hcFtuZXdUeXBlT3JEaXJlY3RpdmUubmFtZV0gPSBuZXdUeXBlT3JEaXJlY3RpdmU7XG4gICAgfSBlbHNlIGlmIChpc0RpcmVjdGl2ZShuZXdUeXBlT3JEaXJlY3RpdmUpKSB7XG4gICAgICBvcmlnaW5hbERpcmVjdGl2ZU1hcFtuZXdUeXBlT3JEaXJlY3RpdmUubmFtZV0gPSBuZXdUeXBlT3JEaXJlY3RpdmU7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCB7IHR5cGVNYXAsIGRpcmVjdGl2ZXMgfSA9IHJld2lyZVR5cGVzKFxuICAgIG9yaWdpbmFsVHlwZU1hcCxcbiAgICBPYmplY3Qua2V5cyhvcmlnaW5hbERpcmVjdGl2ZU1hcCkubWFwKGRpcmVjdGl2ZU5hbWUgPT4gb3JpZ2luYWxEaXJlY3RpdmVNYXBbZGlyZWN0aXZlTmFtZV0pXG4gICk7XG5cbiAgcmV0dXJuIG5ldyBHcmFwaFFMU2NoZW1hKHtcbiAgICAuLi5jb25maWcsXG4gICAgcXVlcnk6IHF1ZXJ5VHlwZU5hbWUgPyAodHlwZU1hcFtxdWVyeVR5cGVOYW1lXSBhcyBHcmFwaFFMT2JqZWN0VHlwZSkgOiB1bmRlZmluZWQsXG4gICAgbXV0YXRpb246IG11dGF0aW9uVHlwZU5hbWUgPyAodHlwZU1hcFttdXRhdGlvblR5cGVOYW1lXSBhcyBHcmFwaFFMT2JqZWN0VHlwZSkgOiB1bmRlZmluZWQsXG4gICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25UeXBlTmFtZSAhPSBudWxsID8gKHR5cGVNYXBbc3Vic2NyaXB0aW9uVHlwZU5hbWVdIGFzIEdyYXBoUUxPYmplY3RUeXBlKSA6IHVuZGVmaW5lZCxcbiAgICB0eXBlczogT2JqZWN0LmtleXModHlwZU1hcCkubWFwKHR5cGVOYW1lID0+IHR5cGVNYXBbdHlwZU5hbWVdKSxcbiAgICBkaXJlY3RpdmVzLFxuICB9KTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==