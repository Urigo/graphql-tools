{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/addTypes.ts","mappings":"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","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/addTypes.ts"],"sourcesContent":["// addTypes uses toConfig to create a new schema with a new or replaced\n// type or directive. Rewiring is employed so that the replaced type can be\n// reconnected with the existing types.\n//\n// Rewiring is employed even for new types or directives as a convenience, so\n// that type references within the new type or directive do not have to be to\n// the identical objects within the original schema.\n//\n// In fact, the type references could even be stub types with entirely different\n// fields, as long as the type references share the same name as the desired\n// type within the original schema's type map.\n//\n// This makes it easy to perform simple schema operations (e.g. adding a new\n// type with a fiew fields removed from an existing type) that could normally be\n// performed by using toConfig directly, but is blocked if any intervening\n// more advanced schema operations have caused the types to be recreated via\n// rewiring.\n//\n// Type recreation happens, for example, with every use of mapSchema, as the\n// types are always rewired. If fields are selected and removed using\n// mapSchema, adding those fields to a new type can no longer be simply done\n// by toConfig, as the types are not the identical JavaScript objects, and\n// schema creation will fail with errors referencing multiple types with the\n// same names.\n//\n// enhanceSchema can fill this gap by adding an additional round of rewiring.\n//\n\nimport {\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLNamedType,\n  GraphQLDirective,\n  isNamedType,\n  isDirective,\n} from 'graphql';\nimport { rewireTypes } from './rewire';\n\nexport function addTypes(\n  schema: GraphQLSchema,\n  newTypesOrDirectives: Array<GraphQLNamedType | GraphQLDirective>\n): GraphQLSchema {\n  const queryType = schema.getQueryType();\n  const mutationType = schema.getMutationType();\n  const subscriptionType = schema.getSubscriptionType();\n\n  const queryTypeName = queryType != null ? queryType.name : undefined;\n  const mutationTypeName = mutationType != null ? mutationType.name : undefined;\n  const subscriptionTypeName = subscriptionType != null ? subscriptionType.name : undefined;\n\n  const config = schema.toConfig();\n\n  const originalTypeMap = {};\n  config.types.forEach(type => {\n    originalTypeMap[type.name] = type;\n  });\n\n  const originalDirectiveMap = {};\n  config.directives.forEach(directive => {\n    originalDirectiveMap[directive.name] = directive;\n  });\n\n  newTypesOrDirectives.forEach(newTypeOrDirective => {\n    if (isNamedType(newTypeOrDirective)) {\n      originalTypeMap[newTypeOrDirective.name] = newTypeOrDirective;\n    } else if (isDirective(newTypeOrDirective)) {\n      originalDirectiveMap[newTypeOrDirective.name] = newTypeOrDirective;\n    }\n  });\n\n  const { typeMap, directives } = rewireTypes(\n    originalTypeMap,\n    Object.keys(originalDirectiveMap).map(directiveName => originalDirectiveMap[directiveName])\n  );\n\n  return new GraphQLSchema({\n    ...config,\n    query: queryTypeName ? (typeMap[queryTypeName] as GraphQLObjectType) : undefined,\n    mutation: mutationTypeName ? (typeMap[mutationTypeName] as GraphQLObjectType) : undefined,\n    subscription: subscriptionTypeName != null ? (typeMap[subscriptionTypeName] as GraphQLObjectType) : undefined,\n    types: Object.keys(typeMap).map(typeName => typeMap[typeName]),\n    directives,\n  });\n}\n"],"version":3}