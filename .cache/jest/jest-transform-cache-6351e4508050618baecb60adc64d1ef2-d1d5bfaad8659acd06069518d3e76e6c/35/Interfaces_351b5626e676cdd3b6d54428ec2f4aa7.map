{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/Interfaces.ts","mappings":";;;AAiVA,IAAY,eAcX;AAdD,WAAY,eAAe;IACzB,gDAA6B,CAAA;IAC7B,8DAA2C,CAAA;IAC3C,0DAAuC,CAAA;IACvC,oEAAiD,CAAA;IACjD,8DAA2C,CAAA;IAC3C,0EAAuD,CAAA;IACvD,kEAA+C,CAAA;IAC/C,4DAAyC,CAAA;IACzC,oEAAiD,CAAA;IACjD,8DAA2C,CAAA;IAC3C,kDAA+B,CAAA;IAC/B,wDAAqC,CAAA;IACrC,gEAA6C,CAAA;AAC/C,CAAC,EAdW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAc1B;AAsDD,IAAY,UA0BX;AA1BD,WAAY,UAAU;IACpB,sCAAwB,CAAA;IACxB,oDAAsC,CAAA;IACtC,gDAAkC,CAAA;IAClC,0DAA4C,CAAA;IAC5C,oDAAsC,CAAA;IACtC,gEAAkD,CAAA;IAClD,wDAA0C,CAAA;IAC1C,kDAAoC,CAAA;IACpC,0DAA4C,CAAA;IAC5C,oDAAsC,CAAA;IACtC,wCAA0B,CAAA;IAC1B,8CAAgC,CAAA;IAChC,sDAAwC,CAAA;IACxC,gDAAkC,CAAA;IAClC,wCAA0B,CAAA;IAC1B,4DAA8C,CAAA;IAC9C,sDAAwC,CAAA;IACxC,kDAAoC,CAAA;IACpC,8DAAgD,CAAA;IAChD,oEAAsD,CAAA;IACtD,4EAA8D,CAAA;IAC9D,4DAA8C,CAAA;IAC9C,kEAAoD,CAAA;IACpD,8CAAgC,CAAA;IAChC,kDAAoC,CAAA;AACtC,CAAC,EA1BW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QA0BrB","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/Interfaces.ts"],"sourcesContent":["import {\n  GraphQLSchema,\n  GraphQLField,\n  GraphQLInputType,\n  GraphQLNamedType,\n  GraphQLFieldResolver,\n  GraphQLResolveInfo,\n  GraphQLScalarType,\n  DocumentNode,\n  FieldNode,\n  GraphQLEnumValue,\n  GraphQLEnumType,\n  GraphQLUnionType,\n  GraphQLArgument,\n  GraphQLInputField,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLObjectType,\n  GraphQLDirective,\n  FragmentDefinitionNode,\n  SelectionNode,\n  OperationDefinitionNode,\n  GraphQLError,\n  ExecutionResult as GraphQLExecutionResult,\n  GraphQLOutputType,\n  FieldDefinitionNode,\n  GraphQLFieldConfig,\n  GraphQLInputFieldConfig,\n  GraphQLArgumentConfig,\n  GraphQLEnumValueConfig,\n  GraphQLScalarSerializer,\n  GraphQLScalarValueParser,\n  GraphQLScalarLiteralParser,\n  ScalarTypeDefinitionNode,\n  ScalarTypeExtensionNode,\n  EnumTypeDefinitionNode,\n  EnumTypeExtensionNode,\n  GraphQLIsTypeOfFn,\n  ObjectTypeDefinitionNode,\n  ObjectTypeExtensionNode,\n  InterfaceTypeExtensionNode,\n  InterfaceTypeDefinitionNode,\n  GraphQLTypeResolver,\n  UnionTypeDefinitionNode,\n  UnionTypeExtensionNode,\n  InputObjectTypeExtensionNode,\n  InputObjectTypeDefinitionNode,\n  GraphQLType,\n} from 'graphql';\n\nimport { SchemaVisitor } from './SchemaVisitor';\n\n// graphql-js < v15 backwards compatible ExecutionResult\n// See: https://github.com/graphql/graphql-js/pull/2490\n\nexport interface ExecutionResult<TData = Record<string, any>> extends GraphQLExecutionResult {\n  data?: TData | null;\n  extensions?: Record<string, any>;\n}\n\n// graphql-js non-exported typings\n\nexport type TypeMap = Record<string, GraphQLNamedType>;\n\nexport interface GraphQLExecutionContext {\n  schema: GraphQLSchema;\n  fragments: Record<string, FragmentDefinitionNode>;\n  rootValue: any;\n  contextValue: any;\n  operation: OperationDefinitionNode;\n  variableValues: Record<string, any>;\n  fieldResolver: GraphQLFieldResolver<any, any>;\n  errors: Array<GraphQLError>;\n}\n\nexport interface GraphQLParseOptions {\n  noLocation?: boolean;\n  allowLegacySDLEmptyFields?: boolean;\n  allowLegacySDLImplementsInterfaces?: boolean;\n  experimentalFragmentVariables?: boolean;\n  /**\n   * Set to `true` in order to convert all GraphQL comments (marked with # sign) to descriptions (\"\"\")\n   * GraphQL has built-in support for transforming descriptions to comments (with `print`), but not while\n   * parsing. Turning the flag on will support the other way as well (`parse`)\n   */\n  commentDescriptions?: boolean;\n}\n\n// graphql-tools typings\n\nexport type ValidatorBehavior = 'error' | 'warn' | 'ignore';\n\n/**\n * Options for validating resolvers\n */\nexport interface IResolverValidationOptions {\n  /**\n   * Enable to require a resolver to be defined for any field that has\n   * arguments. Defaults to `ignore`.\n   */\n  requireResolversForArgs?: ValidatorBehavior;\n  /**\n   * Enable to require a resolver to be defined for any field which has\n   * a return type that isn't a scalar. Defaults to `ignore`.\n   */\n  requireResolversForNonScalar?: ValidatorBehavior;\n  /**\n   * Enable to require a resolver for be defined for all fields defined\n   * in the schema. Defaults to `ignore`.\n   */\n  requireResolversForAllFields?: ValidatorBehavior;\n  /**\n   * Enable to require a `resolveType()` for Interface and Union types.\n   * Defaults to `ignore`.\n   */\n  requireResolversForResolveType?: ValidatorBehavior;\n  /**\n   * Enable to require all defined resolvers to match fields that\n   * actually exist in the schema. Defaults to `error` to catch common errors.\n   */\n  requireResolversToMatchSchema?: ValidatorBehavior;\n}\n\n/**\n * Configuration object for adding resolvers to a schema\n */\nexport interface IAddResolversToSchemaOptions {\n  /**\n   * The schema to which to add resolvers\n   */\n  schema: GraphQLSchema;\n  /**\n   * Object describing the field resolvers to add to the provided schema\n   */\n  resolvers: IResolvers;\n  /**\n   * Override the default field resolver provided by `graphql-js`\n   */\n  defaultFieldResolver?: IFieldResolver<any, any>;\n  /**\n   * Additional options for validating the provided resolvers\n   */\n  resolverValidationOptions?: IResolverValidationOptions;\n  /**\n   * GraphQL object types that implement interfaces will inherit any missing\n   * resolvers from their interface types defined in the `resolvers` object\n   */\n  inheritResolversFromInterfaces?: boolean;\n  /**\n   * Set to `true` to modify the existing schema instead of creating a new one\n   */\n  updateResolversInPlace?: boolean;\n}\n\nexport type IScalarTypeResolver = GraphQLScalarType & {\n  __name?: string;\n  __description?: string;\n  __serialize?: GraphQLScalarSerializer<any>;\n  __parseValue?: GraphQLScalarValueParser<any>;\n  __parseLiteral?: GraphQLScalarLiteralParser<any>;\n  __extensions?: Record<string, any>;\n  __astNode?: ScalarTypeDefinitionNode;\n  __extensionASTNodes?: Array<ScalarTypeExtensionNode>;\n};\n\nexport type IEnumTypeResolver = Record<string, any> & {\n  __name?: string;\n  __description?: string;\n  __extensions?: Record<string, any>;\n  __astNode?: EnumTypeDefinitionNode;\n  __extensionASTNodes?: Array<EnumTypeExtensionNode>;\n};\n\nexport interface IFieldResolverOptions<TSource = any, TContext = any, TArgs = any> {\n  name?: string;\n  description?: string;\n  type?: GraphQLOutputType;\n  args?: Array<GraphQLArgument>;\n  resolve?: IFieldResolver<TSource, TContext, TArgs>;\n  subscribe?: IFieldResolver<TSource, TContext, TArgs>;\n  isDeprecated?: boolean;\n  deprecationReason?: string;\n  extensions?: Record<string, any>;\n  astNode?: FieldDefinitionNode;\n}\n\nexport type FieldNodeMapper = (\n  fieldNode: FieldNode,\n  fragments: Record<string, FragmentDefinitionNode>,\n  transformationContext: Record<string, any>\n) => SelectionNode | Array<SelectionNode>;\n\nexport type FieldNodeMappers = Record<string, Record<string, FieldNodeMapper>>;\n\nexport type InputFieldFilter = (\n  typeName?: string,\n  fieldName?: string,\n  inputFieldConfig?: GraphQLInputFieldConfig\n) => boolean;\n\nexport type FieldFilter = (\n  typeName?: string,\n  fieldName?: string,\n  fieldConfig?: GraphQLFieldConfig<any, any> | GraphQLInputFieldConfig\n) => boolean;\n\nexport type RootFieldFilter = (\n  operation?: 'Query' | 'Mutation' | 'Subscription',\n  rootFieldName?: string,\n  fieldConfig?: GraphQLFieldConfig<any, any>\n) => boolean;\n\nexport type TypeFilter = (typeName: string, type: GraphQLType) => boolean;\n\nexport type ArgumentFilter = (\n  typeName?: string,\n  fieldName?: string,\n  argName?: string,\n  argConfig?: GraphQLArgumentConfig\n) => boolean;\n\nexport type RenameTypesOptions = {\n  renameBuiltins: boolean;\n  renameScalars: boolean;\n};\n\nexport type IFieldResolver<TSource, TContext, TArgs = Record<string, any>, TReturn = any> = (\n  source: TSource,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => TReturn;\n\nexport type ITypedef = string | DocumentNode | (() => Array<ITypedef>);\n\nexport type ITypeDefinitions = string | DocumentNode | Array<ITypedef>;\n\nexport type IObjectTypeResolver<TSource = any, TContext = any, TArgs = any> = {\n  [key: string]: IFieldResolver<TSource, TContext, TArgs> | IFieldResolverOptions<TSource, TContext>;\n} & {\n  __name?: string;\n  __description?: string;\n  __isTypeOf?: GraphQLIsTypeOfFn<TSource, TContext>;\n  __extensions?: Record<string, any>;\n  __astNode?: ObjectTypeDefinitionNode;\n  __extensionASTNodes?: ObjectTypeExtensionNode;\n};\n\nexport type IInterfaceTypeResolver<TSource = any, TContext = any, TArgs = any> = {\n  [key: string]: IFieldResolver<TSource, TContext, TArgs> | IFieldResolverOptions<TSource, TContext>;\n} & {\n  __name?: string;\n  __description?: string;\n  __resolveType?: GraphQLTypeResolver<any, any>;\n  __extensions?: Record<string, any>;\n  __astNode?: InterfaceTypeDefinitionNode;\n  __extensionASTNodes?: Array<InterfaceTypeExtensionNode>;\n};\n\nexport type IUnionTypeResolver = {\n  __name?: string;\n  __description?: string;\n  __resolveType?: GraphQLTypeResolver<any, any>;\n  __extensions?: Record<string, any>;\n  __astNode?: UnionTypeDefinitionNode;\n  __extensionASTNodes?: Array<UnionTypeExtensionNode>;\n};\n\nexport type IInputObjectTypeResolver = {\n  __name?: string;\n  __description?: string;\n  __extensions?: Record<string, any>;\n  __astNode?: InputObjectTypeDefinitionNode;\n  __extensionASTNodes?: Array<InputObjectTypeExtensionNode>;\n};\n\nexport type ISchemaLevelResolver<TSource, TContext, TArgs = Record<string, any>, TReturn = any> = IFieldResolver<\n  TSource,\n  TContext,\n  TArgs,\n  TReturn\n>;\n\nexport type IResolvers<TSource = any, TContext = any, TArgs = Record<string, any>, TReturn = any> = Record<\n  string,\n  | ISchemaLevelResolver<TSource, TContext, TArgs, TReturn>\n  | IObjectTypeResolver<TSource, TContext>\n  | IInterfaceTypeResolver<TSource, TContext>\n  | IUnionTypeResolver\n  | IScalarTypeResolver\n  | IEnumTypeResolver\n  | IInputObjectTypeResolver\n>;\n\nexport type IFieldIteratorFn = (fieldDef: GraphQLField<any, any>, typeName: string, fieldName: string) => void;\n\nexport type IDefaultValueIteratorFn = (type: GraphQLInputType, value: any) => void;\n\nexport type NextResolverFn = () => Promise<any>;\n\nexport type DirectiveResolverFn<TSource = any, TContext = any> = (\n  next: NextResolverFn,\n  source: TSource,\n  args: { [argName: string]: any },\n  context: TContext,\n  info: GraphQLResolveInfo\n) => any;\n\nexport interface IDirectiveResolvers<TSource = any, TContext = any> {\n  [directiveName: string]: DirectiveResolverFn<TSource, TContext>;\n}\n\nexport interface Request {\n  document: DocumentNode;\n  variables: Record<string, any>;\n  extensions?: Record<string, any>;\n}\n\nexport type VisitableSchemaType =\n  | GraphQLSchema\n  | GraphQLObjectType\n  | GraphQLInterfaceType\n  | GraphQLInputObjectType\n  | GraphQLNamedType\n  | GraphQLScalarType\n  | GraphQLField<any, any>\n  | GraphQLInputField\n  | GraphQLArgument\n  | GraphQLUnionType\n  | GraphQLEnumType\n  | GraphQLEnumValue;\n\nexport type VisitorSelector = (\n  type: VisitableSchemaType,\n  methodName: string\n) => Array<SchemaVisitor | SchemaVisitorMap>;\n\nexport enum VisitSchemaKind {\n  TYPE = 'VisitSchemaKind.TYPE',\n  SCALAR_TYPE = 'VisitSchemaKind.SCALAR_TYPE',\n  ENUM_TYPE = 'VisitSchemaKind.ENUM_TYPE',\n  COMPOSITE_TYPE = 'VisitSchemaKind.COMPOSITE_TYPE',\n  OBJECT_TYPE = 'VisitSchemaKind.OBJECT_TYPE',\n  INPUT_OBJECT_TYPE = 'VisitSchemaKind.INPUT_OBJECT_TYPE',\n  ABSTRACT_TYPE = 'VisitSchemaKind.ABSTRACT_TYPE',\n  UNION_TYPE = 'VisitSchemaKind.UNION_TYPE',\n  INTERFACE_TYPE = 'VisitSchemaKind.INTERFACE_TYPE',\n  ROOT_OBJECT = 'VisitSchemaKind.ROOT_OBJECT',\n  QUERY = 'VisitSchemaKind.QUERY',\n  MUTATION = 'VisitSchemaKind.MUTATION',\n  SUBSCRIPTION = 'VisitSchemaKind.SUBSCRIPTION',\n}\n\nexport interface SchemaVisitorMap {\n  [VisitSchemaKind.TYPE]?: NamedTypeVisitor;\n  [VisitSchemaKind.SCALAR_TYPE]?: ScalarTypeVisitor;\n  [VisitSchemaKind.ENUM_TYPE]?: EnumTypeVisitor;\n  [VisitSchemaKind.COMPOSITE_TYPE]?: CompositeTypeVisitor;\n  [VisitSchemaKind.OBJECT_TYPE]?: ObjectTypeVisitor;\n  [VisitSchemaKind.INPUT_OBJECT_TYPE]?: InputObjectTypeVisitor;\n  [VisitSchemaKind.ABSTRACT_TYPE]?: AbstractTypeVisitor;\n  [VisitSchemaKind.UNION_TYPE]?: UnionTypeVisitor;\n  [VisitSchemaKind.INTERFACE_TYPE]?: InterfaceTypeVisitor;\n  [VisitSchemaKind.ROOT_OBJECT]?: ObjectTypeVisitor;\n  [VisitSchemaKind.QUERY]?: ObjectTypeVisitor;\n  [VisitSchemaKind.MUTATION]?: ObjectTypeVisitor;\n  [VisitSchemaKind.SUBSCRIPTION]?: ObjectTypeVisitor;\n}\n\nexport type NamedTypeVisitor = (type: GraphQLNamedType, schema: GraphQLSchema) => GraphQLNamedType | null | undefined;\n\nexport type ScalarTypeVisitor = (\n  type: GraphQLScalarType,\n  schema: GraphQLSchema\n) => GraphQLScalarType | null | undefined;\n\nexport type EnumTypeVisitor = (type: GraphQLEnumType, schema: GraphQLSchema) => GraphQLEnumType | null | undefined;\n\nexport type CompositeTypeVisitor = (\n  type: GraphQLObjectType | GraphQLInterfaceType | GraphQLUnionType,\n  schema: GraphQLSchema\n) => GraphQLObjectType | GraphQLInterfaceType | GraphQLUnionType | null | undefined;\n\nexport type ObjectTypeVisitor = (\n  type: GraphQLObjectType,\n  schema: GraphQLSchema\n) => GraphQLObjectType | null | undefined;\n\nexport type InputObjectTypeVisitor = (\n  type: GraphQLInputObjectType,\n  schema: GraphQLSchema\n) => GraphQLInputObjectType | null | undefined;\n\nexport type AbstractTypeVisitor = (\n  type: GraphQLInterfaceType | GraphQLUnionType,\n  schema: GraphQLSchema\n) => GraphQLInterfaceType | GraphQLUnionType | null | undefined;\n\nexport type UnionTypeVisitor = (type: GraphQLUnionType, schema: GraphQLSchema) => GraphQLUnionType | null | undefined;\n\nexport type InterfaceTypeVisitor = (\n  type: GraphQLInterfaceType,\n  schema: GraphQLSchema\n) => GraphQLInterfaceType | null | undefined;\n\nexport enum MapperKind {\n  TYPE = 'MapperKind.TYPE',\n  SCALAR_TYPE = 'MapperKind.SCALAR_TYPE',\n  ENUM_TYPE = 'MapperKind.ENUM_TYPE',\n  COMPOSITE_TYPE = 'MapperKind.COMPOSITE_TYPE',\n  OBJECT_TYPE = 'MapperKind.OBJECT_TYPE',\n  INPUT_OBJECT_TYPE = 'MapperKind.INPUT_OBJECT_TYPE',\n  ABSTRACT_TYPE = 'MapperKind.ABSTRACT_TYPE',\n  UNION_TYPE = 'MapperKind.UNION_TYPE',\n  INTERFACE_TYPE = 'MapperKind.INTERFACE_TYPE',\n  ROOT_OBJECT = 'MapperKind.ROOT_OBJECT',\n  QUERY = 'MapperKind.QUERY',\n  MUTATION = 'MapperKind.MUTATION',\n  SUBSCRIPTION = 'MapperKind.SUBSCRIPTION',\n  DIRECTIVE = 'MapperKind.DIRECTIVE',\n  FIELD = 'MapperKind.FIELD',\n  COMPOSITE_FIELD = 'MapperKind.COMPOSITE_FIELD',\n  OBJECT_FIELD = 'MapperKind.OBJECT_FIELD',\n  ROOT_FIELD = 'MapperKind.ROOT_FIELD',\n  QUERY_ROOT_FIELD = 'MapperKind.QUERY_ROOT_FIELD',\n  MUTATION_ROOT_FIELD = 'MapperKind.MUTATION_ROOT_FIELD',\n  SUBSCRIPTION_ROOT_FIELD = 'MapperKind.SUBSCRIPTION_ROOT_FIELD',\n  INTERFACE_FIELD = 'MapperKind.INTERFACE_FIELD',\n  INPUT_OBJECT_FIELD = 'MapperKind.INPUT_OBJECT_FIELD',\n  ARGUMENT = 'MapperKind.ARGUMENT',\n  ENUM_VALUE = 'MapperKind.ENUM_VALUE',\n}\n\nexport interface SchemaMapper {\n  [MapperKind.TYPE]?: NamedTypeMapper;\n  [MapperKind.SCALAR_TYPE]?: ScalarTypeMapper;\n  [MapperKind.ENUM_TYPE]?: EnumTypeMapper;\n  [MapperKind.COMPOSITE_TYPE]?: CompositeTypeMapper;\n  [MapperKind.OBJECT_TYPE]?: ObjectTypeMapper;\n  [MapperKind.INPUT_OBJECT_TYPE]?: InputObjectTypeMapper;\n  [MapperKind.ABSTRACT_TYPE]?: AbstractTypeMapper;\n  [MapperKind.UNION_TYPE]?: UnionTypeMapper;\n  [MapperKind.INTERFACE_TYPE]?: InterfaceTypeMapper;\n  [MapperKind.ROOT_OBJECT]?: ObjectTypeMapper;\n  [MapperKind.QUERY]?: ObjectTypeMapper;\n  [MapperKind.MUTATION]?: ObjectTypeMapper;\n  [MapperKind.SUBSCRIPTION]?: ObjectTypeMapper;\n  [MapperKind.ENUM_VALUE]?: EnumValueMapper;\n  [MapperKind.FIELD]?: GenericFieldMapper<GraphQLFieldConfig<any, any> | GraphQLInputFieldConfig>;\n  [MapperKind.OBJECT_FIELD]?: FieldMapper;\n  [MapperKind.ROOT_FIELD]?: FieldMapper;\n  [MapperKind.QUERY_ROOT_FIELD]?: FieldMapper;\n  [MapperKind.MUTATION_ROOT_FIELD]?: FieldMapper;\n  [MapperKind.SUBSCRIPTION_ROOT_FIELD]?: FieldMapper;\n  [MapperKind.INTERFACE_FIELD]?: FieldMapper;\n  [MapperKind.COMPOSITE_FIELD]?: FieldMapper;\n  [MapperKind.ARGUMENT]?: ArgumentMapper;\n  [MapperKind.INPUT_OBJECT_FIELD]?: InputFieldMapper;\n  [MapperKind.DIRECTIVE]?: DirectiveMapper;\n}\n\nexport type NamedTypeMapper = (type: GraphQLNamedType, schema: GraphQLSchema) => GraphQLNamedType | null | undefined;\n\nexport type ScalarTypeMapper = (type: GraphQLScalarType, schema: GraphQLSchema) => GraphQLScalarType | null | undefined;\n\nexport type EnumTypeMapper = (type: GraphQLEnumType, schema: GraphQLSchema) => GraphQLEnumType | null | undefined;\n\nexport type EnumValueMapper = (\n  valueConfig: GraphQLEnumValueConfig,\n  typeName: string,\n  schema: GraphQLSchema,\n  externalValue: string\n) => GraphQLEnumValueConfig | [string, GraphQLEnumValueConfig] | null | undefined;\n\nexport type CompositeTypeMapper = (\n  type: GraphQLObjectType | GraphQLInterfaceType | GraphQLUnionType,\n  schema: GraphQLSchema\n) => GraphQLObjectType | GraphQLInterfaceType | GraphQLUnionType | null | undefined;\n\nexport type ObjectTypeMapper = (type: GraphQLObjectType, schema: GraphQLSchema) => GraphQLObjectType | null | undefined;\n\nexport type InputObjectTypeMapper = (\n  type: GraphQLInputObjectType,\n  schema: GraphQLSchema\n) => GraphQLInputObjectType | null | undefined;\n\nexport type AbstractTypeMapper = (\n  type: GraphQLInterfaceType | GraphQLUnionType,\n  schema: GraphQLSchema\n) => GraphQLInterfaceType | GraphQLUnionType | null | undefined;\n\nexport type UnionTypeMapper = (type: GraphQLUnionType, schema: GraphQLSchema) => GraphQLUnionType | null | undefined;\n\nexport type InterfaceTypeMapper = (\n  type: GraphQLInterfaceType,\n  schema: GraphQLSchema\n) => GraphQLInterfaceType | null | undefined;\n\nexport type DirectiveMapper = (\n  directive: GraphQLDirective,\n  schema: GraphQLSchema\n) => GraphQLDirective | null | undefined;\n\nexport type GenericFieldMapper<F extends GraphQLFieldConfig<any, any> | GraphQLInputFieldConfig> = (\n  fieldConfig: F,\n  fieldName: string,\n  typeName: string,\n  schema: GraphQLSchema\n) => F | [string, F] | null | undefined;\n\nexport type FieldMapper = GenericFieldMapper<GraphQLFieldConfig<any, any>>;\n\nexport type ArgumentMapper = (\n  argumentConfig: GraphQLArgumentConfig,\n  fieldName: string,\n  typeName: string,\n  schema: GraphQLSchema\n) => GraphQLArgumentConfig | [string, GraphQLArgumentConfig] | null | undefined;\n\nexport type InputFieldMapper = GenericFieldMapper<GraphQLInputFieldConfig>;\n"],"version":3}