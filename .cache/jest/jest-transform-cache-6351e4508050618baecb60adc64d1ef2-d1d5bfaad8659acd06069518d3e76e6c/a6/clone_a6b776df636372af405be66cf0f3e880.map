{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/clone.ts","mappings":";;;AAAA,qCAkBiB;AAEjB,2CAAwC;AAExC,SAAgB,cAAc,CAAC,SAA2B;IACxD,OAAO,8BAAoB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,0BAAgB,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;AAClG,CAAC;AAFD,wCAEC;AAED,SAAgB,SAAS,CAAC,IAAsB;IAC9C,IAAI,sBAAY,CAAC,IAAI,CAAC,EAAE;QACtB,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC/B,OAAO,IAAI,2BAAiB,CAAC;YAC3B,GAAG,MAAM;YACT,UAAU,EAAE,OAAO,MAAM,CAAC,UAAU,KAAK,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE;SACpG,CAAC,CAAC;KACJ;SAAM,IAAI,yBAAe,CAAC,IAAI,CAAC,EAAE;QAChC,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,EAAS,CAAC;QACtC,MAAM,SAAS,GAAG;YAChB,GAAG,MAAM;YACT,UAAU,EAAE,CAAC,GAAG,CAAC,CAAC,OAAO,MAAM,CAAC,UAAU,KAAK,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;SAC7G,CAAC;QACF,OAAO,IAAI,8BAAoB,CAAC,SAAS,CAAC,CAAC;KAC5C;SAAM,IAAI,qBAAW,CAAC,IAAI,CAAC,EAAE;QAC5B,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC/B,OAAO,IAAI,0BAAgB,CAAC;YAC1B,GAAG,MAAM;YACT,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE;SAC5B,CAAC,CAAC;KACJ;SAAM,IAAI,2BAAiB,CAAC,IAAI,CAAC,EAAE;QAClC,OAAO,IAAI,gCAAsB,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;KACpD;SAAM,IAAI,oBAAU,CAAC,IAAI,CAAC,EAAE;QAC3B,OAAO,IAAI,yBAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC7C;SAAM,IAAI,sBAAY,CAAC,IAAI,CAAC,EAAE;QAC7B,OAAO,+BAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,2BAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;KACpF;IAED,MAAM,IAAI,KAAK,CAAC,gBAAgB,IAAc,EAAE,CAAC,CAAC;AACpD,CAAC;AA7BD,8BA6BC;AAED,SAAgB,WAAW,CAAC,MAAqB;IAC/C,OAAO,qBAAS,CAAC,MAAM,CAAC,CAAC;AAC3B,CAAC;AAFD,kCAEC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/clone.ts"],"sourcesContent":["import {\n  GraphQLDirective,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLObjectType,\n  GraphQLNamedType,\n  GraphQLScalarType,\n  GraphQLSchema,\n  GraphQLUnionType,\n  isObjectType,\n  isInterfaceType,\n  isUnionType,\n  isInputObjectType,\n  isEnumType,\n  isScalarType,\n  isSpecifiedScalarType,\n  isSpecifiedDirective,\n} from 'graphql';\n\nimport { mapSchema } from './mapSchema';\n\nexport function cloneDirective(directive: GraphQLDirective): GraphQLDirective {\n  return isSpecifiedDirective(directive) ? directive : new GraphQLDirective(directive.toConfig());\n}\n\nexport function cloneType(type: GraphQLNamedType): GraphQLNamedType {\n  if (isObjectType(type)) {\n    const config = type.toConfig();\n    return new GraphQLObjectType({\n      ...config,\n      interfaces: typeof config.interfaces === 'function' ? config.interfaces : config.interfaces.slice(),\n    });\n  } else if (isInterfaceType(type)) {\n    const config = type.toConfig() as any;\n    const newConfig = {\n      ...config,\n      interfaces: [...((typeof config.interfaces === 'function' ? config.interfaces() : config.interfaces) || [])],\n    };\n    return new GraphQLInterfaceType(newConfig);\n  } else if (isUnionType(type)) {\n    const config = type.toConfig();\n    return new GraphQLUnionType({\n      ...config,\n      types: config.types.slice(),\n    });\n  } else if (isInputObjectType(type)) {\n    return new GraphQLInputObjectType(type.toConfig());\n  } else if (isEnumType(type)) {\n    return new GraphQLEnumType(type.toConfig());\n  } else if (isScalarType(type)) {\n    return isSpecifiedScalarType(type) ? type : new GraphQLScalarType(type.toConfig());\n  }\n\n  throw new Error(`Invalid type ${type as string}`);\n}\n\nexport function cloneSchema(schema: GraphQLSchema): GraphQLSchema {\n  return mapSchema(schema);\n}\n"],"version":3}