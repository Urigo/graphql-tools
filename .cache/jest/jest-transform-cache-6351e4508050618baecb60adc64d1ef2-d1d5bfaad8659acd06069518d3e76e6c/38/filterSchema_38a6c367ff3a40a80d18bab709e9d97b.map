{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/filterSchema.ts","mappings":"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","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/filterSchema.ts"],"sourcesContent":["import {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLObjectType,\n  GraphQLScalarType,\n  GraphQLUnionType,\n  GraphQLSchema,\n} from 'graphql';\n\nimport { MapperKind, FieldFilter, RootFieldFilter, TypeFilter, ArgumentFilter } from './Interfaces';\n\nimport { mapSchema } from './mapSchema';\n\nimport { Constructor } from './types';\n\nexport function filterSchema({\n  schema,\n  typeFilter = () => true,\n  fieldFilter = undefined,\n  rootFieldFilter = undefined,\n  objectFieldFilter = undefined,\n  interfaceFieldFilter = undefined,\n  inputObjectFieldFilter = undefined,\n  argumentFilter = undefined,\n}: {\n  schema: GraphQLSchema;\n  rootFieldFilter?: RootFieldFilter;\n  typeFilter?: TypeFilter;\n  fieldFilter?: FieldFilter;\n  objectFieldFilter?: FieldFilter;\n  interfaceFieldFilter?: FieldFilter;\n  inputObjectFieldFilter?: FieldFilter;\n  argumentFilter?: ArgumentFilter;\n}): GraphQLSchema {\n  const filteredSchema: GraphQLSchema = mapSchema(schema, {\n    [MapperKind.QUERY]: (type: GraphQLObjectType) => filterRootFields(type, 'Query', rootFieldFilter, argumentFilter),\n    [MapperKind.MUTATION]: (type: GraphQLObjectType) =>\n      filterRootFields(type, 'Mutation', rootFieldFilter, argumentFilter),\n    [MapperKind.SUBSCRIPTION]: (type: GraphQLObjectType) =>\n      filterRootFields(type, 'Subscription', rootFieldFilter, argumentFilter),\n    [MapperKind.OBJECT_TYPE]: (type: GraphQLObjectType) =>\n      typeFilter(type.name, type)\n        ? filterElementFields<GraphQLObjectType>(\n            GraphQLObjectType,\n            type,\n            objectFieldFilter || fieldFilter,\n            argumentFilter\n          )\n        : null,\n    [MapperKind.INTERFACE_TYPE]: (type: GraphQLInterfaceType) =>\n      typeFilter(type.name, type)\n        ? filterElementFields<GraphQLInterfaceType>(\n            GraphQLInterfaceType,\n            type,\n            interfaceFieldFilter || fieldFilter,\n            argumentFilter\n          )\n        : null,\n    [MapperKind.INPUT_OBJECT_TYPE]: (type: GraphQLInputObjectType) =>\n      typeFilter(type.name, type)\n        ? filterElementFields<GraphQLInputObjectType>(\n            GraphQLInputObjectType,\n            type,\n            inputObjectFieldFilter || fieldFilter\n          )\n        : null,\n    [MapperKind.UNION_TYPE]: (type: GraphQLUnionType) => (typeFilter(type.name, type) ? undefined : null),\n    [MapperKind.ENUM_TYPE]: (type: GraphQLEnumType) => (typeFilter(type.name, type) ? undefined : null),\n    [MapperKind.SCALAR_TYPE]: (type: GraphQLScalarType) => (typeFilter(type.name, type) ? undefined : null),\n  });\n\n  return filteredSchema;\n}\n\nfunction filterRootFields(\n  type: GraphQLObjectType,\n  operation: 'Query' | 'Mutation' | 'Subscription',\n  rootFieldFilter?: RootFieldFilter,\n  argumentFilter?: ArgumentFilter\n): GraphQLObjectType {\n  if (rootFieldFilter || argumentFilter) {\n    const config = type.toConfig();\n    Object.entries(config.fields).forEach(([fieldName, field]) => {\n      if (rootFieldFilter && !rootFieldFilter(operation, fieldName, config.fields[fieldName])) {\n        delete config.fields[fieldName];\n      } else if (argumentFilter) {\n        for (const argName of Object.keys(field.args)) {\n          if (!argumentFilter(operation, fieldName, argName, field.args[argName])) {\n            delete field.args[argName];\n          }\n        }\n      }\n    });\n    return new GraphQLObjectType(config);\n  }\n  return type;\n}\n\nfunction filterElementFields<ElementType>(\n  ElementConstructor: Constructor<ElementType>,\n  type: GraphQLObjectType | GraphQLInterfaceType | GraphQLInputObjectType,\n  fieldFilter?: FieldFilter,\n  argumentFilter?: ArgumentFilter\n): ElementType | undefined {\n  if (fieldFilter || argumentFilter) {\n    const config = type.toConfig();\n    Object.entries(config.fields).forEach(([fieldName, field]) => {\n      if (fieldFilter && !fieldFilter(type.name, fieldName, config.fields[fieldName])) {\n        delete config.fields[fieldName];\n      } else if (argumentFilter && 'args' in field) {\n        for (const argName of Object.keys(field.args)) {\n          if (!argumentFilter(type.name, fieldName, argName, field.args[argName])) {\n            delete field.args[argName];\n          }\n        }\n      }\n    });\n    return new ElementConstructor(config);\n  }\n}\n"],"version":3}