{"file":"/home/ardat_000/Guild/graphql-tools/packages/mock/src/MockList.ts","mappings":";;;AAAA;;GAEG;AACH,SAAgB,UAAU,CAAC,GAAQ;IACjC,IAAI,OAAO,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,GAAG,CAAA,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,GAAG,CAAC,IAAI,OAAO,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,GAAG,CAAC,CAAC,CAAC,CAAA,KAAK,QAAQ,CAAC,EAAE;QAChG,IAAI,OAAO,GAAG,CAAC,eAAe,KAAK,WAAW,IAAI,OAAO,GAAG,CAAC,eAAe,KAAK,UAAU,EAAE;YAC3F,OAAO,IAAI,CAAC;SACb;KACF;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AARD,gCAQC;AAED;;;GAGG;AACH,MAAa,QAAQ;IAInB;;;;;OAKG;IACH,YAAY,MAA8B,EAAE,YAA4B;QACtE,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC;QAClB,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;YACvC,IAAI,OAAO,YAAY,KAAK,UAAU,EAAE;gBACtC,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;aAChF;YACD,IAAI,CAAC,eAAe,GAAG,YAAY,CAAC;SACrC;IACH,CAAC;IAED;;OAEG;IACI,IAAI;QACT,IAAI,GAAmB,CAAC;QACxB,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YAC3B,GAAG,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACzD;aAAM;YACL,GAAG,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAC3B;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,OAAO,IAAI,CAAC,eAAe,KAAK,UAAU,EAAE;gBAC9C,MAAM,GAAG,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;gBACnC,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;oBACnB,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;iBACrB;qBAAM;oBACL,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;iBACd;aACF;iBAAM;gBACL,GAAG,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;aACpB;SACF;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAEO,OAAO,CAAC,GAAW,EAAE,IAAY;QACvC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;IAC5D,CAAC;CACF;AAjDD,4BAiDC;AAED,SAAgB,mBAAmB,CAAC,QAAkB;IACpD,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;QAC7B,IAAI,UAAU,CAAC,CAAC,CAAC;YAAE,OAAO,mBAAmB,CAAC,CAAC,CAAC,CAAC;QACjD,OAAO,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;AACL,CAAC;AALD,kDAKC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/mock/src/MockList.ts"],"sourcesContent":["/**\n * @internal\n */\nexport function isMockList(obj: any): obj is MockList {\n  if (typeof obj?.len === 'number' || (Array.isArray(obj?.len) && typeof obj?.len[0] === 'number')) {\n    if (typeof obj.wrappedFunction === 'undefined' || typeof obj.wrappedFunction === 'function') {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * This is an object you can return from your mock resolvers which calls the\n * provided `mockFunction` once for each list item.\n */\nexport class MockList {\n  private readonly len: number | Array<number>;\n  private readonly wrappedFunction: () => unknown;\n\n  /**\n   * @param length Either the exact length of items to return or an inclusive\n   * range of possible lengths.\n   * @param mockFunction The function to call for each item in the list to\n   * resolve it. It can return another MockList or a value.\n   */\n  constructor(length: number | Array<number>, mockFunction?: () => unknown) {\n    this.len = length;\n    if (typeof mockFunction !== 'undefined') {\n      if (typeof mockFunction !== 'function') {\n        throw new Error('Second argument to MockList must be a function or undefined');\n      }\n      this.wrappedFunction = mockFunction;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  public mock() {\n    let arr: Array<unknown>;\n    if (Array.isArray(this.len)) {\n      arr = new Array(this.randint(this.len[0], this.len[1]));\n    } else {\n      arr = new Array(this.len);\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n      if (typeof this.wrappedFunction === 'function') {\n        const res = this.wrappedFunction();\n        if (isMockList(res)) {\n          arr[i] = res.mock();\n        } else {\n          arr[i] = res;\n        }\n      } else {\n        arr[i] = undefined;\n      }\n    }\n    return arr;\n  }\n\n  private randint(low: number, high: number): number {\n    return Math.floor(Math.random() * (high - low + 1) + low);\n  }\n}\n\nexport function deepResolveMockList(mockList: MockList): unknown[] {\n  return mockList.mock().map(v => {\n    if (isMockList(v)) return deepResolveMockList(v);\n    return v;\n  });\n}\n"],"version":3}