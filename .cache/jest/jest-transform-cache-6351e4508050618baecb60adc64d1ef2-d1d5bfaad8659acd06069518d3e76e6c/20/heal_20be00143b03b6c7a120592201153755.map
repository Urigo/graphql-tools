{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/heal.ts","mappings":";;;AAAA,qCAqBiB;AAIjB,2EAA2E;AAC3E,sCAAsC;AACtC,EAAE;AACF,iGAAiG;AACjG,iGAAiG;AACjG,mBAAmB;AACnB,EAAE;AACF,kFAAkF;AAClF,EAAE;AACF,sBAAsB;AACtB,mCAAmC;AACnC,2CAA2C;AAC3C,eAAe;AACf,iEAAiE;AACjE,uEAAuE;AACvE,+EAA+E;AAC/E,MAAM;AACN,EAAE;AACF,mGAAmG;AACnG,cAAc;AACd,uCAAuC;AACvC,EAAE;AACF,qGAAqG;AACrG,2DAA2D;AAC3D,EAAE;AACF,iGAAiG;AACjG,gFAAgF;AAChF,EAAE;AACF,SAAgB,UAAU,CAAC,MAAqB;IAC9C,SAAS,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC;IACvD,OAAO,MAAM,CAAC;AAChB,CAAC;AAHD,gCAGC;AAED,SAAgB,SAAS,CACvB,eAAwD,EACxD,UAA2C;IAE3C,MAAM,kBAAkB,GAAY,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAExD,oEAAoE;IACpE,qEAAqE;IACrE,0BAA0B;IAE1B,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,EAAE,SAAS,CAAC,EAAE,EAAE;QAChE,IAAI,SAAS,IAAI,IAAI,IAAI,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YAClD,OAAO;SACR;QAED,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC;QAClC,IAAI,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YAC/B,OAAO;SACR;QAED,IAAI,UAAU,IAAI,kBAAkB,EAAE;YACpC,MAAM,IAAI,KAAK,CAAC,8BAA8B,UAAU,EAAE,CAAC,CAAC;SAC7D;QAED,kBAAkB,CAAC,UAAU,CAAC,GAAG,SAAS,CAAC;QAE3C,mEAAmE;QACnE,oEAAoE;QACpE,yCAAyC;IAC3C,CAAC,CAAC,CAAC;IAEH,oDAAoD;IACpD,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,EAAE,SAAS,CAAC,EAAE,EAAE;QACnE,eAAe,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,iEAAiE;IACjE,UAAU,CAAC,OAAO,CAAC,CAAC,IAAsB,EAAE,EAAE;QAC5C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YACjC,GAAG,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAqB,CAAC;YAClD,OAAO,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,EAAE,SAAS,CAAC,EAAE,EAAE;QAChE,+EAA+E;QAC/E,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,QAAQ,IAAI,kBAAkB,EAAE;YAChE,IAAI,SAAS,IAAI,IAAI,EAAE;gBACrB,aAAa,CAAC,SAAS,CAAC,CAAC;aAC1B;SACF;IACH,CAAC,CAAC,CAAC;IAEH,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;QACnD,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,IAAI,kBAAkB,CAAC,EAAE;YACnE,OAAO,eAAe,CAAC,QAAQ,CAAC,CAAC;SAClC;KACF;IAED,SAAS,aAAa,CAAC,IAAsB;QAC3C,IAAI,sBAAY,CAAC,IAAI,CAAC,EAAE;YACtB,UAAU,CAAC,IAAI,CAAC,CAAC;YACjB,cAAc,CAAC,IAAI,CAAC,CAAC;YACrB,OAAO;SACR;aAAM,IAAI,yBAAe,CAAC,IAAI,CAAC,EAAE;YAChC,UAAU,CAAC,IAAI,CAAC,CAAC;YACjB,IAAI,eAAe,IAAI,IAAI,EAAE;gBAC3B,cAAc,CAAC,IAAI,CAAC,CAAC;aACtB;YACD,OAAO;SACR;aAAM,IAAI,qBAAW,CAAC,IAAI,CAAC,EAAE;YAC5B,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAC1B,OAAO;SACR;aAAM,IAAI,2BAAiB,CAAC,IAAI,CAAC,EAAE;YAClC,eAAe,CAAC,IAAI,CAAC,CAAC;YACtB,OAAO;SACR;aAAM,IAAI,oBAAU,CAAC,IAAI,CAAC,EAAE;YAC3B,OAAO;SACR;QAED,MAAM,IAAI,KAAK,CAAC,2BAA2B,IAAc,EAAE,CAAC,CAAC;IAC/D,CAAC;IAED,SAAS,UAAU,CAAC,IAA8C;QAChE,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAClC,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACnD,KAAK,CAAC,IAAI;iBACP,GAAG,CAAC,GAAG,CAAC,EAAE;gBACT,GAAG,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAqB,CAAC;gBAClD,OAAO,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;YACxC,CAAC,CAAC;iBACD,MAAM,CAAC,OAAO,CAAC,CAAC;YACnB,KAAK,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAsB,CAAC;YACvD,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,EAAE;gBACvB,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;aACtB;SACF;IACH,CAAC;IAED,SAAS,cAAc,CAAC,IAA8C;QACpE,IAAI,eAAe,IAAI,IAAI,EAAE;YAC3B,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YACxC,UAAU,CAAC,IAAI,CACb,GAAG,UAAU;iBACV,MAAM,CAAC,CAAC,CAAC;iBACT,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAQ,CAAC;iBACpC,MAAM,CAAC,OAAO,CAAC,CACnB,CAAC;SACH;IACH,CAAC;IAED,SAAS,eAAe,CAAC,IAA4B;QACnD,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAClC,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACnD,KAAK,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAqB,CAAC;YACtD,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,EAAE;gBACvB,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;aACtB;SACF;IACH,CAAC;IAED,SAAS,mBAAmB,CAAC,IAAsB;QACjD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,KAAK,CAAC,IAAI,CACR,GAAG,KAAK;aACL,MAAM,CAAC,CAAC,CAAC;aACT,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAQ,CAAC;aAC5B,MAAM,CAAC,OAAO,CAAC,CACnB,CAAC;IACJ,CAAC;IAED,SAAS,QAAQ,CAAwB,IAAO;QAC9C,qCAAqC;QACrC,IAAI,oBAAU,CAAC,IAAI,CAAC,EAAE;YACpB,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzC,OAAO,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,qBAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;SAChE;aAAM,IAAI,uBAAa,CAAC,IAAI,CAAC,EAAE;YAC9B,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzC,OAAO,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,wBAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;SACnE;aAAM,IAAI,qBAAW,CAAC,IAAI,CAAC,EAAE;YAC5B,sEAAsE;YACtE,sEAAsE;YACtE,uEAAuE;YACvE,uCAAuC;YACvC,sEAAsE;YACtE,iDAAiD;YACjD,MAAM,YAAY,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,YAAY,IAAI,IAAI,KAAK,YAAY,EAAE;gBACzC,OAAO,YAAiB,CAAC;aAC1B;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC;AAzJD,8BAyJC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/heal.ts"],"sourcesContent":["import {\n  GraphQLDirective,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLNamedType,\n  GraphQLNonNull,\n  GraphQLType,\n  GraphQLUnionType,\n  isNamedType,\n  GraphQLSchema,\n  GraphQLInputType,\n  GraphQLOutputType,\n  isObjectType,\n  isInterfaceType,\n  isUnionType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from 'graphql';\n\nimport { TypeMap } from './Interfaces';\n\n// Update any references to named schema types that disagree with the named\n// types found in schema.getTypeMap().\n//\n// healSchema and its callers (visitSchema/visitSchemaDirectives) all modify the schema in place.\n// Therefore, private variables (such as the stored implementation map and the proper root types)\n// are not updated.\n//\n// If this causes issues, the schema could be more aggressively healed as follows:\n//\n// healSchema(schema);\n// const config = schema.toConfig()\n// const healedSchema = new GraphQLSchema({\n//   ...config,\n//   query: schema.getType('<desired new root query type name>'),\n//   mutation: schema.getType('<desired new root mutation type name>'),\n//   subscription: schema.getType('<desired new root subscription type name>'),\n// });\n//\n// One can then also -- if necessary --  assign the correct private variables to the initial schema\n// as follows:\n// Object.assign(schema, healedSchema);\n//\n// These steps are not taken automatically to preserve backwards compatibility with graphql-tools v4.\n// See https://github.com/ardatan/graphql-tools/issues/1462\n//\n// They were briefly taken in v5, but can now be phased out as they were only required when other\n// areas of the codebase were using healSchema and visitSchema more extensively.\n//\nexport function healSchema(schema: GraphQLSchema): GraphQLSchema {\n  healTypes(schema.getTypeMap(), schema.getDirectives());\n  return schema;\n}\n\nexport function healTypes(\n  originalTypeMap: Record<string, GraphQLNamedType | null>,\n  directives: ReadonlyArray<GraphQLDirective>\n) {\n  const actualNamedTypeMap: TypeMap = Object.create(null);\n\n  // If any of the .name properties of the GraphQLNamedType objects in\n  // schema.getTypeMap() have changed, the keys of the type map need to\n  // be updated accordingly.\n\n  Object.entries(originalTypeMap).forEach(([typeName, namedType]) => {\n    if (namedType == null || typeName.startsWith('__')) {\n      return;\n    }\n\n    const actualName = namedType.name;\n    if (actualName.startsWith('__')) {\n      return;\n    }\n\n    if (actualName in actualNamedTypeMap) {\n      throw new Error(`Duplicate schema type name ${actualName}`);\n    }\n\n    actualNamedTypeMap[actualName] = namedType;\n\n    // Note: we are deliberately leaving namedType in the schema by its\n    // original name (which might be different from actualName), so that\n    // references by that name can be healed.\n  });\n\n  // Now add back every named type by its actual name.\n  Object.entries(actualNamedTypeMap).forEach(([typeName, namedType]) => {\n    originalTypeMap[typeName] = namedType;\n  });\n\n  // Directive declaration argument types can refer to named types.\n  directives.forEach((decl: GraphQLDirective) => {\n    decl.args = decl.args.filter(arg => {\n      arg.type = healType(arg.type) as GraphQLInputType;\n      return arg.type !== null;\n    });\n  });\n\n  Object.entries(originalTypeMap).forEach(([typeName, namedType]) => {\n    // Heal all named types, except for dangling references, kept only to redirect.\n    if (!typeName.startsWith('__') && typeName in actualNamedTypeMap) {\n      if (namedType != null) {\n        healNamedType(namedType);\n      }\n    }\n  });\n\n  for (const typeName of Object.keys(originalTypeMap)) {\n    if (!typeName.startsWith('__') && !(typeName in actualNamedTypeMap)) {\n      delete originalTypeMap[typeName];\n    }\n  }\n\n  function healNamedType(type: GraphQLNamedType) {\n    if (isObjectType(type)) {\n      healFields(type);\n      healInterfaces(type);\n      return;\n    } else if (isInterfaceType(type)) {\n      healFields(type);\n      if ('getInterfaces' in type) {\n        healInterfaces(type);\n      }\n      return;\n    } else if (isUnionType(type)) {\n      healUnderlyingTypes(type);\n      return;\n    } else if (isInputObjectType(type)) {\n      healInputFields(type);\n      return;\n    } else if (isLeafType(type)) {\n      return;\n    }\n\n    throw new Error(`Unexpected schema type: ${type as string}`);\n  }\n\n  function healFields(type: GraphQLObjectType | GraphQLInterfaceType) {\n    const fieldMap = type.getFields();\n    for (const [key, field] of Object.entries(fieldMap)) {\n      field.args\n        .map(arg => {\n          arg.type = healType(arg.type) as GraphQLInputType;\n          return arg.type === null ? null : arg;\n        })\n        .filter(Boolean);\n      field.type = healType(field.type) as GraphQLOutputType;\n      if (field.type === null) {\n        delete fieldMap[key];\n      }\n    }\n  }\n\n  function healInterfaces(type: GraphQLObjectType | GraphQLInterfaceType) {\n    if ('getInterfaces' in type) {\n      const interfaces = type.getInterfaces();\n      interfaces.push(\n        ...interfaces\n          .splice(0)\n          .map(iface => healType(iface) as any)\n          .filter(Boolean)\n      );\n    }\n  }\n\n  function healInputFields(type: GraphQLInputObjectType) {\n    const fieldMap = type.getFields();\n    for (const [key, field] of Object.entries(fieldMap)) {\n      field.type = healType(field.type) as GraphQLInputType;\n      if (field.type === null) {\n        delete fieldMap[key];\n      }\n    }\n  }\n\n  function healUnderlyingTypes(type: GraphQLUnionType) {\n    const types = type.getTypes();\n    types.push(\n      ...types\n        .splice(0)\n        .map(t => healType(t) as any)\n        .filter(Boolean)\n    );\n  }\n\n  function healType<T extends GraphQLType>(type: T): GraphQLType | null {\n    // Unwrap the two known wrapper types\n    if (isListType(type)) {\n      const healedType = healType(type.ofType);\n      return healedType != null ? new GraphQLList(healedType) : null;\n    } else if (isNonNullType(type)) {\n      const healedType = healType(type.ofType);\n      return healedType != null ? new GraphQLNonNull(healedType) : null;\n    } else if (isNamedType(type)) {\n      // If a type annotation on a field or an argument or a union member is\n      // any `GraphQLNamedType` with a `name`, then it must end up identical\n      // to `schema.getType(name)`, since `schema.getTypeMap()` is the source\n      // of truth for all named schema types.\n      // Note that new types can still be simply added by adding a field, as\n      // the official type will be undefined, not null.\n      const officialType = originalTypeMap[type.name];\n      if (officialType && type !== officialType) {\n        return officialType as T;\n      }\n    }\n    return type;\n  }\n}\n"],"version":3}