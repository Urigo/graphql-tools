{"file":"/home/ardat_000/Guild/graphql-tools/packages/schema/src/buildSchemaFromTypeDefinitions.ts","mappings":";;;AAAA,qCAAoF;AAEpF,gDAA8G;AAE9G,iEAA8E;AAC9E,+DAA4D;AAE5D,SAAgB,8BAA8B,CAC5C,eAAiC,EACjC,YAAkC,EAClC,qBAA+B;IAE/B,MAAM,QAAQ,GAAG,gCAAgC,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;IAEjF,IAAI,qBAAqB,EAAE;QACzB,OAAO,wBAAc,CAAC,QAAQ,CAAC,CAAC;KACjC;IAED,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,2DAAoC,CAAC,QAAQ,CAAC,CAAC;IAEnF,MAAM,iBAAiB,GAAG,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC;IACxD,IAAI,MAAM,GAAkB,wBAAc,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;IAExE,IAAI,aAAa,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;QACxC,MAAM,GAAG,sBAAY,CAAC,MAAM,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;KACjE;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AArBD,wEAqBC;AAED,SAAgB,gCAAgC,CAC9C,eAAiC,EACjC,YAAkC;IAElC,IAAI,QAAsB,CAAC;IAC3B,IAAI,OAAO,eAAe,KAAK,QAAQ,EAAE;QACvC,QAAQ,GAAG,uBAAe,CAAC,EAAE,EAAE,eAAe,EAAE,YAAY,CAAC,CAAC,QAAQ,CAAC;KACxE;SAAM,IAAI,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;QACzC,QAAQ,GAAG,uBAAe,CAAC,EAAE,EAAE,yCAAmB,CAAC,eAAe,CAAC,EAAE,YAAY,CAAC,CAAC,QAAQ,CAAC;KAC7F;SAAM,IAAI,sBAAc,CAAC,eAAe,CAAC,EAAE;QAC1C,QAAQ,GAAG,eAAe,CAAC;KAC5B;SAAM;QACL,MAAM,IAAI,GAAG,OAAO,eAAe,CAAC;QACpC,MAAM,IAAI,KAAK,CAAC,uDAAuD,IAAI,EAAE,CAAC,CAAC;KAChF;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC;AAjBD,4EAiBC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/schema/src/buildSchemaFromTypeDefinitions.ts"],"sourcesContent":["import { extendSchema, buildASTSchema, GraphQLSchema, DocumentNode } from 'graphql';\n\nimport { ITypeDefinitions, GraphQLParseOptions, parseGraphQLSDL, isDocumentNode } from '@graphql-tools/utils';\n\nimport { filterAndExtractExtensionDefinitions } from './extensionDefinitions';\nimport { concatenateTypeDefs } from './concatenateTypeDefs';\n\nexport function buildSchemaFromTypeDefinitions(\n  typeDefinitions: ITypeDefinitions,\n  parseOptions?: GraphQLParseOptions,\n  noExtensionExtraction?: boolean\n): GraphQLSchema {\n  const document = buildDocumentFromTypeDefinitions(typeDefinitions, parseOptions);\n\n  if (noExtensionExtraction) {\n    return buildASTSchema(document);\n  }\n\n  const { typesAst, extensionsAst } = filterAndExtractExtensionDefinitions(document);\n\n  const backcompatOptions = { commentDescriptions: true };\n  let schema: GraphQLSchema = buildASTSchema(typesAst, backcompatOptions);\n\n  if (extensionsAst.definitions.length > 0) {\n    schema = extendSchema(schema, extensionsAst, backcompatOptions);\n  }\n\n  return schema;\n}\n\nexport function buildDocumentFromTypeDefinitions(\n  typeDefinitions: ITypeDefinitions,\n  parseOptions?: GraphQLParseOptions\n): DocumentNode {\n  let document: DocumentNode;\n  if (typeof typeDefinitions === 'string') {\n    document = parseGraphQLSDL('', typeDefinitions, parseOptions).document;\n  } else if (Array.isArray(typeDefinitions)) {\n    document = parseGraphQLSDL('', concatenateTypeDefs(typeDefinitions), parseOptions).document;\n  } else if (isDocumentNode(typeDefinitions)) {\n    document = typeDefinitions;\n  } else {\n    const type = typeof typeDefinitions;\n    throw new Error(`typeDefs must be a string, array or schema AST, got ${type}`);\n  }\n\n  return document;\n}\n"],"version":3}