e165e73205757c13d55dcee1ef01c981
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildDocumentFromTypeDefinitions = exports.buildSchemaFromTypeDefinitions = void 0;
const graphql_1 = require("graphql");
const utils_1 = require("@graphql-tools/utils");
const extensionDefinitions_1 = require("./extensionDefinitions");
const concatenateTypeDefs_1 = require("./concatenateTypeDefs");
function buildSchemaFromTypeDefinitions(typeDefinitions, parseOptions, noExtensionExtraction) {
    const document = buildDocumentFromTypeDefinitions(typeDefinitions, parseOptions);
    if (noExtensionExtraction) {
        return graphql_1.buildASTSchema(document);
    }
    const { typesAst, extensionsAst } = extensionDefinitions_1.filterAndExtractExtensionDefinitions(document);
    const backcompatOptions = { commentDescriptions: true };
    let schema = graphql_1.buildASTSchema(typesAst, backcompatOptions);
    if (extensionsAst.definitions.length > 0) {
        schema = graphql_1.extendSchema(schema, extensionsAst, backcompatOptions);
    }
    return schema;
}
exports.buildSchemaFromTypeDefinitions = buildSchemaFromTypeDefinitions;
function buildDocumentFromTypeDefinitions(typeDefinitions, parseOptions) {
    let document;
    if (typeof typeDefinitions === 'string') {
        document = utils_1.parseGraphQLSDL('', typeDefinitions, parseOptions).document;
    }
    else if (Array.isArray(typeDefinitions)) {
        document = utils_1.parseGraphQLSDL('', concatenateTypeDefs_1.concatenateTypeDefs(typeDefinitions), parseOptions).document;
    }
    else if (utils_1.isDocumentNode(typeDefinitions)) {
        document = typeDefinitions;
    }
    else {
        const type = typeof typeDefinitions;
        throw new Error(`typeDefs must be a string, array or schema AST, got ${type}`);
    }
    return document;
}
exports.buildDocumentFromTypeDefinitions = buildDocumentFromTypeDefinitions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJkYXRfMDAwL0d1aWxkL2dyYXBocWwtdG9vbHMvcGFja2FnZXMvc2NoZW1hL3NyYy9idWlsZFNjaGVtYUZyb21UeXBlRGVmaW5pdGlvbnMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQW9GO0FBRXBGLGdEQUE4RztBQUU5RyxpRUFBOEU7QUFDOUUsK0RBQTREO0FBRTVELFNBQWdCLDhCQUE4QixDQUM1QyxlQUFpQyxFQUNqQyxZQUFrQyxFQUNsQyxxQkFBK0I7SUFFL0IsTUFBTSxRQUFRLEdBQUcsZ0NBQWdDLENBQUMsZUFBZSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBRWpGLElBQUkscUJBQXFCLEVBQUU7UUFDekIsT0FBTyx3QkFBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ2pDO0lBRUQsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsR0FBRywyREFBb0MsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVuRixNQUFNLGlCQUFpQixHQUFHLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDeEQsSUFBSSxNQUFNLEdBQWtCLHdCQUFjLENBQUMsUUFBUSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFFeEUsSUFBSSxhQUFhLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDeEMsTUFBTSxHQUFHLHNCQUFZLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0tBQ2pFO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQXJCRCx3RUFxQkM7QUFFRCxTQUFnQixnQ0FBZ0MsQ0FDOUMsZUFBaUMsRUFDakMsWUFBa0M7SUFFbEMsSUFBSSxRQUFzQixDQUFDO0lBQzNCLElBQUksT0FBTyxlQUFlLEtBQUssUUFBUSxFQUFFO1FBQ3ZDLFFBQVEsR0FBRyx1QkFBZSxDQUFDLEVBQUUsRUFBRSxlQUFlLEVBQUUsWUFBWSxDQUFDLENBQUMsUUFBUSxDQUFDO0tBQ3hFO1NBQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxFQUFFO1FBQ3pDLFFBQVEsR0FBRyx1QkFBZSxDQUFDLEVBQUUsRUFBRSx5Q0FBbUIsQ0FBQyxlQUFlLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUM7S0FDN0Y7U0FBTSxJQUFJLHNCQUFjLENBQUMsZUFBZSxDQUFDLEVBQUU7UUFDMUMsUUFBUSxHQUFHLGVBQWUsQ0FBQztLQUM1QjtTQUFNO1FBQ0wsTUFBTSxJQUFJLEdBQUcsT0FBTyxlQUFlLENBQUM7UUFDcEMsTUFBTSxJQUFJLEtBQUssQ0FBQyx1REFBdUQsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUNoRjtJQUVELE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUM7QUFqQkQsNEVBaUJDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2FyZGF0XzAwMC9HdWlsZC9ncmFwaHFsLXRvb2xzL3BhY2thZ2VzL3NjaGVtYS9zcmMvYnVpbGRTY2hlbWFGcm9tVHlwZURlZmluaXRpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dGVuZFNjaGVtYSwgYnVpbGRBU1RTY2hlbWEsIEdyYXBoUUxTY2hlbWEsIERvY3VtZW50Tm9kZSB9IGZyb20gJ2dyYXBocWwnO1xuXG5pbXBvcnQgeyBJVHlwZURlZmluaXRpb25zLCBHcmFwaFFMUGFyc2VPcHRpb25zLCBwYXJzZUdyYXBoUUxTREwsIGlzRG9jdW1lbnROb2RlIH0gZnJvbSAnQGdyYXBocWwtdG9vbHMvdXRpbHMnO1xuXG5pbXBvcnQgeyBmaWx0ZXJBbmRFeHRyYWN0RXh0ZW5zaW9uRGVmaW5pdGlvbnMgfSBmcm9tICcuL2V4dGVuc2lvbkRlZmluaXRpb25zJztcbmltcG9ydCB7IGNvbmNhdGVuYXRlVHlwZURlZnMgfSBmcm9tICcuL2NvbmNhdGVuYXRlVHlwZURlZnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRTY2hlbWFGcm9tVHlwZURlZmluaXRpb25zKFxuICB0eXBlRGVmaW5pdGlvbnM6IElUeXBlRGVmaW5pdGlvbnMsXG4gIHBhcnNlT3B0aW9ucz86IEdyYXBoUUxQYXJzZU9wdGlvbnMsXG4gIG5vRXh0ZW5zaW9uRXh0cmFjdGlvbj86IGJvb2xlYW5cbik6IEdyYXBoUUxTY2hlbWEge1xuICBjb25zdCBkb2N1bWVudCA9IGJ1aWxkRG9jdW1lbnRGcm9tVHlwZURlZmluaXRpb25zKHR5cGVEZWZpbml0aW9ucywgcGFyc2VPcHRpb25zKTtcblxuICBpZiAobm9FeHRlbnNpb25FeHRyYWN0aW9uKSB7XG4gICAgcmV0dXJuIGJ1aWxkQVNUU2NoZW1hKGRvY3VtZW50KTtcbiAgfVxuXG4gIGNvbnN0IHsgdHlwZXNBc3QsIGV4dGVuc2lvbnNBc3QgfSA9IGZpbHRlckFuZEV4dHJhY3RFeHRlbnNpb25EZWZpbml0aW9ucyhkb2N1bWVudCk7XG5cbiAgY29uc3QgYmFja2NvbXBhdE9wdGlvbnMgPSB7IGNvbW1lbnREZXNjcmlwdGlvbnM6IHRydWUgfTtcbiAgbGV0IHNjaGVtYTogR3JhcGhRTFNjaGVtYSA9IGJ1aWxkQVNUU2NoZW1hKHR5cGVzQXN0LCBiYWNrY29tcGF0T3B0aW9ucyk7XG5cbiAgaWYgKGV4dGVuc2lvbnNBc3QuZGVmaW5pdGlvbnMubGVuZ3RoID4gMCkge1xuICAgIHNjaGVtYSA9IGV4dGVuZFNjaGVtYShzY2hlbWEsIGV4dGVuc2lvbnNBc3QsIGJhY2tjb21wYXRPcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiBzY2hlbWE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZERvY3VtZW50RnJvbVR5cGVEZWZpbml0aW9ucyhcbiAgdHlwZURlZmluaXRpb25zOiBJVHlwZURlZmluaXRpb25zLFxuICBwYXJzZU9wdGlvbnM/OiBHcmFwaFFMUGFyc2VPcHRpb25zXG4pOiBEb2N1bWVudE5vZGUge1xuICBsZXQgZG9jdW1lbnQ6IERvY3VtZW50Tm9kZTtcbiAgaWYgKHR5cGVvZiB0eXBlRGVmaW5pdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgZG9jdW1lbnQgPSBwYXJzZUdyYXBoUUxTREwoJycsIHR5cGVEZWZpbml0aW9ucywgcGFyc2VPcHRpb25zKS5kb2N1bWVudDtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHR5cGVEZWZpbml0aW9ucykpIHtcbiAgICBkb2N1bWVudCA9IHBhcnNlR3JhcGhRTFNETCgnJywgY29uY2F0ZW5hdGVUeXBlRGVmcyh0eXBlRGVmaW5pdGlvbnMpLCBwYXJzZU9wdGlvbnMpLmRvY3VtZW50O1xuICB9IGVsc2UgaWYgKGlzRG9jdW1lbnROb2RlKHR5cGVEZWZpbml0aW9ucykpIHtcbiAgICBkb2N1bWVudCA9IHR5cGVEZWZpbml0aW9ucztcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIHR5cGVEZWZpbml0aW9ucztcbiAgICB0aHJvdyBuZXcgRXJyb3IoYHR5cGVEZWZzIG11c3QgYmUgYSBzdHJpbmcsIGFycmF5IG9yIHNjaGVtYSBBU1QsIGdvdCAke3R5cGV9YCk7XG4gIH1cblxuICByZXR1cm4gZG9jdW1lbnQ7XG59XG4iXSwidmVyc2lvbiI6M30=