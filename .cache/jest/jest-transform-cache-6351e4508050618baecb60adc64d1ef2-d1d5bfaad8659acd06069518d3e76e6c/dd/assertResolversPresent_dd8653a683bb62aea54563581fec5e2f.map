{"file":"/home/ardat_000/Guild/graphql-tools/packages/schema/src/assertResolversPresent.ts","mappings":";;;AAAA,qCAAkF;AAElF,gDAAmG;AAEnG,SAAgB,sBAAsB,CACpC,MAAqB,EACrB,4BAAwD,EAAE;IAE1D,MAAM,EACJ,uBAAuB,EACvB,4BAA4B,EAC5B,4BAA4B,GAC7B,GAAG,yBAAyB,CAAC;IAE9B,IAAI,4BAA4B,IAAI,CAAC,uBAAuB,IAAI,4BAA4B,CAAC,EAAE;QAC7F,MAAM,IAAI,SAAS,CACjB,mFAAmF;YACjF,oFAAoF;YACpF,8DAA8D,CACjE,CAAC;KACH;IAED,oBAAY,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,EAAE;QAClD,yCAAyC;QACzC,IAAI,4BAA4B,EAAE;YAChC,cAAc,CAAC,8BAA8B,EAAE,4BAA4B,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;SAC1G;QAED,wDAAwD;QACxD,IAAI,uBAAuB,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACpD,cAAc,CAAC,yBAAyB,EAAE,uBAAuB,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;SAChG;QAED,oEAAoE;QACpE,IAAI,4BAA4B,KAAK,QAAQ,IAAI,CAAC,sBAAY,CAAC,sBAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE;YACxF,cAAc,CAAC,8BAA8B,EAAE,4BAA4B,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;SAC1G;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAlCD,wDAkCC;AAED,SAAS,cAAc,CACrB,SAAiB,EACjB,QAA2B,EAC3B,KAA6B,EAC7B,QAAgB,EAChB,SAAiB;IAEjB,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;QAClB,MAAM,OAAO,GAAG,yBAAyB,QAAQ,IAAI,SAAS;;;MAG5D,SAAS;IACX,CAAC;QAED,IAAI,QAAQ,KAAK,OAAO,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;SAC1B;QAED,IAAI,QAAQ,KAAK,MAAM,EAAE;YACvB,sCAAsC;YACtC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACvB;QAED,OAAO;KACR;IACD,IAAI,OAAO,KAAK,CAAC,OAAO,KAAK,UAAU,EAAE;QACvC,MAAM,IAAI,KAAK,CAAC,aAAa,QAAQ,IAAI,SAAS,sBAAsB,CAAC,CAAC;KAC3E;AACH,CAAC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/schema/src/assertResolversPresent.ts"],"sourcesContent":["import { GraphQLSchema, GraphQLField, getNamedType, isScalarType } from 'graphql';\n\nimport { IResolverValidationOptions, forEachField, ValidatorBehavior } from '@graphql-tools/utils';\n\nexport function assertResolversPresent(\n  schema: GraphQLSchema,\n  resolverValidationOptions: IResolverValidationOptions = {}\n): void {\n  const {\n    requireResolversForArgs,\n    requireResolversForNonScalar,\n    requireResolversForAllFields,\n  } = resolverValidationOptions;\n\n  if (requireResolversForAllFields && (requireResolversForArgs || requireResolversForNonScalar)) {\n    throw new TypeError(\n      'requireResolversForAllFields takes precedence over the more specific assertions. ' +\n        'Please configure either requireResolversForAllFields or requireResolversForArgs / ' +\n        'requireResolversForNonScalar, but not a combination of them.'\n    );\n  }\n\n  forEachField(schema, (field, typeName, fieldName) => {\n    // requires a resolver for *every* field.\n    if (requireResolversForAllFields) {\n      expectResolver('requireResolversForAllFields', requireResolversForAllFields, field, typeName, fieldName);\n    }\n\n    // requires a resolver on every field that has arguments\n    if (requireResolversForArgs && field.args.length > 0) {\n      expectResolver('requireResolversForArgs', requireResolversForArgs, field, typeName, fieldName);\n    }\n\n    // requires a resolver on every field that returns a non-scalar type\n    if (requireResolversForNonScalar !== 'ignore' && !isScalarType(getNamedType(field.type))) {\n      expectResolver('requireResolversForNonScalar', requireResolversForNonScalar, field, typeName, fieldName);\n    }\n  });\n}\n\nfunction expectResolver(\n  validator: string,\n  behavior: ValidatorBehavior,\n  field: GraphQLField<any, any>,\n  typeName: string,\n  fieldName: string\n) {\n  if (!field.resolve) {\n    const message = `Resolver missing for \"${typeName}.${fieldName}\".\nTo disable this validator, use:\n  resolverValidationOptions: {\n    ${validator}: 'ignore'\n  }`;\n\n    if (behavior === 'error') {\n      throw new Error(message);\n    }\n\n    if (behavior === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn(message);\n    }\n\n    return;\n  }\n  if (typeof field.resolve !== 'function') {\n    throw new Error(`Resolver \"${typeName}.${fieldName}\" must be a function`);\n  }\n}\n"],"version":3}