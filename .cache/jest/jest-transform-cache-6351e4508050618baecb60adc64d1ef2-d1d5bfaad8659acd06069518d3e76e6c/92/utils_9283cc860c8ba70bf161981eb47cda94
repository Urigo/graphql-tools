b2cec6636810bd513fb3be7551831341
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyOwnProps = exports.copyOwnPropsIfNotPresent = exports.isObject = exports.makeRef = exports.takeRandom = exports.randomListLength = exports.uuidv4 = void 0;
function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
        const r = (Math.random() * 16) | 0;
        // eslint-disable-next-line eqeqeq
        const v = c == 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
}
exports.uuidv4 = uuidv4;
const randomListLength = () => {
    // Mocking has always returned list of length 2 by default
    // return 1 + Math.round(Math.random() * 10)
    return 2;
};
exports.randomListLength = randomListLength;
const takeRandom = (arr) => arr[Math.floor(Math.random() * arr.length)];
exports.takeRandom = takeRandom;
function makeRef(typeName, key) {
    return { $ref: { key, typeName } };
}
exports.makeRef = makeRef;
function isObject(thing) {
    return thing === Object(thing) && !Array.isArray(thing);
}
exports.isObject = isObject;
function copyOwnPropsIfNotPresent(target, source) {
    Object.getOwnPropertyNames(source).forEach(prop => {
        if (!Object.getOwnPropertyDescriptor(target, prop)) {
            const propertyDescriptor = Object.getOwnPropertyDescriptor(source, prop);
            Object.defineProperty(target, prop, propertyDescriptor == null ? {} : propertyDescriptor);
        }
    });
}
exports.copyOwnPropsIfNotPresent = copyOwnPropsIfNotPresent;
function copyOwnProps(target, ...sources) {
    sources.forEach(source => {
        let chain = source;
        while (chain != null) {
            copyOwnPropsIfNotPresent(target, chain);
            chain = Object.getPrototypeOf(chain);
        }
    });
    return target;
}
exports.copyOwnProps = copyOwnProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJkYXRfMDAwL0d1aWxkL2dyYXBocWwtdG9vbHMvcGFja2FnZXMvbW9jay9zcmMvdXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBRUEsU0FBZ0IsTUFBTTtJQUNwQixPQUFPLHNDQUFzQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUU7UUFDakUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLGtDQUFrQztRQUNsQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUN6QyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBUEQsd0JBT0M7QUFFTSxNQUFNLGdCQUFnQixHQUFHLEdBQUcsRUFBRTtJQUNuQywwREFBMEQ7SUFDMUQsNENBQTRDO0lBQzVDLE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQyxDQUFDO0FBSlcsUUFBQSxnQkFBZ0Isb0JBSTNCO0FBRUssTUFBTSxVQUFVLEdBQUcsQ0FBSSxHQUFRLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUExRSxRQUFBLFVBQVUsY0FBZ0U7QUFFdkYsU0FBZ0IsT0FBTyxDQUEyQyxRQUFnQixFQUFFLEdBQVM7SUFDM0YsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDO0FBQ3JDLENBQUM7QUFGRCwwQkFFQztBQUVELFNBQWdCLFFBQVEsQ0FBQyxLQUFVO0lBQ2pDLE9BQU8sS0FBSyxLQUFLLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUZELDRCQUVDO0FBRUQsU0FBZ0Isd0JBQXdCLENBQUMsTUFBMkIsRUFBRSxNQUEyQjtJQUMvRixNQUFNLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ2hELElBQUksQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ2xELE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6RSxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsa0JBQWtCLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDM0Y7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFQRCw0REFPQztBQUVELFNBQWdCLFlBQVksQ0FBQyxNQUEyQixFQUFFLEdBQUcsT0FBbUM7SUFDOUYsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUN2QixJQUFJLEtBQUssR0FBRyxNQUFNLENBQUM7UUFDbkIsT0FBTyxLQUFLLElBQUksSUFBSSxFQUFFO1lBQ3BCLHdCQUF3QixDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN4QyxLQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0QztJQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQVRELG9DQVNDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2FyZGF0XzAwMC9HdWlsZC9ncmFwaHFsLXRvb2xzL3BhY2thZ2VzL21vY2svc3JjL3V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlZiwgS2V5VHlwZUNvbnN0cmFpbnRzIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB1dWlkdjQoKSB7XG4gIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGMgPT4ge1xuICAgIGNvbnN0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICAgIGNvbnN0IHYgPSBjID09ICd4JyA/IHIgOiAociAmIDB4MykgfCAweDg7XG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IHJhbmRvbUxpc3RMZW5ndGggPSAoKSA9PiB7XG4gIC8vIE1vY2tpbmcgaGFzIGFsd2F5cyByZXR1cm5lZCBsaXN0IG9mIGxlbmd0aCAyIGJ5IGRlZmF1bHRcbiAgLy8gcmV0dXJuIDEgKyBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMClcbiAgcmV0dXJuIDI7XG59O1xuXG5leHBvcnQgY29uc3QgdGFrZVJhbmRvbSA9IDxUPihhcnI6IFRbXSkgPT4gYXJyW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFyci5sZW5ndGgpXTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VSZWY8S2V5VCBleHRlbmRzIEtleVR5cGVDb25zdHJhaW50cyA9IHN0cmluZz4odHlwZU5hbWU6IHN0cmluZywga2V5OiBLZXlUKTogUmVmPEtleVQ+IHtcbiAgcmV0dXJuIHsgJHJlZjogeyBrZXksIHR5cGVOYW1lIH0gfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHRoaW5nOiBhbnkpIHtcbiAgcmV0dXJuIHRoaW5nID09PSBPYmplY3QodGhpbmcpICYmICFBcnJheS5pc0FycmF5KHRoaW5nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHlPd25Qcm9wc0lmTm90UHJlc2VudCh0YXJnZXQ6IFJlY29yZDxzdHJpbmcsIGFueT4sIHNvdXJjZTogUmVjb3JkPHN0cmluZywgYW55Pikge1xuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2UpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcCkpIHtcbiAgICAgIGNvbnN0IHByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBwcm9wKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3AsIHByb3BlcnR5RGVzY3JpcHRvciA9PSBudWxsID8ge30gOiBwcm9wZXJ0eURlc2NyaXB0b3IpO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5T3duUHJvcHModGFyZ2V0OiBSZWNvcmQ8c3RyaW5nLCBhbnk+LCAuLi5zb3VyY2VzOiBBcnJheTxSZWNvcmQ8c3RyaW5nLCBhbnk+Pikge1xuICBzb3VyY2VzLmZvckVhY2goc291cmNlID0+IHtcbiAgICBsZXQgY2hhaW4gPSBzb3VyY2U7XG4gICAgd2hpbGUgKGNoYWluICE9IG51bGwpIHtcbiAgICAgIGNvcHlPd25Qcm9wc0lmTm90UHJlc2VudCh0YXJnZXQsIGNoYWluKTtcbiAgICAgIGNoYWluID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGNoYWluKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdGFyZ2V0O1xufVxuIl0sInZlcnNpb24iOjN9