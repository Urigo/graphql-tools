{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/parse-graphql-json.ts","mappings":";;;AAAA,qCAA0D;AAE1D,iFAA2E;AAG3E,2DAAsD;AAEtD,SAAS,QAAQ,CAAC,OAAe;IAC/B,OAAO,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;IAC7B,kEAAkE;IAClE,iEAAiE;IACjE,yCAAyC;IACzC,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;QACpC,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KAC5B;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAS,QAAQ,CAAC,OAAe;IAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;AACvC,CAAC;AAED,SAAgB,gBAAgB,CAC9B,QAAgB,EAChB,WAAmB,EACnB,OAA2E;IAE3E,IAAI,UAAU,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC;IAEvC,IAAI,UAAU,CAAC,IAAI,EAAE;QACnB,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC;KAC9B;IAED,IAAI,UAAU,CAAC,IAAI,KAAK,UAAU,EAAE;QAClC,MAAM,QAAQ,GAAG,UAAU,CAAC;QAE5B,OAAO;YACL,QAAQ;YACR,QAAQ;SACT,CAAC;KACH;SAAM,IAAI,UAAU,CAAC,QAAQ,EAAE;QAC9B,MAAM,MAAM,GAAG,2BAAiB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QACtD,MAAM,MAAM,GAAG,wDAAyB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAE1D,OAAO;YACL,QAAQ;YACR,QAAQ,EAAE,mCAAe,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,QAAQ;YAC7D,MAAM;YACN,MAAM;SACP,CAAC;KACH;IAED,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;AAC5C,CAAC;AA/BD,4CA+BC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/parse-graphql-json.ts"],"sourcesContent":["import { buildClientSchema, ParseOptions } from 'graphql';\nimport { GraphQLSchemaValidationOptions } from 'graphql/type/schema';\nimport { printSchemaWithDirectives } from './print-schema-with-directives';\nimport { Source } from './loaders';\nimport { SchemaPrintOptions } from './types';\nimport { parseGraphQLSDL } from './parse-graphql-sdl';\n\nfunction stripBOM(content: string): string {\n  content = content.toString();\n  // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n  // because the buffer-to-string conversion in `fs.readFileSync()`\n  // translates it to FEFF, the UTF-16 BOM.\n  if (content.charCodeAt(0) === 0xfeff) {\n    content = content.slice(1);\n  }\n\n  return content;\n}\n\nfunction parseBOM(content: string): any {\n  return JSON.parse(stripBOM(content));\n}\n\nexport function parseGraphQLJSON(\n  location: string,\n  jsonContent: string,\n  options: SchemaPrintOptions & ParseOptions & GraphQLSchemaValidationOptions\n): Source {\n  let parsedJson = parseBOM(jsonContent);\n\n  if (parsedJson.data) {\n    parsedJson = parsedJson.data;\n  }\n\n  if (parsedJson.kind === 'Document') {\n    const document = parsedJson;\n\n    return {\n      location,\n      document,\n    };\n  } else if (parsedJson.__schema) {\n    const schema = buildClientSchema(parsedJson, options);\n    const rawSDL = printSchemaWithDirectives(schema, options);\n\n    return {\n      location,\n      document: parseGraphQLSDL(location, rawSDL, options).document,\n      rawSDL,\n      schema,\n    };\n  }\n\n  throw new Error(`Not valid JSON content`);\n}\n"],"version":3}