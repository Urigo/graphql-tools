{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/forEachField.ts","mappings":";;;AAAA,qCAAoE;AAIpE,SAAgB,YAAY,CAAC,MAAqB,EAAE,EAAoB;IACtE,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;IACpC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;QACtC,MAAM,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;QAE/B,+CAA+C;QAC/C,IAAI,CAAC,sBAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,sBAAY,CAAC,IAAI,CAAC,EAAE;YACnE,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAChC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBACtC,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;gBAChC,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC;SACJ;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAdD,oCAcC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/forEachField.ts"],"sourcesContent":["import { getNamedType, GraphQLSchema, isObjectType } from 'graphql';\n\nimport { IFieldIteratorFn } from './Interfaces';\n\nexport function forEachField(schema: GraphQLSchema, fn: IFieldIteratorFn): void {\n  const typeMap = schema.getTypeMap();\n  Object.keys(typeMap).forEach(typeName => {\n    const type = typeMap[typeName];\n\n    // TODO: maybe have an option to include these?\n    if (!getNamedType(type).name.startsWith('__') && isObjectType(type)) {\n      const fields = type.getFields();\n      Object.keys(fields).forEach(fieldName => {\n        const field = fields[fieldName];\n        fn(field, typeName, fieldName);\n      });\n    }\n  });\n}\n"],"version":3}