6bde895a721a569981186cc03e0dfbb8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDirectives = exports.getDirectivesInExtensions = void 0;
const getArgumentValues_1 = require("./getArgumentValues");
function getDirectivesInExtensions(node, pathToDirectivesInExtensions = ['directives']) {
    const directivesInExtensions = pathToDirectivesInExtensions.reduce((acc, pathSegment) => (acc == null ? acc : acc[pathSegment]), node === null || node === void 0 ? void 0 : node.extensions);
    return directivesInExtensions;
}
exports.getDirectivesInExtensions = getDirectivesInExtensions;
function getDirectives(schema, node, pathToDirectivesInExtensions = ['directives']) {
    const directivesInExtensions = getDirectivesInExtensions(node, pathToDirectivesInExtensions);
    if (directivesInExtensions != null) {
        return directivesInExtensions;
    }
    const schemaDirectives = schema && schema.getDirectives ? schema.getDirectives() : [];
    const schemaDirectiveMap = schemaDirectives.reduce((schemaDirectiveMap, schemaDirective) => {
        schemaDirectiveMap[schemaDirective.name] = schemaDirective;
        return schemaDirectiveMap;
    }, {});
    let astNodes = [];
    if (node.astNode) {
        astNodes.push(node.astNode);
    }
    if ('extensionASTNodes' in node && node.extensionASTNodes) {
        astNodes = [...astNodes, ...node.extensionASTNodes];
    }
    const result = {};
    astNodes.forEach(astNode => {
        if (astNode.directives) {
            astNode.directives.forEach(directiveNode => {
                var _a;
                const schemaDirective = schemaDirectiveMap[directiveNode.name.value];
                if (schemaDirective) {
                    if (schemaDirective.isRepeatable) {
                        result[schemaDirective.name] = (_a = result[schemaDirective.name]) !== null && _a !== void 0 ? _a : [];
                        result[schemaDirective.name].push(getArgumentValues_1.getArgumentValues(schemaDirective, directiveNode));
                    }
                    else {
                        result[schemaDirective.name] = getArgumentValues_1.getArgumentValues(schemaDirective, directiveNode);
                    }
                }
            });
        }
    });
    return result;
}
exports.getDirectives = getDirectives;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJkYXRfMDAwL0d1aWxkL2dyYXBocWwtdG9vbHMvcGFja2FnZXMvdXRpbHMvc3JjL2dldC1kaXJlY3RpdmVzLnRzIiwibWFwcGluZ3MiOiI7OztBQTBCQSwyREFBd0Q7QUE4QnhELFNBQWdCLHlCQUF5QixDQUN2QyxJQUE2QixFQUM3Qiw0QkFBNEIsR0FBRyxDQUFDLFlBQVksQ0FBQztJQUU3QyxNQUFNLHNCQUFzQixHQUFHLDRCQUE0QixDQUFDLE1BQU0sQ0FDaEUsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQzVELElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxVQUFVLENBQ2pCLENBQUM7SUFFRixPQUFPLHNCQUFzQixDQUFDO0FBQ2hDLENBQUM7QUFWRCw4REFVQztBQUVELFNBQWdCLGFBQWEsQ0FDM0IsTUFBcUIsRUFDckIsSUFBNkIsRUFDN0IsNEJBQTRCLEdBQUcsQ0FBQyxZQUFZLENBQUM7SUFFN0MsTUFBTSxzQkFBc0IsR0FBRyx5QkFBeUIsQ0FBQyxJQUFJLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztJQUU3RixJQUFJLHNCQUFzQixJQUFJLElBQUksRUFBRTtRQUNsQyxPQUFPLHNCQUFzQixDQUFDO0tBQy9CO0lBRUQsTUFBTSxnQkFBZ0IsR0FDcEIsTUFBTSxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRS9ELE1BQU0sa0JBQWtCLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLEVBQUU7UUFDekYsa0JBQWtCLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLGVBQWUsQ0FBQztRQUMzRCxPQUFPLGtCQUFrQixDQUFDO0lBQzVCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVQLElBQUksUUFBUSxHQUE0QixFQUFFLENBQUM7SUFDM0MsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ2hCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzdCO0lBQ0QsSUFBSSxtQkFBbUIsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO1FBQ3pELFFBQVEsR0FBRyxDQUFDLEdBQUcsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7S0FDckQ7SUFFRCxNQUFNLE1BQU0sR0FBb0IsRUFBRSxDQUFDO0lBRW5DLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDekIsSUFBSSxPQUFPLENBQUMsVUFBVSxFQUFFO1lBQ3RCLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxFQUFFOztnQkFDekMsTUFBTSxlQUFlLEdBQUcsa0JBQWtCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDckUsSUFBSSxlQUFlLEVBQUU7b0JBQ25CLElBQUksZUFBZSxDQUFDLFlBQVksRUFBRTt3QkFDaEMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFBLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLG1DQUFJLEVBQUUsQ0FBQzt3QkFDbEUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMscUNBQWlCLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7cUJBQ3RGO3lCQUFNO3dCQUNMLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcscUNBQWlCLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxDQUFDO3FCQUNsRjtpQkFDRjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUE5Q0Qsc0NBOENDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2FyZGF0XzAwMC9HdWlsZC9ncmFwaHFsLXRvb2xzL3BhY2thZ2VzL3V0aWxzL3NyYy9nZXQtZGlyZWN0aXZlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBHcmFwaFFMRGlyZWN0aXZlLFxuICBHcmFwaFFMU2NoZW1hLFxuICBTY2hlbWFEZWZpbml0aW9uTm9kZSxcbiAgVHlwZURlZmluaXRpb25Ob2RlLFxuICBTY2hlbWFFeHRlbnNpb25Ob2RlLFxuICBUeXBlRXh0ZW5zaW9uTm9kZSxcbiAgR3JhcGhRTE5hbWVkVHlwZSxcbiAgR3JhcGhRTEZpZWxkLFxuICBHcmFwaFFMSW5wdXRGaWVsZCxcbiAgRmllbGREZWZpbml0aW9uTm9kZSxcbiAgSW5wdXRWYWx1ZURlZmluaXRpb25Ob2RlLFxuICBHcmFwaFFMRmllbGRDb25maWcsXG4gIEdyYXBoUUxJbnB1dEZpZWxkQ29uZmlnLFxuICBHcmFwaFFMU2NoZW1hQ29uZmlnLFxuICBHcmFwaFFMT2JqZWN0VHlwZUNvbmZpZyxcbiAgR3JhcGhRTEludGVyZmFjZVR5cGVDb25maWcsXG4gIEdyYXBoUUxVbmlvblR5cGVDb25maWcsXG4gIEdyYXBoUUxTY2FsYXJUeXBlQ29uZmlnLFxuICBHcmFwaFFMRW51bVR5cGVDb25maWcsXG4gIEdyYXBoUUxJbnB1dE9iamVjdFR5cGVDb25maWcsXG4gIEdyYXBoUUxFbnVtVmFsdWUsXG4gIEdyYXBoUUxFbnVtVmFsdWVDb25maWcsXG4gIEVudW1WYWx1ZURlZmluaXRpb25Ob2RlLFxufSBmcm9tICdncmFwaHFsJztcblxuaW1wb3J0IHsgZ2V0QXJndW1lbnRWYWx1ZXMgfSBmcm9tICcuL2dldEFyZ3VtZW50VmFsdWVzJztcblxuZXhwb3J0IHR5cGUgRGlyZWN0aXZlVXNlTWFwID0geyBba2V5OiBzdHJpbmddOiBhbnkgfTtcblxudHlwZSBTY2hlbWFPclR5cGVOb2RlID1cbiAgfCBTY2hlbWFEZWZpbml0aW9uTm9kZVxuICB8IFNjaGVtYUV4dGVuc2lvbk5vZGVcbiAgfCBUeXBlRGVmaW5pdGlvbk5vZGVcbiAgfCBUeXBlRXh0ZW5zaW9uTm9kZVxuICB8IEVudW1WYWx1ZURlZmluaXRpb25Ob2RlXG4gIHwgRmllbGREZWZpbml0aW9uTm9kZVxuICB8IElucHV0VmFsdWVEZWZpbml0aW9uTm9kZTtcblxudHlwZSBEaXJlY3RhYmxlR3JhcGhRTE9iamVjdCA9XG4gIHwgR3JhcGhRTFNjaGVtYVxuICB8IEdyYXBoUUxTY2hlbWFDb25maWdcbiAgfCBHcmFwaFFMTmFtZWRUeXBlXG4gIHwgR3JhcGhRTE9iamVjdFR5cGVDb25maWc8YW55LCBhbnk+XG4gIHwgR3JhcGhRTEludGVyZmFjZVR5cGVDb25maWc8YW55LCBhbnk+XG4gIHwgR3JhcGhRTFVuaW9uVHlwZUNvbmZpZzxhbnksIGFueT5cbiAgfCBHcmFwaFFMU2NhbGFyVHlwZUNvbmZpZzxhbnksIGFueT5cbiAgfCBHcmFwaFFMRW51bVR5cGVDb25maWdcbiAgfCBHcmFwaFFMRW51bVZhbHVlXG4gIHwgR3JhcGhRTEVudW1WYWx1ZUNvbmZpZ1xuICB8IEdyYXBoUUxJbnB1dE9iamVjdFR5cGVDb25maWdcbiAgfCBHcmFwaFFMRmllbGQ8YW55LCBhbnk+XG4gIHwgR3JhcGhRTElucHV0RmllbGRcbiAgfCBHcmFwaFFMRmllbGRDb25maWc8YW55LCBhbnk+XG4gIHwgR3JhcGhRTElucHV0RmllbGRDb25maWc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREaXJlY3RpdmVzSW5FeHRlbnNpb25zKFxuICBub2RlOiBEaXJlY3RhYmxlR3JhcGhRTE9iamVjdCxcbiAgcGF0aFRvRGlyZWN0aXZlc0luRXh0ZW5zaW9ucyA9IFsnZGlyZWN0aXZlcyddXG4pOiBEaXJlY3RpdmVVc2VNYXAge1xuICBjb25zdCBkaXJlY3RpdmVzSW5FeHRlbnNpb25zID0gcGF0aFRvRGlyZWN0aXZlc0luRXh0ZW5zaW9ucy5yZWR1Y2UoXG4gICAgKGFjYywgcGF0aFNlZ21lbnQpID0+IChhY2MgPT0gbnVsbCA/IGFjYyA6IGFjY1twYXRoU2VnbWVudF0pLFxuICAgIG5vZGU/LmV4dGVuc2lvbnNcbiAgKTtcblxuICByZXR1cm4gZGlyZWN0aXZlc0luRXh0ZW5zaW9ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERpcmVjdGl2ZXMoXG4gIHNjaGVtYTogR3JhcGhRTFNjaGVtYSxcbiAgbm9kZTogRGlyZWN0YWJsZUdyYXBoUUxPYmplY3QsXG4gIHBhdGhUb0RpcmVjdGl2ZXNJbkV4dGVuc2lvbnMgPSBbJ2RpcmVjdGl2ZXMnXVxuKTogRGlyZWN0aXZlVXNlTWFwIHtcbiAgY29uc3QgZGlyZWN0aXZlc0luRXh0ZW5zaW9ucyA9IGdldERpcmVjdGl2ZXNJbkV4dGVuc2lvbnMobm9kZSwgcGF0aFRvRGlyZWN0aXZlc0luRXh0ZW5zaW9ucyk7XG5cbiAgaWYgKGRpcmVjdGl2ZXNJbkV4dGVuc2lvbnMgIT0gbnVsbCkge1xuICAgIHJldHVybiBkaXJlY3RpdmVzSW5FeHRlbnNpb25zO1xuICB9XG5cbiAgY29uc3Qgc2NoZW1hRGlyZWN0aXZlczogUmVhZG9ubHlBcnJheTxHcmFwaFFMRGlyZWN0aXZlPiA9XG4gICAgc2NoZW1hICYmIHNjaGVtYS5nZXREaXJlY3RpdmVzID8gc2NoZW1hLmdldERpcmVjdGl2ZXMoKSA6IFtdO1xuXG4gIGNvbnN0IHNjaGVtYURpcmVjdGl2ZU1hcCA9IHNjaGVtYURpcmVjdGl2ZXMucmVkdWNlKChzY2hlbWFEaXJlY3RpdmVNYXAsIHNjaGVtYURpcmVjdGl2ZSkgPT4ge1xuICAgIHNjaGVtYURpcmVjdGl2ZU1hcFtzY2hlbWFEaXJlY3RpdmUubmFtZV0gPSBzY2hlbWFEaXJlY3RpdmU7XG4gICAgcmV0dXJuIHNjaGVtYURpcmVjdGl2ZU1hcDtcbiAgfSwge30pO1xuXG4gIGxldCBhc3ROb2RlczogQXJyYXk8U2NoZW1hT3JUeXBlTm9kZT4gPSBbXTtcbiAgaWYgKG5vZGUuYXN0Tm9kZSkge1xuICAgIGFzdE5vZGVzLnB1c2gobm9kZS5hc3ROb2RlKTtcbiAgfVxuICBpZiAoJ2V4dGVuc2lvbkFTVE5vZGVzJyBpbiBub2RlICYmIG5vZGUuZXh0ZW5zaW9uQVNUTm9kZXMpIHtcbiAgICBhc3ROb2RlcyA9IFsuLi5hc3ROb2RlcywgLi4ubm9kZS5leHRlbnNpb25BU1ROb2Rlc107XG4gIH1cblxuICBjb25zdCByZXN1bHQ6IERpcmVjdGl2ZVVzZU1hcCA9IHt9O1xuXG4gIGFzdE5vZGVzLmZvckVhY2goYXN0Tm9kZSA9PiB7XG4gICAgaWYgKGFzdE5vZGUuZGlyZWN0aXZlcykge1xuICAgICAgYXN0Tm9kZS5kaXJlY3RpdmVzLmZvckVhY2goZGlyZWN0aXZlTm9kZSA9PiB7XG4gICAgICAgIGNvbnN0IHNjaGVtYURpcmVjdGl2ZSA9IHNjaGVtYURpcmVjdGl2ZU1hcFtkaXJlY3RpdmVOb2RlLm5hbWUudmFsdWVdO1xuICAgICAgICBpZiAoc2NoZW1hRGlyZWN0aXZlKSB7XG4gICAgICAgICAgaWYgKHNjaGVtYURpcmVjdGl2ZS5pc1JlcGVhdGFibGUpIHtcbiAgICAgICAgICAgIHJlc3VsdFtzY2hlbWFEaXJlY3RpdmUubmFtZV0gPSByZXN1bHRbc2NoZW1hRGlyZWN0aXZlLm5hbWVdID8/IFtdO1xuICAgICAgICAgICAgcmVzdWx0W3NjaGVtYURpcmVjdGl2ZS5uYW1lXS5wdXNoKGdldEFyZ3VtZW50VmFsdWVzKHNjaGVtYURpcmVjdGl2ZSwgZGlyZWN0aXZlTm9kZSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRbc2NoZW1hRGlyZWN0aXZlLm5hbWVdID0gZ2V0QXJndW1lbnRWYWx1ZXMoc2NoZW1hRGlyZWN0aXZlLCBkaXJlY3RpdmVOb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==