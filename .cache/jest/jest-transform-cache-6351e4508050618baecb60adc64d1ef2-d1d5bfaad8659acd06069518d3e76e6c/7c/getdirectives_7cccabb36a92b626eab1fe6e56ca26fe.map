{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/get-directives.ts","mappings":";;;AA0BA,2DAAwD;AA8BxD,SAAgB,yBAAyB,CACvC,IAA6B,EAC7B,4BAA4B,GAAG,CAAC,YAAY,CAAC;IAE7C,MAAM,sBAAsB,GAAG,4BAA4B,CAAC,MAAM,CAChE,CAAC,GAAG,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,EAC5D,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,UAAU,CACjB,CAAC;IAEF,OAAO,sBAAsB,CAAC;AAChC,CAAC;AAVD,8DAUC;AAED,SAAgB,aAAa,CAC3B,MAAqB,EACrB,IAA6B,EAC7B,4BAA4B,GAAG,CAAC,YAAY,CAAC;IAE7C,MAAM,sBAAsB,GAAG,yBAAyB,CAAC,IAAI,EAAE,4BAA4B,CAAC,CAAC;IAE7F,IAAI,sBAAsB,IAAI,IAAI,EAAE;QAClC,OAAO,sBAAsB,CAAC;KAC/B;IAED,MAAM,gBAAgB,GACpB,MAAM,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAE/D,MAAM,kBAAkB,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,kBAAkB,EAAE,eAAe,EAAE,EAAE;QACzF,kBAAkB,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC;QAC3D,OAAO,kBAAkB,CAAC;IAC5B,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAI,QAAQ,GAA4B,EAAE,CAAC;IAC3C,IAAI,IAAI,CAAC,OAAO,EAAE;QAChB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAC7B;IACD,IAAI,mBAAmB,IAAI,IAAI,IAAI,IAAI,CAAC,iBAAiB,EAAE;QACzD,QAAQ,GAAG,CAAC,GAAG,QAAQ,EAAE,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC;KACrD;IAED,MAAM,MAAM,GAAoB,EAAE,CAAC;IAEnC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;QACzB,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;;gBACzC,MAAM,eAAe,GAAG,kBAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACrE,IAAI,eAAe,EAAE;oBACnB,IAAI,eAAe,CAAC,YAAY,EAAE;wBAChC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,MAAA,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,mCAAI,EAAE,CAAC;wBAClE,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,qCAAiB,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC,CAAC;qBACtF;yBAAM;wBACL,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,qCAAiB,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;qBAClF;iBACF;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC;AA9CD,sCA8CC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/get-directives.ts"],"sourcesContent":["import {\n  GraphQLDirective,\n  GraphQLSchema,\n  SchemaDefinitionNode,\n  TypeDefinitionNode,\n  SchemaExtensionNode,\n  TypeExtensionNode,\n  GraphQLNamedType,\n  GraphQLField,\n  GraphQLInputField,\n  FieldDefinitionNode,\n  InputValueDefinitionNode,\n  GraphQLFieldConfig,\n  GraphQLInputFieldConfig,\n  GraphQLSchemaConfig,\n  GraphQLObjectTypeConfig,\n  GraphQLInterfaceTypeConfig,\n  GraphQLUnionTypeConfig,\n  GraphQLScalarTypeConfig,\n  GraphQLEnumTypeConfig,\n  GraphQLInputObjectTypeConfig,\n  GraphQLEnumValue,\n  GraphQLEnumValueConfig,\n  EnumValueDefinitionNode,\n} from 'graphql';\n\nimport { getArgumentValues } from './getArgumentValues';\n\nexport type DirectiveUseMap = { [key: string]: any };\n\ntype SchemaOrTypeNode =\n  | SchemaDefinitionNode\n  | SchemaExtensionNode\n  | TypeDefinitionNode\n  | TypeExtensionNode\n  | EnumValueDefinitionNode\n  | FieldDefinitionNode\n  | InputValueDefinitionNode;\n\ntype DirectableGraphQLObject =\n  | GraphQLSchema\n  | GraphQLSchemaConfig\n  | GraphQLNamedType\n  | GraphQLObjectTypeConfig<any, any>\n  | GraphQLInterfaceTypeConfig<any, any>\n  | GraphQLUnionTypeConfig<any, any>\n  | GraphQLScalarTypeConfig<any, any>\n  | GraphQLEnumTypeConfig\n  | GraphQLEnumValue\n  | GraphQLEnumValueConfig\n  | GraphQLInputObjectTypeConfig\n  | GraphQLField<any, any>\n  | GraphQLInputField\n  | GraphQLFieldConfig<any, any>\n  | GraphQLInputFieldConfig;\n\nexport function getDirectivesInExtensions(\n  node: DirectableGraphQLObject,\n  pathToDirectivesInExtensions = ['directives']\n): DirectiveUseMap {\n  const directivesInExtensions = pathToDirectivesInExtensions.reduce(\n    (acc, pathSegment) => (acc == null ? acc : acc[pathSegment]),\n    node?.extensions\n  );\n\n  return directivesInExtensions;\n}\n\nexport function getDirectives(\n  schema: GraphQLSchema,\n  node: DirectableGraphQLObject,\n  pathToDirectivesInExtensions = ['directives']\n): DirectiveUseMap {\n  const directivesInExtensions = getDirectivesInExtensions(node, pathToDirectivesInExtensions);\n\n  if (directivesInExtensions != null) {\n    return directivesInExtensions;\n  }\n\n  const schemaDirectives: ReadonlyArray<GraphQLDirective> =\n    schema && schema.getDirectives ? schema.getDirectives() : [];\n\n  const schemaDirectiveMap = schemaDirectives.reduce((schemaDirectiveMap, schemaDirective) => {\n    schemaDirectiveMap[schemaDirective.name] = schemaDirective;\n    return schemaDirectiveMap;\n  }, {});\n\n  let astNodes: Array<SchemaOrTypeNode> = [];\n  if (node.astNode) {\n    astNodes.push(node.astNode);\n  }\n  if ('extensionASTNodes' in node && node.extensionASTNodes) {\n    astNodes = [...astNodes, ...node.extensionASTNodes];\n  }\n\n  const result: DirectiveUseMap = {};\n\n  astNodes.forEach(astNode => {\n    if (astNode.directives) {\n      astNode.directives.forEach(directiveNode => {\n        const schemaDirective = schemaDirectiveMap[directiveNode.name.value];\n        if (schemaDirective) {\n          if (schemaDirective.isRepeatable) {\n            result[schemaDirective.name] = result[schemaDirective.name] ?? [];\n            result[schemaDirective.name].push(getArgumentValues(schemaDirective, directiveNode));\n          } else {\n            result[schemaDirective.name] = getArgumentValues(schemaDirective, directiveNode);\n          }\n        }\n      });\n    }\n  });\n\n  return result;\n}\n"],"version":3}