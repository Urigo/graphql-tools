{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/astFromValueUntyped.ts","mappings":";;;AAAA,qCAA2D;AAE3D;;;;;;;;;;;;;;GAcG;AACH,SAAgB,mBAAmB,CAAC,KAAU;IAC5C,yCAAyC;IACzC,IAAI,KAAK,KAAK,IAAI,EAAE;QAClB,OAAO,EAAE,IAAI,EAAE,cAAI,CAAC,IAAI,EAAE,CAAC;KAC5B;IAED,YAAY;IACZ,IAAI,KAAK,KAAK,SAAS,EAAE;QACvB,OAAO,IAAI,CAAC;KACb;IAED,8EAA8E;IAC9E,2EAA2E;IAC3E,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QACxB,MAAM,WAAW,GAAqB,EAAE,CAAC;QACzC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACnB,MAAM,QAAQ,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAC3C,IAAI,QAAQ,IAAI,IAAI,EAAE;gBACpB,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC5B;QACH,CAAC,CAAC,CAAC;QACH,OAAO,EAAE,IAAI,EAAE,cAAI,CAAC,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC;KACjD;IAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,MAAM,UAAU,GAA2B,EAAE,CAAC;QAC9C,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,UAAU,CAAC,EAAE,EAAE;YACxD,MAAM,GAAG,GAAG,mBAAmB,CAAC,UAAU,CAAC,CAAC;YAC5C,IAAI,GAAG,EAAE;gBACP,UAAU,CAAC,IAAI,CAAC;oBACd,IAAI,EAAE,cAAI,CAAC,YAAY;oBACvB,IAAI,EAAE,EAAE,IAAI,EAAE,cAAI,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE;oBAC3C,KAAK,EAAE,GAAG;iBACX,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;QACH,OAAO,EAAE,IAAI,EAAE,cAAI,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC;KAClD;IAED,yEAAyE;IACzE,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE;QAC9B,OAAO,EAAE,IAAI,EAAE,cAAI,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC;KACtC;IAED,iDAAiD;IACjD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;QAChD,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;QAChC,OAAO,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC;YACxC,CAAC,CAAC,EAAE,IAAI,EAAE,cAAI,CAAC,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE;YACtC,CAAC,CAAC,EAAE,IAAI,EAAE,cAAI,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC;KAC5C;IAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,EAAE,IAAI,EAAE,cAAI,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;KACrC;IAED,MAAM,IAAI,SAAS,CAAC,gCAAgC,KAAK,GAAG,CAAC,CAAC;AAChE,CAAC;AAzDD,kDAyDC;AAED;;;;GAIG;AACH,MAAM,mBAAmB,GAAG,uBAAuB,CAAC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/astFromValueUntyped.ts"],"sourcesContent":["import { Kind, ObjectFieldNode, ValueNode } from 'graphql';\n\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using the following mapping.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String               |\n * | Number        | Int / Float          |\n * | null          | NullValue            |\n *\n */\nexport function astFromValueUntyped(value: any): ValueNode {\n  // only explicit null, not undefined, NaN\n  if (value === null) {\n    return { kind: Kind.NULL };\n  }\n\n  // undefined\n  if (value === undefined) {\n    return null;\n  }\n\n  // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n  if (Array.isArray(value)) {\n    const valuesNodes: Array<ValueNode> = [];\n    value.forEach(item => {\n      const itemNode = astFromValueUntyped(item);\n      if (itemNode != null) {\n        valuesNodes.push(itemNode);\n      }\n    });\n    return { kind: Kind.LIST, values: valuesNodes };\n  }\n\n  if (typeof value === 'object') {\n    const fieldNodes: Array<ObjectFieldNode> = [];\n    Object.entries(value).forEach(([fieldName, fieldValue]) => {\n      const ast = astFromValueUntyped(fieldValue);\n      if (ast) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: { kind: Kind.NAME, value: fieldName },\n          value: ast,\n        });\n      }\n    });\n    return { kind: Kind.OBJECT, fields: fieldNodes };\n  }\n\n  // Others serialize based on their corresponding JavaScript scalar types.\n  if (typeof value === 'boolean') {\n    return { kind: Kind.BOOLEAN, value };\n  }\n\n  // JavaScript numbers can be Int or Float values.\n  if (typeof value === 'number' && isFinite(value)) {\n    const stringNum = String(value);\n    return integerStringRegExp.test(stringNum)\n      ? { kind: Kind.INT, value: stringNum }\n      : { kind: Kind.FLOAT, value: stringNum };\n  }\n\n  if (typeof value === 'string') {\n    return { kind: Kind.STRING, value };\n  }\n\n  throw new TypeError(`Cannot convert value to AST: ${value}.`);\n}\n\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n"],"version":3}