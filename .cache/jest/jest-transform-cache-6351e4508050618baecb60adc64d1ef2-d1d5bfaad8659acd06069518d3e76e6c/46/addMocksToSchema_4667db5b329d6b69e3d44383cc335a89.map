{"file":"/home/ardat_000/Guild/graphql-tools/packages/mock/src/addMocksToSchema.ts","mappings":";;;AAAA,qCAUiB;AACjB,gDAAyE;AACzE,kDAA6D;AAC7D,mCAAgE;AAChE,mCAAiD;AACjD,wBAAoC;AAkBpC,wCAAwC;AACxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyDG;AACH,SAAgB,gBAAgB,CAAC,EAC/B,MAAM,EACN,KAAK,EAAE,UAAU,EACjB,KAAK,EACL,YAAY,EACZ,SAAS,EAAE,sBAAsB,EACjC,iBAAiB,GAAG,KAAK,GACZ;IACb,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;KAChD;IACD,IAAI,CAAC,kBAAQ,CAAC,MAAM,CAAC,EAAE;QACrB,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;KACpE;IACD,IAAI,KAAK,IAAI,CAAC,gBAAQ,CAAC,KAAK,CAAC,EAAE;QAC7B,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;KACjD;IAED,MAAM,KAAK,GACT,UAAU;QACV,kBAAe,CAAC;YACd,MAAM;YACN,KAAK;YACL,YAAY;SACb,CAAC,CAAC;IAEL,MAAM,SAAS,GACb,OAAO,sBAAsB,KAAK,UAAU,CAAC,CAAC,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,sBAAsB,CAAC;IAExG,MAAM,YAAY,GAAmC,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;QAClF,MAAM,oBAAoB,GAAG,8BAAoB,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAE9E,qCAAqC;QACrC,IAAI,oBAAoB,KAAK,SAAS;YAAE,OAAO,oBAAoB,CAAC;QAEpE,IAAI,aAAK,CAAC,MAAM,CAAC,EAAE;YACjB,OAAO,KAAK,CAAC,GAAG,CAAC;gBACf,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ;gBAC9B,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG;gBACpB,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;SACJ;QAED,8EAA8E;QAC9E,yDAAyD;QACzD,IAAI,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE;YAC5C,OAAO,KAAK,CAAC,GAAG,CAAC;gBACf,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI;gBAC9B,GAAG,EAAE,MAAM;gBACX,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;SACJ;QAED,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;IAEF,MAAM,YAAY,GAAkC,IAAI,CAAC,EAAE;QACzD,IAAI,aAAK,CAAC,IAAI,CAAC,EAAE;YACf,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;SAC3B;IACH,CAAC,CAAC;IAEF,MAAM,cAAc,GAAmC,GAAG,EAAE,CAAC,CAAC;QAC5D,CAAC,MAAM,CAAC,aAAa,CAAC;YACpB,OAAO;gBACL,KAAK,CAAC,IAAI;oBACR,OAAO;wBACL,IAAI,EAAE,IAAI;wBACV,KAAK,EAAE,EAAE;qBACV,CAAC;gBACJ,CAAC;aACF,CAAC;QACJ,CAAC;KACF,CAAC,CAAC;IAEH,MAAM,eAAe,GAAG,iBAAS,CAAC,MAAM,EAAE;QACxC,CAAC,kBAAU,CAAC,YAAY,CAAC,EAAE,WAAW,CAAC,EAAE;YACvC,MAAM,cAAc,GAAG;gBACrB,GAAG,WAAW;aACf,CAAC;YAEF,MAAM,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC;YACxC,IAAI,CAAC,iBAAiB,IAAI,CAAC,WAAW,EAAE;gBACtC,cAAc,CAAC,OAAO,GAAG,YAAY,CAAC;aACvC;iBAAM;gBACL,cAAc,CAAC,OAAO,GAAG,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;oBACjE,MAAM,CAAC,WAAW,EAAE,aAAa,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;wBACrD,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC;wBAC7C,WAAW,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC;qBAC7C,CAAC,CAAC;oBAEH,2BAA2B;oBAC3B,IAAI,WAAW,YAAY,KAAK,EAAE;wBAChC,sDAAsD;wBACtD,IAAI,SAAS,KAAK,aAAa,EAAE;4BAC/B,MAAM,WAAW,CAAC;yBACnB;wBACD,OAAO,aAAa,CAAC;qBACtB;oBAED,IAAI,aAAa,YAAY,IAAI,IAAI,WAAW,YAAY,IAAI,EAAE;wBAChE,OAAO,SAAS,KAAK,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,WAAW,CAAC;qBAClE;oBAED,IAAI,gBAAQ,CAAC,WAAW,CAAC,IAAI,gBAAQ,CAAC,aAAa,CAAC,EAAE;wBACpD,yEAAyE;wBACzE,kEAAkE;wBAClE,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC;wBACxE,OAAO,oBAAY,CAAC,WAAW,EAAE,aAAa,EAAE,WAAW,CAAC,CAAC;qBAC9D;oBACD,OAAO,SAAS,KAAK,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,WAAW,CAAC;gBACnE,CAAC,CAAC;aACH;YAED,MAAM,eAAe,GAAG,WAAW,CAAC,SAAS,CAAC;YAC9C,IAAI,CAAC,iBAAiB,IAAI,CAAC,eAAe,EAAE;gBAC1C,cAAc,CAAC,SAAS,GAAG,cAAc,CAAC;aAC3C;iBAAM;gBACL,cAAc,CAAC,SAAS,GAAG,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;oBACnE,MAAM,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;wBAC9D,cAAc,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC;wBAC/C,eAAe,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC;qBACjD,CAAC,CAAC;oBACH,OAAO,gBAAgB,IAAI,iBAAiB,CAAC;gBAC/C,CAAC,CAAC;aACH;YAED,OAAO,cAAc,CAAC;QACxB,CAAC;QACD,CAAC,kBAAU,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,EAAE;YACjC,IAAI,iBAAiB,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;gBAC5E,OAAO;aACR;YACD,IAAI,qBAAW,CAAC,IAAI,CAAC,EAAE;gBACrB,OAAO,IAAI,0BAAgB,CAAC;oBAC1B,GAAG,IAAI,CAAC,QAAQ,EAAE;oBAClB,WAAW,EAAE,YAAY;iBAC1B,CAAC,CAAC;aACJ;iBAAM;gBACL,OAAO,IAAI,8BAAoB,CAAC;oBAC9B,GAAG,IAAI,CAAC,QAAQ,EAAE;oBAClB,WAAW,EAAE,YAAY;iBAC1B,CAAC,CAAC;aACJ;QACH,CAAC;KACF,CAAC,CAAC;IAEH,OAAO,SAAS,CAAC,CAAC,CAAC,6BAAoB,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC;AACxF,CAAC;AAtJD,4CAsJC;AAED,MAAM,UAAU,GAAG,CAAC,IAAuB,EAAE,MAAqB,EAAE,EAAE;IACpE,MAAM,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;IACxC,MAAM,aAAa,GAAG,SAAS,IAAI,IAAI,IAAI,SAAS,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC;IAExE,MAAM,YAAY,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;IAC9C,MAAM,gBAAgB,GAAG,YAAY,IAAI,IAAI,IAAI,YAAY,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC;IAEjF,MAAM,gBAAgB,GAAG,MAAM,CAAC,mBAAmB,EAAE,CAAC;IACtD,MAAM,oBAAoB,GAAG,gBAAgB,IAAI,IAAI,IAAI,gBAAgB,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC;IAE7F,OAAO,aAAa,IAAI,gBAAgB,IAAI,oBAAoB,CAAC;AACnE,CAAC,CAAC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/mock/src/addMocksToSchema.ts"],"sourcesContent":["import {\n  GraphQLSchema,\n  GraphQLFieldResolver,\n  defaultFieldResolver,\n  GraphQLObjectType,\n  GraphQLTypeResolver,\n  isUnionType,\n  GraphQLUnionType,\n  GraphQLInterfaceType,\n  isSchema,\n} from 'graphql';\nimport { mapSchema, MapperKind, IResolvers } from '@graphql-tools/utils';\nimport { addResolversToSchema } from '@graphql-tools/schema';\nimport { isRef, IMockStore, IMocks, TypePolicy } from './types';\nimport { copyOwnProps, isObject } from './utils';\nimport { createMockStore } from '.';\n\ntype IMockOptions = {\n  schema: GraphQLSchema;\n  store?: IMockStore;\n  mocks?: IMocks;\n  typePolicies?: {\n    [typeName: string]: TypePolicy;\n  };\n  resolvers?: IResolvers | ((store: IMockStore) => IResolvers);\n  /**\n   * Set to `true` to prevent existing resolvers from being\n   * overwritten to provide mock data. This can be used to mock some parts of the\n   * server and not others.\n   */\n  preserveResolvers?: boolean;\n};\n\n// todo: add option to preserve resolver\n/**\n * Given a `schema` and a `MockStore`, returns an executable schema that\n * will use the provided `MockStore` to execute queries.\n *\n * ```ts\n * const schema = buildSchema(`\n *  type User {\n *    id: ID!\n *    name: String!\n *  }\n *  type Query {\n *    me: User!\n *  }\n * `)\n *\n * const store = createMockStore({ schema });\n * const mockedSchema = addMocksToSchema({ schema, store });\n * ```\n *\n *\n * If a `resolvers` parameter is passed, the query execution will use\n * the provided `resolvers` if, one exists, instead of the default mock\n * resolver.\n *\n *\n * ```ts\n * const schema = buildSchema(`\n *   type User {\n *     id: ID!\n *     name: String!\n *   }\n *   type Query {\n *     me: User!\n *   }\n *   type Mutation {\n *     setMyName(newName: String!): User!\n *   }\n * `)\n *\n * const store = createMockStore({ schema });\n * const mockedSchema = addMocksToSchema({\n *   schema,\n *   store,\n *   resolvers: {\n *     Mutation: {\n *       setMyName: (_, { newName }) => {\n *          const ref = store.get('Query', 'ROOT', 'viewer');\n *          store.set(ref, 'name', newName);\n *          return ref;\n *       }\n *     }\n *   }\n *  });\n * ```\n *\n *\n * `Query` and `Mutation` type will use `key` `'ROOT'`.\n */\nexport function addMocksToSchema({\n  schema,\n  store: maybeStore,\n  mocks,\n  typePolicies,\n  resolvers: resolversOrFnResolvers,\n  preserveResolvers = false,\n}: IMockOptions): GraphQLSchema {\n  if (!schema) {\n    throw new Error('Must provide schema to mock');\n  }\n  if (!isSchema(schema)) {\n    throw new Error('Value at \"schema\" must be of type GraphQLSchema');\n  }\n  if (mocks && !isObject(mocks)) {\n    throw new Error('mocks must be of type Object');\n  }\n\n  const store =\n    maybeStore ||\n    createMockStore({\n      schema,\n      mocks,\n      typePolicies,\n    });\n\n  const resolvers =\n    typeof resolversOrFnResolvers === 'function' ? resolversOrFnResolvers(store) : resolversOrFnResolvers;\n\n  const mockResolver: GraphQLFieldResolver<any, any> = (source, args, contex, info) => {\n    const defaultResolvedValue = defaultFieldResolver(source, args, contex, info);\n\n    // priority to default resolved value\n    if (defaultResolvedValue !== undefined) return defaultResolvedValue;\n\n    if (isRef(source)) {\n      return store.get({\n        typeName: source.$ref.typeName,\n        key: source.$ref.key,\n        fieldName: info.fieldName,\n        fieldArgs: args,\n      });\n    }\n\n    // we have to handle the root mutation, root query and root subscription types\n    // differently, because no resolver is called at the root\n    if (isRootType(info.parentType, info.schema)) {\n      return store.get({\n        typeName: info.parentType.name,\n        key: 'ROOT',\n        fieldName: info.fieldName,\n        fieldArgs: args,\n      });\n    }\n\n    return undefined;\n  };\n\n  const typeResolver: GraphQLTypeResolver<any, any> = data => {\n    if (isRef(data)) {\n      return data.$ref.typeName;\n    }\n  };\n\n  const mockSubscriber: GraphQLFieldResolver<any, any> = () => ({\n    [Symbol.asyncIterator]() {\n      return {\n        async next() {\n          return {\n            done: true,\n            value: {},\n          };\n        },\n      };\n    },\n  });\n\n  const schemaWithMocks = mapSchema(schema, {\n    [MapperKind.OBJECT_FIELD]: fieldConfig => {\n      const newFieldConfig = {\n        ...fieldConfig,\n      };\n\n      const oldResolver = fieldConfig.resolve;\n      if (!preserveResolvers || !oldResolver) {\n        newFieldConfig.resolve = mockResolver;\n      } else {\n        newFieldConfig.resolve = async (rootObject, args, context, info) => {\n          const [mockedValue, resolvedValue] = await Promise.all([\n            mockResolver(rootObject, args, context, info),\n            oldResolver(rootObject, args, context, info),\n          ]);\n\n          // In case we couldn't mock\n          if (mockedValue instanceof Error) {\n            // only if value was not resolved, populate the error.\n            if (undefined === resolvedValue) {\n              throw mockedValue;\n            }\n            return resolvedValue;\n          }\n\n          if (resolvedValue instanceof Date && mockedValue instanceof Date) {\n            return undefined !== resolvedValue ? resolvedValue : mockedValue;\n          }\n\n          if (isObject(mockedValue) && isObject(resolvedValue)) {\n            // Object.assign() won't do here, as we need to all properties, including\n            // the non-enumerable ones and defined using Object.defineProperty\n            const emptyObject = Object.create(Object.getPrototypeOf(resolvedValue));\n            return copyOwnProps(emptyObject, resolvedValue, mockedValue);\n          }\n          return undefined !== resolvedValue ? resolvedValue : mockedValue;\n        };\n      }\n\n      const fieldSubscriber = fieldConfig.subscribe;\n      if (!preserveResolvers || !fieldSubscriber) {\n        newFieldConfig.subscribe = mockSubscriber;\n      } else {\n        newFieldConfig.subscribe = async (rootObject, args, context, info) => {\n          const [mockAsyncIterable, oldAsyncIterable] = await Promise.all([\n            mockSubscriber(rootObject, args, context, info),\n            fieldSubscriber(rootObject, args, context, info),\n          ]);\n          return oldAsyncIterable || mockAsyncIterable;\n        };\n      }\n\n      return newFieldConfig;\n    },\n    [MapperKind.ABSTRACT_TYPE]: type => {\n      if (preserveResolvers && type.resolveType != null && type.resolveType.length) {\n        return;\n      }\n      if (isUnionType(type)) {\n        return new GraphQLUnionType({\n          ...type.toConfig(),\n          resolveType: typeResolver,\n        });\n      } else {\n        return new GraphQLInterfaceType({\n          ...type.toConfig(),\n          resolveType: typeResolver,\n        });\n      }\n    },\n  });\n\n  return resolvers ? addResolversToSchema(schemaWithMocks, resolvers) : schemaWithMocks;\n}\n\nconst isRootType = (type: GraphQLObjectType, schema: GraphQLSchema) => {\n  const queryType = schema.getQueryType();\n  const isOnQueryType = queryType != null && queryType.name === type.name;\n\n  const mutationType = schema.getMutationType();\n  const isOnMutationType = mutationType != null && mutationType.name === type.name;\n\n  const subscriptionType = schema.getSubscriptionType();\n  const isOnSubscriptionType = subscriptionType != null && subscriptionType.name === type.name;\n\n  return isOnQueryType || isOnMutationType || isOnSubscriptionType;\n};\n"],"version":3}