{"file":"/home/ardat_000/Guild/graphql-tools/packages/schema/src/types.ts","mappings":"","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/schema/src/types.ts"],"sourcesContent":["import { GraphQLSchema } from 'graphql';\n\nimport {\n  ITypeDefinitions,\n  IResolvers,\n  IResolverValidationOptions,\n  IDirectiveResolvers,\n  SchemaDirectiveVisitorClass,\n  GraphQLParseOptions,\n  PruneSchemaOptions,\n} from '@graphql-tools/utils';\n\nexport interface ILogger {\n  log: (error: Error) => void;\n}\n\n/**\n * Configuration object for creating an executable schema\n */\nexport interface IExecutableSchemaDefinition<TContext = any> {\n  /**\n   * The type definitions used to create the schema\n   */\n  typeDefs: ITypeDefinitions;\n  /**\n   * Object describing the field resolvers for the provided type definitions\n   */\n  resolvers?: IResolvers<any, TContext> | Array<IResolvers<any, TContext>>;\n  /**\n   * Logger instance used to print errors to the server console that are\n   * usually swallowed by GraphQL.\n   */\n  logger?: ILogger;\n  /**\n   * Set to `false` to have resolvers throw an if they return undefined, which\n   * can help make debugging easier\n   */\n  allowUndefinedInResolve?: boolean;\n  /**\n   * Additional options for validating the provided resolvers\n   */\n  resolverValidationOptions?: IResolverValidationOptions;\n  /**\n   * Map of directive resolvers\n   */\n  directiveResolvers?: IDirectiveResolvers<any, TContext>;\n  /**\n   * A map of schema directives used with the legacy class-based implementation\n   * of schema directives\n   */\n  schemaDirectives?: Record<string, SchemaDirectiveVisitorClass>;\n  /**\n   * An array of schema transformation functions\n   */\n  schemaTransforms?: ExecutableSchemaTransformation[];\n  /**\n   * Additional options for parsing the type definitions if they are provided\n   * as a string\n   */\n  parseOptions?: GraphQLParseOptions;\n  /**\n   * GraphQL object types that implement interfaces will inherit any missing\n   * resolvers from their interface types defined in the `resolvers` object\n   */\n  inheritResolversFromInterfaces?: boolean;\n  /**\n   * Additional options for removing unused types from the schema\n   */\n  pruningOptions?: PruneSchemaOptions;\n  /**\n   * Do not create a schema again and use the one from `buildASTSchema`\n   */\n  updateResolversInPlace?: boolean;\n  /**\n   * Do not extract and apply extensions separately and leave it to `buildASTSchema`\n   */\n  noExtensionExtraction?: boolean;\n}\n\nexport type ExecutableSchemaTransformation = (schema: GraphQLSchema) => GraphQLSchema;\n"],"version":3}