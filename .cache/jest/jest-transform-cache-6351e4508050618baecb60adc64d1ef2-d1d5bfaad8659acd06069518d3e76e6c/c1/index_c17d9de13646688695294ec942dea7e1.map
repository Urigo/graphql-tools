{"file":"/home/ardat_000/Guild/graphql-tools/packages/mock/src/index.ts","mappings":";;;;AAGA,2CAAwC;AAExC,sDAA4B;AAC5B,6DAAmC;AACnC,uDAA6B;AAC7B,kDAAwB;AACxB,qDAA2B;AAE3B;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,SAAgB,eAAe,CAAC,OAc/B;IACC,OAAO,IAAI,qBAAS,CAAC,OAAO,CAAC,CAAC;AAChC,CAAC;AAhBD,0CAgBC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/mock/src/index.ts"],"sourcesContent":["import { GraphQLSchema } from 'graphql';\n\nimport { IMockStore, IMocks, TypePolicy } from './types';\nimport { MockStore } from './MockStore';\n\nexport * from './MockStore';\nexport * from './addMocksToSchema';\nexport * from './mockServer';\nexport * from './types';\nexport * from './MockList';\n\n/**\n * Will create `MockStore` for the given `schema`.\n *\n * A `MockStore` will generate mock values for the given schem when queried.\n *\n * It will stores generated mocks, so that, provided with same arguments\n * the returned values will be the same.\n *\n * Its API also allows to modify the stored values.\n *\n * Basic example:\n * ```ts\n * store.get('User', 1, 'name');\n * // > \"Hello World\"\n * store.set('User', 1, 'name', 'Alexandre');\n * store.get('User', 1, 'name');\n * // > \"Alexandre\"\n * ```\n *\n * The storage key will correspond to the \"key field\"\n * of the type. Field with name `id` or `_id` will be\n * by default considered as the key field for the type.\n * However, use `typePolicies` to precise the field to use\n * as key.\n */\nexport function createMockStore(options: {\n  /**\n   * The `schema` to based mocks on.\n   */\n  schema: GraphQLSchema;\n\n  /**\n   * The mocks functions to use.\n   */\n  mocks?: IMocks;\n\n  typePolicies?: {\n    [typeName: string]: TypePolicy;\n  };\n}): IMockStore {\n  return new MockStore(options);\n}\n"],"version":3}