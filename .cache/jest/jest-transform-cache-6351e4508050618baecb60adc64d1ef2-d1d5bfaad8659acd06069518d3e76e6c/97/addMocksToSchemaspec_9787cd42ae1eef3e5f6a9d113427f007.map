{"file":"/home/ardat_000/Guild/graphql-tools/packages/mock/tests/addMocksToSchema.spec.ts","mappings":"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","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/mock/tests/addMocksToSchema.spec.ts"],"sourcesContent":["import { buildSchema, graphql } from 'graphql';\nimport { addMocksToSchema, assertIsRef, createMockStore } from '../src';\n\nconst typeDefs = `\ntype User {\n  id: ID!\n  age: Int!\n  name: String!\n  image: UserImage!\n  book: Book!\n}\n\nunion UserImage = UserImageSolidColor | UserImageURL\n\ntype UserImageSolidColor {\n  color: String!\n}\n\ntype UserImageURL {\n  url: String!\n}\n\nscalar Date\n\ninterface Book {\n  id: ID!\n  title: String\n  publishedAt: Date\n}\n\ntype TextBook implements Book {\n  id: ID!\n  title: String\n  publishedAt: Date\n  text: String\n}\n\ntype ColoringBook implements Book {\n  id: ID!\n  title: String\n  publishedAt: Date\n  colors: [String]\n}\n\ntype Query {\n  viewer: User!\n  userById(id: ID!): User!\n}\n\ntype Mutation {\n  changeViewerName(newName: String!): User!\n}\n`;\n\nconst schema = buildSchema(typeDefs);\n\ndescribe('addMocksToSchema', () => {\n  it('basic', async () => {\n    const query = `\n      query {\n        viewer {\n          id\n          name\n          age\n        }\n      }\n      `;\n    const mockedSchema = addMocksToSchema({ schema });\n    const { data, errors } = await graphql({\n      schema: mockedSchema,\n      source: query,\n    });\n\n\n    expect(errors).not.toBeDefined();\n    expect(data).toBeDefined();\n    expect(typeof data!['viewer']['id']).toBe('string')\n    expect(typeof data!['viewer']['name']).toBe('string')\n    expect(typeof data!['viewer']['age']).toBe('number');\n\n    const { data: data2 } = await graphql({\n      schema: mockedSchema,\n      source: query,\n    });\n\n    expect(data2!['viewer']['id']).toEqual(data!['viewer']['id']);\n  });\n\n  it('mutations resolver', async () => {\n    const store = createMockStore({ schema });\n    const mockedSchema = addMocksToSchema({ schema, store, resolvers: {\n      Mutation: {\n        changeViewerName: (_, { newName }: { newName: string} ) => {\n          const viewer = store.get('Query', 'ROOT', 'viewer');\n          assertIsRef(viewer);\n\n          store.set('User', viewer.$ref.key, 'name', newName);\n          return store.get('Query', 'ROOT', 'viewer');\n        }\n      }\n    }});\n\n    await graphql({\n      schema: mockedSchema,\n      source: `query { viewer { name }}`,\n    });\n\n    await graphql({\n      schema: mockedSchema,\n      source: `mutation { changeViewerName(newName: \"Alexandre\") { name } }`,\n    });\n\n    const { data: data3 } = await graphql({\n      schema: mockedSchema,\n      source: `query { viewer { name }}`,\n    });\n\n    expect(data3!['viewer']['name']).toEqual('Alexandre');\n    expect(data3!['viewer']['name']).toEqual('Alexandre');\n  });\n\n  it('should handle arguments', async () => {\n    const query = `\n      query {\n        user1: userById(id: \"1\") {\n          id\n          name\n        }\n        user2: userById(id: \"2\") {\n          id\n          name\n        }\n      }\n      `;\n    const store = createMockStore({ schema });\n\n    const mockedSchema = addMocksToSchema({ schema, store });\n    const { data, errors } = await graphql({\n      schema: mockedSchema,\n      source: query,\n    });\n\n\n    expect(errors).not.toBeDefined();\n    expect(data).toBeDefined();\n    expect(data!['user1']['id']).not.toEqual(data!['user2']['id']);\n  });\n\n  it('should handle union type', async () => {\n    const query = `\n      query {\n        viewer {\n          image {\n            __typename\n            ... on UserImageURL {\n              url\n            }\n            ... on UserImageSolidColor {\n              color\n            }\n          }\n        }\n      }\n      `;\n    const store = createMockStore({ schema });\n\n    const mockedSchema = addMocksToSchema({ schema, store });\n    const { data, errors } = await graphql({\n      schema: mockedSchema,\n      source: query,\n    });\n\n\n    expect(errors).not.toBeDefined();\n    expect(data).toBeDefined();\n    expect(data!['viewer']['image']['__typename']).toBeDefined();\n  });\n\n  it('should handle interface type', async () => {\n    const query = `\n      query {\n        viewer {\n          book {\n            title\n            __typename\n            ... on TextBook {\n              text\n            }\n            ... on ColoringBook {\n              colors\n            }\n          }\n        }\n      }\n      `;\n    const store = createMockStore({ schema });\n\n    const mockedSchema = addMocksToSchema({ schema, store });\n    const { data, errors } = await graphql({\n      schema: mockedSchema,\n      source: query,\n    });\n\n\n    expect(errors).not.toBeDefined();\n    expect(data).toBeDefined();\n    expect(data!['viewer']['book']['__typename']).toBeDefined();\n  });\n  it('should handle custom scalars', async () => {\n\n    const mockDate = new Date().toJSON().split('T')[0];\n\n    const query = `\n      query {\n        viewer {\n          book {\n            title\n            publishedAt\n          }\n        }\n      }\n    `;\n\n    const mockedSchema = addMocksToSchema({ schema, mocks: {\n      Date: () => mockDate\n    }});\n    const { data, errors } = await graphql({\n      schema: mockedSchema,\n      source: query,\n    });\n\n\n    expect(errors).not.toBeDefined();\n    expect(data).toBeDefined();\n    expect(data!['viewer']['book']['publishedAt']).toBe(mockDate);\n\n  })\n});\n"],"version":3}