{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/getResolversFromSchema.ts","mappings":";;;AAAA,qCASiB;AAIjB,SAAgB,sBAAsB,CAAC,MAAqB;IAC1D,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAEpC,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;IAEpC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;QACtC,MAAM,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;QAE/B,IAAI,sBAAY,CAAC,IAAI,CAAC,EAAE;YACtB,IAAI,CAAC,+BAAqB,CAAC,IAAI,CAAC,EAAE;gBAChC,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC/B,OAAO,MAAM,CAAC,OAAO,CAAC,CAAC,kCAAkC;gBACzD,SAAS,CAAC,QAAQ,CAAC,GAAG,IAAI,2BAAiB,CAAC,MAAM,CAAC,CAAC;aACrD;SACF;aAAM,IAAI,oBAAU,CAAC,IAAI,CAAC,EAAE;YAC3B,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;YAEzB,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAChC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACrB,SAAS,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;YAChD,CAAC,CAAC,CAAC;SACJ;aAAM,IAAI,yBAAe,CAAC,IAAI,CAAC,EAAE;YAChC,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,EAAE;gBAC5B,SAAS,CAAC,QAAQ,CAAC,GAAG;oBACpB,aAAa,EAAE,IAAI,CAAC,WAAW;iBAChC,CAAC;aACH;SACF;aAAM,IAAI,qBAAW,CAAC,IAAI,CAAC,EAAE;YAC5B,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,EAAE;gBAC5B,SAAS,CAAC,QAAQ,CAAC,GAAG;oBACpB,aAAa,EAAE,IAAI,CAAC,WAAW;iBAChC,CAAC;aACH;SACF;aAAM,IAAI,sBAAY,CAAC,IAAI,CAAC,EAAE;YAC7B,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;YAEzB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;gBACzB,SAAS,CAAC,QAAQ,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC;aAChD;YAED,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAChC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBACtC,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;gBAEhC,SAAS,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,GAAG;oBAC/B,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,SAAS,EAAE,KAAK,CAAC,SAAS;iBAC3B,CAAC;YACJ,CAAC,CAAC,CAAC;SACJ;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,SAAS,CAAC;AACnB,CAAC;AArDD,wDAqDC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/getResolversFromSchema.ts"],"sourcesContent":["import {\n  GraphQLScalarType,\n  GraphQLSchema,\n  isScalarType,\n  isEnumType,\n  isInterfaceType,\n  isUnionType,\n  isObjectType,\n  isSpecifiedScalarType,\n} from 'graphql';\n\nimport { IResolvers } from './Interfaces';\n\nexport function getResolversFromSchema(schema: GraphQLSchema): IResolvers {\n  const resolvers = Object.create({});\n\n  const typeMap = schema.getTypeMap();\n\n  Object.keys(typeMap).forEach(typeName => {\n    const type = typeMap[typeName];\n\n    if (isScalarType(type)) {\n      if (!isSpecifiedScalarType(type)) {\n        const config = type.toConfig();\n        delete config.astNode; // avoid AST duplication elsewhere\n        resolvers[typeName] = new GraphQLScalarType(config);\n      }\n    } else if (isEnumType(type)) {\n      resolvers[typeName] = {};\n\n      const values = type.getValues();\n      values.forEach(value => {\n        resolvers[typeName][value.name] = value.value;\n      });\n    } else if (isInterfaceType(type)) {\n      if (type.resolveType != null) {\n        resolvers[typeName] = {\n          __resolveType: type.resolveType,\n        };\n      }\n    } else if (isUnionType(type)) {\n      if (type.resolveType != null) {\n        resolvers[typeName] = {\n          __resolveType: type.resolveType,\n        };\n      }\n    } else if (isObjectType(type)) {\n      resolvers[typeName] = {};\n\n      if (type.isTypeOf != null) {\n        resolvers[typeName].__isTypeOf = type.isTypeOf;\n      }\n\n      const fields = type.getFields();\n      Object.keys(fields).forEach(fieldName => {\n        const field = fields[fieldName];\n\n        resolvers[typeName][fieldName] = {\n          resolve: field.resolve,\n          subscribe: field.subscribe,\n        };\n      });\n    }\n  });\n\n  return resolvers;\n}\n"],"version":3}