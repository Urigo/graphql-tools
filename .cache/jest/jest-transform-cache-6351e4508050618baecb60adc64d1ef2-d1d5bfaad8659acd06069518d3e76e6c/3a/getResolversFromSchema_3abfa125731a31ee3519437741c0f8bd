7233d559c94c52d5bc04f2a6ade688f8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResolversFromSchema = void 0;
const graphql_1 = require("graphql");
function getResolversFromSchema(schema) {
    const resolvers = Object.create({});
    const typeMap = schema.getTypeMap();
    Object.keys(typeMap).forEach(typeName => {
        const type = typeMap[typeName];
        if (graphql_1.isScalarType(type)) {
            if (!graphql_1.isSpecifiedScalarType(type)) {
                const config = type.toConfig();
                delete config.astNode; // avoid AST duplication elsewhere
                resolvers[typeName] = new graphql_1.GraphQLScalarType(config);
            }
        }
        else if (graphql_1.isEnumType(type)) {
            resolvers[typeName] = {};
            const values = type.getValues();
            values.forEach(value => {
                resolvers[typeName][value.name] = value.value;
            });
        }
        else if (graphql_1.isInterfaceType(type)) {
            if (type.resolveType != null) {
                resolvers[typeName] = {
                    __resolveType: type.resolveType,
                };
            }
        }
        else if (graphql_1.isUnionType(type)) {
            if (type.resolveType != null) {
                resolvers[typeName] = {
                    __resolveType: type.resolveType,
                };
            }
        }
        else if (graphql_1.isObjectType(type)) {
            resolvers[typeName] = {};
            if (type.isTypeOf != null) {
                resolvers[typeName].__isTypeOf = type.isTypeOf;
            }
            const fields = type.getFields();
            Object.keys(fields).forEach(fieldName => {
                const field = fields[fieldName];
                resolvers[typeName][fieldName] = {
                    resolve: field.resolve,
                    subscribe: field.subscribe,
                };
            });
        }
    });
    return resolvers;
}
exports.getResolversFromSchema = getResolversFromSchema;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJkYXRfMDAwL0d1aWxkL2dyYXBocWwtdG9vbHMvcGFja2FnZXMvdXRpbHMvc3JjL2dldFJlc29sdmVyc0Zyb21TY2hlbWEudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBU2lCO0FBSWpCLFNBQWdCLHNCQUFzQixDQUFDLE1BQXFCO0lBQzFELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFcEMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBRXBDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ3RDLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUvQixJQUFJLHNCQUFZLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEIsSUFBSSxDQUFDLCtCQUFxQixDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNoQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQy9CLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLGtDQUFrQztnQkFDekQsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksMkJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDckQ7U0FDRjthQUFNLElBQUksb0JBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMzQixTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBRXpCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNoQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNyQixTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFDaEQsQ0FBQyxDQUFDLENBQUM7U0FDSjthQUFNLElBQUkseUJBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNoQyxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxFQUFFO2dCQUM1QixTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUc7b0JBQ3BCLGFBQWEsRUFBRSxJQUFJLENBQUMsV0FBVztpQkFDaEMsQ0FBQzthQUNIO1NBQ0Y7YUFBTSxJQUFJLHFCQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDNUIsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksRUFBRTtnQkFDNUIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHO29CQUNwQixhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVc7aUJBQ2hDLENBQUM7YUFDSDtTQUNGO2FBQU0sSUFBSSxzQkFBWSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzdCLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7WUFFekIsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksRUFBRTtnQkFDekIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO2FBQ2hEO1lBRUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUN0QyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBRWhDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRztvQkFDL0IsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO29CQUN0QixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7aUJBQzNCLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBckRELHdEQXFEQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9hcmRhdF8wMDAvR3VpbGQvZ3JhcGhxbC10b29scy9wYWNrYWdlcy91dGlscy9zcmMvZ2V0UmVzb2x2ZXJzRnJvbVNjaGVtYS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBHcmFwaFFMU2NhbGFyVHlwZSxcbiAgR3JhcGhRTFNjaGVtYSxcbiAgaXNTY2FsYXJUeXBlLFxuICBpc0VudW1UeXBlLFxuICBpc0ludGVyZmFjZVR5cGUsXG4gIGlzVW5pb25UeXBlLFxuICBpc09iamVjdFR5cGUsXG4gIGlzU3BlY2lmaWVkU2NhbGFyVHlwZSxcbn0gZnJvbSAnZ3JhcGhxbCc7XG5cbmltcG9ydCB7IElSZXNvbHZlcnMgfSBmcm9tICcuL0ludGVyZmFjZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVzb2x2ZXJzRnJvbVNjaGVtYShzY2hlbWE6IEdyYXBoUUxTY2hlbWEpOiBJUmVzb2x2ZXJzIHtcbiAgY29uc3QgcmVzb2x2ZXJzID0gT2JqZWN0LmNyZWF0ZSh7fSk7XG5cbiAgY29uc3QgdHlwZU1hcCA9IHNjaGVtYS5nZXRUeXBlTWFwKCk7XG5cbiAgT2JqZWN0LmtleXModHlwZU1hcCkuZm9yRWFjaCh0eXBlTmFtZSA9PiB7XG4gICAgY29uc3QgdHlwZSA9IHR5cGVNYXBbdHlwZU5hbWVdO1xuXG4gICAgaWYgKGlzU2NhbGFyVHlwZSh0eXBlKSkge1xuICAgICAgaWYgKCFpc1NwZWNpZmllZFNjYWxhclR5cGUodHlwZSkpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gdHlwZS50b0NvbmZpZygpO1xuICAgICAgICBkZWxldGUgY29uZmlnLmFzdE5vZGU7IC8vIGF2b2lkIEFTVCBkdXBsaWNhdGlvbiBlbHNld2hlcmVcbiAgICAgICAgcmVzb2x2ZXJzW3R5cGVOYW1lXSA9IG5ldyBHcmFwaFFMU2NhbGFyVHlwZShjb25maWcpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNFbnVtVHlwZSh0eXBlKSkge1xuICAgICAgcmVzb2x2ZXJzW3R5cGVOYW1lXSA9IHt9O1xuXG4gICAgICBjb25zdCB2YWx1ZXMgPSB0eXBlLmdldFZhbHVlcygpO1xuICAgICAgdmFsdWVzLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICByZXNvbHZlcnNbdHlwZU5hbWVdW3ZhbHVlLm5hbWVdID0gdmFsdWUudmFsdWU7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGlzSW50ZXJmYWNlVHlwZSh0eXBlKSkge1xuICAgICAgaWYgKHR5cGUucmVzb2x2ZVR5cGUgIT0gbnVsbCkge1xuICAgICAgICByZXNvbHZlcnNbdHlwZU5hbWVdID0ge1xuICAgICAgICAgIF9fcmVzb2x2ZVR5cGU6IHR5cGUucmVzb2x2ZVR5cGUsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1VuaW9uVHlwZSh0eXBlKSkge1xuICAgICAgaWYgKHR5cGUucmVzb2x2ZVR5cGUgIT0gbnVsbCkge1xuICAgICAgICByZXNvbHZlcnNbdHlwZU5hbWVdID0ge1xuICAgICAgICAgIF9fcmVzb2x2ZVR5cGU6IHR5cGUucmVzb2x2ZVR5cGUsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc09iamVjdFR5cGUodHlwZSkpIHtcbiAgICAgIHJlc29sdmVyc1t0eXBlTmFtZV0gPSB7fTtcblxuICAgICAgaWYgKHR5cGUuaXNUeXBlT2YgIT0gbnVsbCkge1xuICAgICAgICByZXNvbHZlcnNbdHlwZU5hbWVdLl9faXNUeXBlT2YgPSB0eXBlLmlzVHlwZU9mO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmaWVsZHMgPSB0eXBlLmdldEZpZWxkcygpO1xuICAgICAgT2JqZWN0LmtleXMoZmllbGRzKS5mb3JFYWNoKGZpZWxkTmFtZSA9PiB7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gZmllbGRzW2ZpZWxkTmFtZV07XG5cbiAgICAgICAgcmVzb2x2ZXJzW3R5cGVOYW1lXVtmaWVsZE5hbWVdID0ge1xuICAgICAgICAgIHJlc29sdmU6IGZpZWxkLnJlc29sdmUsXG4gICAgICAgICAgc3Vic2NyaWJlOiBmaWVsZC5zdWJzY3JpYmUsXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXNvbHZlcnM7XG59XG4iXSwidmVyc2lvbiI6M30=