{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/build-operation-for-field.ts","mappings":"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","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/build-operation-for-field.ts"],"sourcesContent":["import {\n  GraphQLSchema,\n  GraphQLObjectType,\n  isObjectType,\n  getNamedType,\n  isUnionType,\n  OperationDefinitionNode,\n  VariableDefinitionNode,\n  isNonNullType,\n  SelectionNode,\n  InlineFragmentNode,\n  GraphQLNamedType,\n  SelectionSetNode,\n  isScalarType,\n  TypeNode,\n  isListType,\n  ArgumentNode,\n  GraphQLField,\n  GraphQLArgument,\n  GraphQLInputType,\n  GraphQLList,\n  ListTypeNode,\n  GraphQLNonNull,\n  NonNullTypeNode,\n  OperationTypeNode,\n  isInterfaceType,\n  isEnumType,\n  Kind,\n} from 'graphql';\nimport { camelCase } from 'camel-case';\n\nlet operationVariables: VariableDefinitionNode[] = [];\nlet fieldTypeMap = new Map();\n\nfunction addOperationVariable(variable: VariableDefinitionNode) {\n  operationVariables.push(variable);\n}\n\nfunction resetOperationVariables() {\n  operationVariables = [];\n}\n\nfunction resetFieldMap() {\n  fieldTypeMap = new Map();\n}\n\nfunction buildOperationName(name: string) {\n  return camelCase(name);\n}\n\nexport type Skip = string[];\nexport type Force = string[];\nexport type Ignore = string[];\n\nexport type SelectedFields =\n  | {\n      [key: string]: SelectedFields;\n    }\n  | boolean;\n\nexport function buildOperationNodeForField({\n  schema,\n  kind,\n  field,\n  models,\n  ignore,\n  depthLimit,\n  circularReferenceDepth,\n  argNames,\n  selectedFields = true,\n}: {\n  schema: GraphQLSchema;\n  kind: OperationTypeNode;\n  field: string;\n  models?: string[];\n  ignore?: Ignore;\n  depthLimit?: number;\n  circularReferenceDepth?: number;\n  argNames?: string[];\n  selectedFields?: SelectedFields;\n}) {\n  resetOperationVariables();\n  resetFieldMap();\n\n  const operationNode = buildOperationAndCollectVariables({\n    schema,\n    fieldName: field,\n    kind,\n    models: models || [],\n    ignore: ignore || [],\n    depthLimit: depthLimit || Infinity,\n    circularReferenceDepth: circularReferenceDepth || 1,\n    argNames,\n    selectedFields,\n  });\n\n  // attach variables\n  (operationNode as any).variableDefinitions = [...operationVariables];\n\n  resetOperationVariables();\n  resetFieldMap();\n\n  return operationNode;\n}\n\nfunction buildOperationAndCollectVariables({\n  schema,\n  fieldName,\n  kind,\n  models,\n  ignore,\n  depthLimit,\n  circularReferenceDepth,\n  argNames,\n  selectedFields,\n}: {\n  schema: GraphQLSchema;\n  fieldName: string;\n  kind: OperationTypeNode;\n  models: string[];\n  ignore: Ignore;\n  depthLimit: number;\n  circularReferenceDepth: number;\n  argNames?: string[];\n  selectedFields: SelectedFields;\n}): OperationDefinitionNode {\n  const typeMap: Record<OperationTypeNode, GraphQLObjectType> = {\n    query: schema.getQueryType()!,\n    mutation: schema.getMutationType()!,\n    subscription: schema.getSubscriptionType()!,\n  };\n  const type = typeMap[kind];\n  const field = type.getFields()[fieldName];\n  const operationName = buildOperationName(`${fieldName}_${kind}`);\n\n  if (field.args) {\n    field.args.forEach(arg => {\n      const argName = arg.name;\n      if (!argNames || argNames.includes(argName)) {\n        addOperationVariable(resolveVariable(arg, argName));\n      }\n    });\n  }\n\n  return {\n    kind: Kind.OPERATION_DEFINITION,\n    operation: kind,\n    name: {\n      kind: 'Name',\n      value: operationName,\n    },\n    variableDefinitions: [],\n    selectionSet: {\n      kind: Kind.SELECTION_SET,\n      selections: [\n        resolveField({\n          type,\n          field,\n          models,\n          firstCall: true,\n          path: [],\n          ancestors: [],\n          ignore,\n          depthLimit,\n          circularReferenceDepth,\n          schema,\n          depth: 0,\n          argNames,\n          selectedFields,\n        }),\n      ],\n    },\n  };\n}\n\nfunction resolveSelectionSet({\n  parent,\n  type,\n  models,\n  firstCall,\n  path,\n  ancestors,\n  ignore,\n  depthLimit,\n  circularReferenceDepth,\n  schema,\n  depth,\n  argNames,\n  selectedFields,\n}: {\n  parent: GraphQLNamedType;\n  type: GraphQLNamedType;\n  models: string[];\n  path: string[];\n  ancestors: GraphQLNamedType[];\n  firstCall?: boolean;\n  ignore: Ignore;\n  depthLimit: number;\n  circularReferenceDepth: number;\n  schema: GraphQLSchema;\n  depth: number;\n  selectedFields: SelectedFields;\n  argNames?: string[];\n}): SelectionSetNode | void {\n  if (typeof selectedFields === 'boolean' && depth > depthLimit) {\n    return;\n  }\n  if (isUnionType(type)) {\n    const types = type.getTypes();\n\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: types\n        .filter(\n          t =>\n            !hasCircularRef([...ancestors, t], {\n              depth: circularReferenceDepth,\n            })\n        )\n        .map<InlineFragmentNode>(t => {\n          return {\n            kind: Kind.INLINE_FRAGMENT,\n            typeCondition: {\n              kind: Kind.NAMED_TYPE,\n              name: {\n                kind: Kind.NAME,\n                value: t.name,\n              },\n            },\n            selectionSet: resolveSelectionSet({\n              parent: type,\n              type: t,\n              models,\n              path,\n              ancestors,\n              ignore,\n              depthLimit,\n              circularReferenceDepth,\n              schema,\n              depth,\n              argNames,\n              selectedFields,\n            }) as SelectionSetNode,\n          };\n        })\n        .filter(fragmentNode => fragmentNode?.selectionSet?.selections?.length > 0),\n    };\n  }\n\n  if (isInterfaceType(type)) {\n    const types = Object.values(schema.getTypeMap()).filter(\n      (t: any) => isObjectType(t) && t.getInterfaces().includes(type)\n    ) as GraphQLObjectType[];\n\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: types\n        .filter(\n          t =>\n            !hasCircularRef([...ancestors, t], {\n              depth: circularReferenceDepth,\n            })\n        )\n        .map<InlineFragmentNode>(t => {\n          return {\n            kind: Kind.INLINE_FRAGMENT,\n            typeCondition: {\n              kind: Kind.NAMED_TYPE,\n              name: {\n                kind: Kind.NAME,\n                value: t.name,\n              },\n            },\n            selectionSet: resolveSelectionSet({\n              parent: type,\n              type: t,\n              models,\n              path,\n              ancestors,\n              ignore,\n              depthLimit,\n              circularReferenceDepth,\n              schema,\n              depth,\n              argNames,\n              selectedFields,\n            }) as SelectionSetNode,\n          };\n        })\n        .filter(fragmentNode => fragmentNode?.selectionSet?.selections?.length > 0),\n    };\n  }\n\n  if (isObjectType(type)) {\n    const isIgnored = ignore.includes(type.name) || ignore.includes(`${parent.name}.${path[path.length - 1]}`);\n    const isModel = models.includes(type.name);\n\n    if (!firstCall && isModel && !isIgnored) {\n      return {\n        kind: Kind.SELECTION_SET,\n        selections: [\n          {\n            kind: Kind.FIELD,\n            name: {\n              kind: Kind.NAME,\n              value: 'id',\n            },\n          },\n        ],\n      };\n    }\n\n    const fields = type.getFields();\n\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: Object.keys(fields)\n        .filter(fieldName => {\n          return !hasCircularRef([...ancestors, getNamedType(fields[fieldName].type)], {\n            depth: circularReferenceDepth,\n          });\n        })\n        .map(fieldName => {\n          const selectedSubFields = typeof selectedFields === 'object' ? selectedFields[fieldName] : true;\n          if (selectedSubFields) {\n            return resolveField({\n              type: type,\n              field: fields[fieldName],\n              models,\n              path: [...path, fieldName],\n              ancestors,\n              ignore,\n              depthLimit,\n              circularReferenceDepth,\n              schema,\n              depth,\n              argNames,\n              selectedFields: selectedSubFields,\n            });\n          }\n          return null;\n        })\n        .filter(f => {\n          if (f) {\n            if ('selectionSet' in f) {\n              return f.selectionSet?.selections?.length;\n            } else {\n              return true;\n            }\n          }\n          return false;\n        }),\n    };\n  }\n}\n\nfunction resolveVariable(arg: GraphQLArgument, name?: string): VariableDefinitionNode {\n  function resolveVariableType(type: GraphQLList<any>): ListTypeNode;\n  function resolveVariableType(type: GraphQLNonNull<any>): NonNullTypeNode;\n  function resolveVariableType(type: GraphQLInputType): TypeNode;\n  function resolveVariableType(type: GraphQLInputType): TypeNode {\n    if (isListType(type)) {\n      return {\n        kind: Kind.LIST_TYPE,\n        type: resolveVariableType(type.ofType),\n      };\n    }\n\n    if (isNonNullType(type)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: resolveVariableType(type.ofType),\n      };\n    }\n\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: {\n        kind: Kind.NAME,\n        value: type.name,\n      },\n    };\n  }\n\n  return {\n    kind: Kind.VARIABLE_DEFINITION,\n    variable: {\n      kind: Kind.VARIABLE,\n      name: {\n        kind: Kind.NAME,\n        value: name || arg.name,\n      },\n    },\n    type: resolveVariableType(arg.type),\n  };\n}\n\nfunction getArgumentName(name: string, path: string[]): string {\n  return camelCase([...path, name].join('_'));\n}\n\nfunction resolveField({\n  type,\n  field,\n  models,\n  firstCall,\n  path,\n  ancestors,\n  ignore,\n  depthLimit,\n  circularReferenceDepth,\n  schema,\n  depth,\n  argNames,\n  selectedFields,\n}: {\n  type: GraphQLObjectType;\n  field: GraphQLField<any, any>;\n  models: string[];\n  path: string[];\n  ancestors: GraphQLNamedType[];\n  firstCall?: boolean;\n  ignore: Ignore;\n  depthLimit: number;\n  circularReferenceDepth: number;\n  schema: GraphQLSchema;\n  depth: number;\n  selectedFields: SelectedFields;\n  argNames?: string[];\n}): SelectionNode {\n  const namedType = getNamedType(field.type);\n  let args: ArgumentNode[] = [];\n  let removeField = false;\n\n  if (field.args && field.args.length) {\n    args = field.args\n      .map<ArgumentNode>(arg => {\n        const argumentName = getArgumentName(arg.name, path);\n        if (argNames && !argNames.includes(argumentName)) {\n          if (isNonNullType(arg.type)) {\n            removeField = true;\n          }\n          return null as any;\n        }\n        if (!firstCall) {\n          addOperationVariable(resolveVariable(arg, argumentName));\n        }\n\n        return {\n          kind: Kind.ARGUMENT,\n          name: {\n            kind: Kind.NAME,\n            value: arg.name,\n          },\n          value: {\n            kind: Kind.VARIABLE,\n            name: {\n              kind: Kind.NAME,\n              value: getArgumentName(arg.name, path),\n            },\n          },\n        };\n      })\n      .filter(Boolean);\n  }\n\n  if (removeField) {\n    return null as any;\n  }\n\n  const fieldPath = [...path, field.name];\n  const fieldPathStr = fieldPath.join('.');\n  let fieldName = field.name;\n  if (fieldTypeMap.has(fieldPathStr) && fieldTypeMap.get(fieldPathStr) !== field.type.toString()) {\n    fieldName += (field.type as any).toString().replace('!', 'NonNull');\n  }\n  fieldTypeMap.set(fieldPathStr, field.type.toString());\n\n  if (!isScalarType(namedType) && !isEnumType(namedType)) {\n    return {\n      kind: Kind.FIELD,\n      name: {\n        kind: Kind.NAME,\n        value: field.name,\n      },\n      ...(fieldName !== field.name && { alias: { kind: Kind.NAME, value: fieldName } }),\n      selectionSet:\n        resolveSelectionSet({\n          parent: type,\n          type: namedType,\n          models,\n          firstCall,\n          path: fieldPath,\n          ancestors: [...ancestors, type],\n          ignore,\n          depthLimit,\n          circularReferenceDepth,\n          schema,\n          depth: depth + 1,\n          argNames,\n          selectedFields,\n        }) || undefined,\n      arguments: args,\n    };\n  }\n\n  return {\n    kind: Kind.FIELD,\n    name: {\n      kind: Kind.NAME,\n      value: field.name,\n    },\n    ...(fieldName !== field.name && { alias: { kind: Kind.NAME, value: fieldName } }),\n    arguments: args,\n  };\n}\n\nfunction hasCircularRef(\n  types: GraphQLNamedType[],\n  config: {\n    depth: number;\n  } = {\n    depth: 1,\n  }\n): boolean {\n  const type = types[types.length - 1];\n\n  if (isScalarType(type)) {\n    return false;\n  }\n\n  const size = types.filter(t => t.name === type.name).length;\n  return size > config.depth;\n}\n"],"version":3}