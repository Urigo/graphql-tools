{"file":"/home/ardat_000/Guild/graphql-tools/packages/schema/src/extendResolversFromInterfaces.ts","mappings":";;;AAIA,SAAgB,6BAA6B,CAAC,MAAqB,EAAE,SAAqB;IACxF,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC;QAC5B,GAAG,MAAM,CAAC,UAAU,EAAE;QACtB,GAAG,SAAS;KACb,CAAC,CAAC;IAEH,MAAM,iBAAiB,GAAG,EAAE,CAAC;IAC7B,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;QAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtC,IAAI,IAAI,IAAI,eAAe,IAAI,IAAI,EAAE;YACnC,MAAM,qBAAqB,GAAG,IAAI;iBAC/B,aAAa,EAAE;iBACf,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;iBACnC,MAAM,CAAC,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,IAAI,IAAI,CAAC,CAAC;YAE5D,iBAAiB,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;YACjC,qBAAqB,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE;gBACjD,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;oBAClD,IAAI,SAAS,KAAK,YAAY,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;wBAC7D,iBAAiB,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,GAAG,kBAAkB,CAAC,SAAS,CAAC,CAAC;qBACxE;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,SAAS,CAAC,QAAQ,CAAwC,CAAC;YACjF,iBAAiB,CAAC,QAAQ,CAAC,GAAG;gBAC5B,GAAG,iBAAiB,CAAC,QAAQ,CAAC;gBAC9B,GAAG,aAAa;aACjB,CAAC;SACH;aAAM;YACL,MAAM,aAAa,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC1C,IAAI,aAAa,IAAI,IAAI,EAAE;gBACzB,iBAAiB,CAAC,QAAQ,CAAC,GAAG,aAAa,CAAC;aAC7C;SACF;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AAtCD,sEAsCC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/schema/src/extendResolversFromInterfaces.ts"],"sourcesContent":["import { GraphQLSchema } from 'graphql';\n\nimport { IResolvers, IObjectTypeResolver } from '@graphql-tools/utils';\n\nexport function extendResolversFromInterfaces(schema: GraphQLSchema, resolvers: IResolvers): IResolvers {\n  const typeNames = Object.keys({\n    ...schema.getTypeMap(),\n    ...resolvers,\n  });\n\n  const extendedResolvers = {};\n  typeNames.forEach(typeName => {\n    const type = schema.getType(typeName);\n    if (type && 'getInterfaces' in type) {\n      const allInterfaceResolvers = type\n        .getInterfaces()\n        .map(iFace => resolvers[iFace.name])\n        .filter(interfaceResolvers => interfaceResolvers != null);\n\n      extendedResolvers[typeName] = {};\n      allInterfaceResolvers.forEach(interfaceResolvers => {\n        Object.keys(interfaceResolvers).forEach(fieldName => {\n          if (fieldName === '__isTypeOf' || !fieldName.startsWith('__')) {\n            extendedResolvers[typeName][fieldName] = interfaceResolvers[fieldName];\n          }\n        });\n      });\n\n      const typeResolvers = resolvers[typeName] as Record<string, IObjectTypeResolver>;\n      extendedResolvers[typeName] = {\n        ...extendedResolvers[typeName],\n        ...typeResolvers,\n      };\n    } else {\n      const typeResolvers = resolvers[typeName];\n      if (typeResolvers != null) {\n        extendedResolvers[typeName] = typeResolvers;\n      }\n    }\n  });\n\n  return extendedResolvers;\n}\n"],"version":3}