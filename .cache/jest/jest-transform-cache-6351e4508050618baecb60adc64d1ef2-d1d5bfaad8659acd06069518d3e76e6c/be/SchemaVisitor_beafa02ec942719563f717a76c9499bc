ec4b081b72006a8a75a134f54bcd9dc7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaVisitor = void 0;
// Abstract base class of any visitor implementation, defining the available
// visitor methods along with their parameter types, and providing a static
// helper function for determining whether a subclass implements a given
// visitor method, as opposed to inheriting one of the stubs defined here.
class SchemaVisitor {
    // Determine if this SchemaVisitor (sub)class implements a particular
    // visitor method.
    static implementsVisitorMethod(methodName) {
        if (!methodName.startsWith('visit')) {
            return false;
        }
        const method = this.prototype[methodName];
        if (typeof method !== 'function') {
            return false;
        }
        if (this.name === 'SchemaVisitor') {
            // The SchemaVisitor class implements every visitor method.
            return true;
        }
        const stub = SchemaVisitor.prototype[methodName];
        if (method === stub) {
            // If this.prototype[methodName] was just inherited from SchemaVisitor,
            // then this class does not really implement the method.
            return false;
        }
        return true;
    }
    // Concrete subclasses of SchemaVisitor should override one or more of these
    // visitor methods, in order to express their interest in handling certain
    // schema types/locations. Each method may return null to remove the given
    // type from the schema, a non-null value of the same type to update the
    // type in the schema, or nothing to leave the type as it was.
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    visitSchema(_schema) { }
    visitScalar(_scalar
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    ) { }
    visitObject(_object
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    ) { }
    visitFieldDefinition(_field, _details
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    ) { }
    visitArgumentDefinition(_argument, _details
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    ) { }
    visitInterface(_iface
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    ) { }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    visitUnion(_union) { }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    visitEnum(_type) { }
    visitEnumValue(_value, _details
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    ) { }
    visitInputObject(_object
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    ) { }
    visitInputFieldDefinition(_field, _details
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    ) { }
}
exports.SchemaVisitor = SchemaVisitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJkYXRfMDAwL0d1aWxkL2dyYXBocWwtdG9vbHMvcGFja2FnZXMvdXRpbHMvc3JjL1NjaGVtYVZpc2l0b3IudHMiLCJtYXBwaW5ncyI6Ijs7O0FBY0EsNEVBQTRFO0FBQzVFLDJFQUEyRTtBQUMzRSx3RUFBd0U7QUFDeEUsMEVBQTBFO0FBQzFFLE1BQXNCLGFBQWE7SUFNakMscUVBQXFFO0lBQ3JFLGtCQUFrQjtJQUNYLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxVQUFrQjtRQUN0RCxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNuQyxPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsRUFBRTtZQUNoQyxPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLGVBQWUsRUFBRTtZQUNqQywyREFBMkQ7WUFDM0QsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDakQsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQ25CLHVFQUF1RTtZQUN2RSx3REFBd0Q7WUFDeEQsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELDRFQUE0RTtJQUM1RSwwRUFBMEU7SUFDMUUsMEVBQTBFO0lBQzFFLHdFQUF3RTtJQUN4RSw4REFBOEQ7SUFFOUQsZ0VBQWdFO0lBQ3pELFdBQVcsQ0FBQyxPQUFzQixJQUFTLENBQUM7SUFFNUMsV0FBVyxDQUNoQixPQUEwQjtJQUMxQixnRUFBZ0U7UUFDOUIsQ0FBQztJQUU5QixXQUFXLENBQ2hCLE9BQTBCO0lBQzFCLGdFQUFnRTtRQUM5QixDQUFDO0lBRTlCLG9CQUFvQixDQUN6QixNQUE4QixFQUM5QixRQUVDO0lBQ0QsZ0VBQWdFO1FBQ3pCLENBQUM7SUFFbkMsdUJBQXVCLENBQzVCLFNBQTBCLEVBQzFCLFFBR0M7SUFDRCxnRUFBZ0U7UUFDaEMsQ0FBQztJQUU1QixjQUFjLENBQ25CLE1BQTRCO0lBQzVCLGdFQUFnRTtRQUMzQixDQUFDO0lBRXhDLGdFQUFnRTtJQUN6RCxVQUFVLENBQUMsTUFBd0IsSUFBbUMsQ0FBQztJQUU5RSxnRUFBZ0U7SUFDekQsU0FBUyxDQUFDLEtBQXNCLElBQWtDLENBQUM7SUFFbkUsY0FBYyxDQUNuQixNQUF3QixFQUN4QixRQUVDO0lBQ0QsZ0VBQWdFO1FBQy9CLENBQUM7SUFFN0IsZ0JBQWdCLENBQ3JCLE9BQStCO0lBQy9CLGdFQUFnRTtRQUN6QixDQUFDO0lBRW5DLHlCQUF5QixDQUM5QixNQUF5QixFQUN6QixRQUVDO0lBQ0QsZ0VBQWdFO1FBQzlCLENBQUM7Q0FDdEM7QUFwR0Qsc0NBb0dDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2FyZGF0XzAwMC9HdWlsZC9ncmFwaHFsLXRvb2xzL3BhY2thZ2VzL3V0aWxzL3NyYy9TY2hlbWFWaXNpdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEdyYXBoUUxBcmd1bWVudCxcbiAgR3JhcGhRTEVudW1UeXBlLFxuICBHcmFwaFFMRW51bVZhbHVlLFxuICBHcmFwaFFMRmllbGQsXG4gIEdyYXBoUUxJbnB1dEZpZWxkLFxuICBHcmFwaFFMSW5wdXRPYmplY3RUeXBlLFxuICBHcmFwaFFMSW50ZXJmYWNlVHlwZSxcbiAgR3JhcGhRTE9iamVjdFR5cGUsXG4gIEdyYXBoUUxTY2FsYXJUeXBlLFxuICBHcmFwaFFMU2NoZW1hLFxuICBHcmFwaFFMVW5pb25UeXBlLFxufSBmcm9tICdncmFwaHFsJztcblxuLy8gQWJzdHJhY3QgYmFzZSBjbGFzcyBvZiBhbnkgdmlzaXRvciBpbXBsZW1lbnRhdGlvbiwgZGVmaW5pbmcgdGhlIGF2YWlsYWJsZVxuLy8gdmlzaXRvciBtZXRob2RzIGFsb25nIHdpdGggdGhlaXIgcGFyYW1ldGVyIHR5cGVzLCBhbmQgcHJvdmlkaW5nIGEgc3RhdGljXG4vLyBoZWxwZXIgZnVuY3Rpb24gZm9yIGRldGVybWluaW5nIHdoZXRoZXIgYSBzdWJjbGFzcyBpbXBsZW1lbnRzIGEgZ2l2ZW5cbi8vIHZpc2l0b3IgbWV0aG9kLCBhcyBvcHBvc2VkIHRvIGluaGVyaXRpbmcgb25lIG9mIHRoZSBzdHVicyBkZWZpbmVkIGhlcmUuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU2NoZW1hVmlzaXRvciB7XG4gIC8vIEFsbCBTY2hlbWFWaXNpdG9yIGluc3RhbmNlcyBhcmUgY3JlYXRlZCB3aGlsZSB2aXNpdGluZyBhIHNwZWNpZmljXG4gIC8vIEdyYXBoUUxTY2hlbWEgb2JqZWN0LCBzbyB0aGlzIHByb3BlcnR5IGhvbGRzIGEgcmVmZXJlbmNlIHRvIHRoYXQgb2JqZWN0LFxuICAvLyBpbiBjYXNlIGEgdmlzaXRvciBtZXRob2QgbmVlZHMgdG8gcmVmZXIgdG8gdGhpcy5zY2hlbWEuXG4gIHB1YmxpYyBzY2hlbWEhOiBHcmFwaFFMU2NoZW1hO1xuXG4gIC8vIERldGVybWluZSBpZiB0aGlzIFNjaGVtYVZpc2l0b3IgKHN1YiljbGFzcyBpbXBsZW1lbnRzIGEgcGFydGljdWxhclxuICAvLyB2aXNpdG9yIG1ldGhvZC5cbiAgcHVibGljIHN0YXRpYyBpbXBsZW1lbnRzVmlzaXRvck1ldGhvZChtZXRob2ROYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoIW1ldGhvZE5hbWUuc3RhcnRzV2l0aCgndmlzaXQnKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IG1ldGhvZCA9IHRoaXMucHJvdG90eXBlW21ldGhvZE5hbWVdO1xuICAgIGlmICh0eXBlb2YgbWV0aG9kICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmFtZSA9PT0gJ1NjaGVtYVZpc2l0b3InKSB7XG4gICAgICAvLyBUaGUgU2NoZW1hVmlzaXRvciBjbGFzcyBpbXBsZW1lbnRzIGV2ZXJ5IHZpc2l0b3IgbWV0aG9kLlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3Qgc3R1YiA9IFNjaGVtYVZpc2l0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdO1xuICAgIGlmIChtZXRob2QgPT09IHN0dWIpIHtcbiAgICAgIC8vIElmIHRoaXMucHJvdG90eXBlW21ldGhvZE5hbWVdIHdhcyBqdXN0IGluaGVyaXRlZCBmcm9tIFNjaGVtYVZpc2l0b3IsXG4gICAgICAvLyB0aGVuIHRoaXMgY2xhc3MgZG9lcyBub3QgcmVhbGx5IGltcGxlbWVudCB0aGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gQ29uY3JldGUgc3ViY2xhc3NlcyBvZiBTY2hlbWFWaXNpdG9yIHNob3VsZCBvdmVycmlkZSBvbmUgb3IgbW9yZSBvZiB0aGVzZVxuICAvLyB2aXNpdG9yIG1ldGhvZHMsIGluIG9yZGVyIHRvIGV4cHJlc3MgdGhlaXIgaW50ZXJlc3QgaW4gaGFuZGxpbmcgY2VydGFpblxuICAvLyBzY2hlbWEgdHlwZXMvbG9jYXRpb25zLiBFYWNoIG1ldGhvZCBtYXkgcmV0dXJuIG51bGwgdG8gcmVtb3ZlIHRoZSBnaXZlblxuICAvLyB0eXBlIGZyb20gdGhlIHNjaGVtYSwgYSBub24tbnVsbCB2YWx1ZSBvZiB0aGUgc2FtZSB0eXBlIHRvIHVwZGF0ZSB0aGVcbiAgLy8gdHlwZSBpbiB0aGUgc2NoZW1hLCBvciBub3RoaW5nIHRvIGxlYXZlIHRoZSB0eXBlIGFzIGl0IHdhcy5cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gIHB1YmxpYyB2aXNpdFNjaGVtYShfc2NoZW1hOiBHcmFwaFFMU2NoZW1hKTogdm9pZCB7fVxuXG4gIHB1YmxpYyB2aXNpdFNjYWxhcihcbiAgICBfc2NhbGFyOiBHcmFwaFFMU2NhbGFyVHlwZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgKTogR3JhcGhRTFNjYWxhclR5cGUgfCB2b2lkIHwgbnVsbCB7fVxuXG4gIHB1YmxpYyB2aXNpdE9iamVjdChcbiAgICBfb2JqZWN0OiBHcmFwaFFMT2JqZWN0VHlwZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgKTogR3JhcGhRTE9iamVjdFR5cGUgfCB2b2lkIHwgbnVsbCB7fVxuXG4gIHB1YmxpYyB2aXNpdEZpZWxkRGVmaW5pdGlvbihcbiAgICBfZmllbGQ6IEdyYXBoUUxGaWVsZDxhbnksIGFueT4sXG4gICAgX2RldGFpbHM6IHtcbiAgICAgIG9iamVjdFR5cGU6IEdyYXBoUUxPYmplY3RUeXBlIHwgR3JhcGhRTEludGVyZmFjZVR5cGU7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgKTogR3JhcGhRTEZpZWxkPGFueSwgYW55PiB8IHZvaWQgfCBudWxsIHt9XG5cbiAgcHVibGljIHZpc2l0QXJndW1lbnREZWZpbml0aW9uKFxuICAgIF9hcmd1bWVudDogR3JhcGhRTEFyZ3VtZW50LFxuICAgIF9kZXRhaWxzOiB7XG4gICAgICBmaWVsZDogR3JhcGhRTEZpZWxkPGFueSwgYW55PjtcbiAgICAgIG9iamVjdFR5cGU6IEdyYXBoUUxPYmplY3RUeXBlIHwgR3JhcGhRTEludGVyZmFjZVR5cGU7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgKTogR3JhcGhRTEFyZ3VtZW50IHwgdm9pZCB8IG51bGwge31cblxuICBwdWJsaWMgdmlzaXRJbnRlcmZhY2UoXG4gICAgX2lmYWNlOiBHcmFwaFFMSW50ZXJmYWNlVHlwZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgKTogR3JhcGhRTEludGVyZmFjZVR5cGUgfCB2b2lkIHwgbnVsbCB7fVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgcHVibGljIHZpc2l0VW5pb24oX3VuaW9uOiBHcmFwaFFMVW5pb25UeXBlKTogR3JhcGhRTFVuaW9uVHlwZSB8IHZvaWQgfCBudWxsIHt9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICBwdWJsaWMgdmlzaXRFbnVtKF90eXBlOiBHcmFwaFFMRW51bVR5cGUpOiBHcmFwaFFMRW51bVR5cGUgfCB2b2lkIHwgbnVsbCB7fVxuXG4gIHB1YmxpYyB2aXNpdEVudW1WYWx1ZShcbiAgICBfdmFsdWU6IEdyYXBoUUxFbnVtVmFsdWUsXG4gICAgX2RldGFpbHM6IHtcbiAgICAgIGVudW1UeXBlOiBHcmFwaFFMRW51bVR5cGU7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgKTogR3JhcGhRTEVudW1WYWx1ZSB8IHZvaWQgfCBudWxsIHt9XG5cbiAgcHVibGljIHZpc2l0SW5wdXRPYmplY3QoXG4gICAgX29iamVjdDogR3JhcGhRTElucHV0T2JqZWN0VHlwZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgKTogR3JhcGhRTElucHV0T2JqZWN0VHlwZSB8IHZvaWQgfCBudWxsIHt9XG5cbiAgcHVibGljIHZpc2l0SW5wdXRGaWVsZERlZmluaXRpb24oXG4gICAgX2ZpZWxkOiBHcmFwaFFMSW5wdXRGaWVsZCxcbiAgICBfZGV0YWlsczoge1xuICAgICAgb2JqZWN0VHlwZTogR3JhcGhRTElucHV0T2JqZWN0VHlwZTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICApOiBHcmFwaFFMSW5wdXRGaWVsZCB8IHZvaWQgfCBudWxsIHt9XG59XG4iXSwidmVyc2lvbiI6M30=