{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/updateArgument.ts","mappings":";;;AAAA,qCAAuF;AAEvF,+CAA4C;AAE5C,SAAgB,cAAc,CAC5B,OAAe,EACf,OAAyB,EACzB,aAA2C,EAC3C,sBAA8D,EAC9D,cAAmC,EACnC,MAAW;IAEX,IAAI,OAAO,CAAC;IACZ,IAAI,qBAAqB,GAAG,CAAC,CAAC;IAC9B,GAAG;QACD,OAAO,GAAG,KAAK,CAAC,qBAAqB,EAAE,CAAC,CAAC,QAAQ,EAAE,IAAI,OAAO,EAAE,CAAC;KAClE,QAAQ,OAAO,IAAI,sBAAsB,EAAE;IAE5C,aAAa,CAAC,OAAO,CAAC,GAAG;QACvB,IAAI,EAAE,cAAI,CAAC,QAAQ;QACnB,IAAI,EAAE;YACJ,IAAI,EAAE,cAAI,CAAC,IAAI;YACf,KAAK,EAAE,OAAO;SACf;QACD,KAAK,EAAE;YACL,IAAI,EAAE,cAAI,CAAC,QAAQ;YACnB,IAAI,EAAE;gBACJ,IAAI,EAAE,cAAI,CAAC,IAAI;gBACf,KAAK,EAAE,OAAO;aACf;SACF;KACF,CAAC;IACF,sBAAsB,CAAC,OAAO,CAAC,GAAG;QAChC,IAAI,EAAE,cAAI,CAAC,mBAAmB;QAC9B,QAAQ,EAAE;YACR,IAAI,EAAE,cAAI,CAAC,QAAQ;YACnB,IAAI,EAAE;gBACJ,IAAI,EAAE,cAAI,CAAC,IAAI;gBACf,KAAK,EAAE,OAAO;aACf;SACF;QACD,IAAI,EAAE,yBAAW,CAAC,OAAO,CAAC;KAC3B,CAAC;IAEF,IAAI,MAAM,KAAK,SAAS,EAAE;QACxB,OAAO,cAAc,CAAC,OAAO,CAAC,CAAC;KAChC;SAAM;QACL,cAAc,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;KAClC;AACH,CAAC;AA7CD,wCA6CC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/updateArgument.ts"],"sourcesContent":["import { GraphQLInputType, ArgumentNode, VariableDefinitionNode, Kind } from 'graphql';\n\nimport { astFromType } from './astFromType';\n\nexport function updateArgument(\n  argName: string,\n  argType: GraphQLInputType,\n  argumentNodes: Record<string, ArgumentNode>,\n  variableDefinitionsMap: Record<string, VariableDefinitionNode>,\n  variableValues: Record<string, any>,\n  newArg: any\n): void {\n  let varName;\n  let numGeneratedVariables = 0;\n  do {\n    varName = `_v${(numGeneratedVariables++).toString()}_${argName}`;\n  } while (varName in variableDefinitionsMap);\n\n  argumentNodes[argName] = {\n    kind: Kind.ARGUMENT,\n    name: {\n      kind: Kind.NAME,\n      value: argName,\n    },\n    value: {\n      kind: Kind.VARIABLE,\n      name: {\n        kind: Kind.NAME,\n        value: varName,\n      },\n    },\n  };\n  variableDefinitionsMap[varName] = {\n    kind: Kind.VARIABLE_DEFINITION,\n    variable: {\n      kind: Kind.VARIABLE,\n      name: {\n        kind: Kind.NAME,\n        value: varName,\n      },\n    },\n    type: astFromType(argType),\n  };\n\n  if (newArg === undefined) {\n    delete variableValues[varName];\n  } else {\n    variableValues[varName] = newArg;\n  }\n}\n"],"version":3}