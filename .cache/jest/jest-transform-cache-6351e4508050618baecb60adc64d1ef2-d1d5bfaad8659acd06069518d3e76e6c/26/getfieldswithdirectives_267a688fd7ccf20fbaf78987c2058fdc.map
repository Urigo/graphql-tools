{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/get-fields-with-directives.ts","mappings":";;;AAAA,qCAQiB;AAkBjB,SAAS,mBAAmB,CAAC,KAAgB;IAC3C,QAAQ,KAAK,CAAC,IAAI,EAAE;QAClB,KAAK,cAAI,CAAC,GAAG;YACX,OAAO,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/B,KAAK,cAAI,CAAC,KAAK;YACb,OAAO,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACjC,KAAK,cAAI,CAAC,OAAO;YACf,OAAO,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC9B,KAAK,cAAI,CAAC,MAAM,CAAC;QACjB,KAAK,cAAI,CAAC,IAAI;YACZ,OAAO,KAAK,CAAC,KAAK,CAAC;QACrB,KAAK,cAAI,CAAC,IAAI;YACZ,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;QACvD,KAAK,cAAI,CAAC,MAAM;YACd,OAAO,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,mBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC3G,KAAK,cAAI,CAAC,IAAI;YACZ,OAAO,IAAI,CAAC;QACd;YACE,OAAO,IAAI,CAAC;KACf;AACH,CAAC;AAED,SAAgB,uBAAuB,CAAC,YAA0B,EAAE,UAAmB,EAAE;IACvF,MAAM,MAAM,GAA6B,EAAE,CAAC;IAE5C,IAAI,QAAQ,GAAG,CAAC,sBAAsB,EAAE,qBAAqB,CAAC,CAAC;IAE/D,IAAI,OAAO,CAAC,iBAAiB,EAAE;QAC7B,QAAQ,GAAG,CAAC,GAAG,QAAQ,EAAE,2BAA2B,EAAE,0BAA0B,CAAC,CAAC;KACnF;IAED,MAAM,QAAQ,GAAG,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAoB,CAAC;IAExG,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE;QAC3B,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;QAEjC,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE;YAC/B,IAAI,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnD,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;gBACnC,MAAM,GAAG,GAAG,GAAG,QAAQ,IAAI,SAAS,EAAE,CAAC;gBACvC,MAAM,UAAU,GAAqB,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;oBAC9D,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK;oBAClB,IAAI,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,MAAM,CAC9B,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,EAC9E,EAAE,CACH;iBACF,CAAC,CAAC,CAAC;gBAEJ,MAAM,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC;aAC1B;SACF;KACF;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAhCD,0DAgCC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/get-fields-with-directives.ts"],"sourcesContent":["import {\n  DocumentNode,\n  ObjectTypeDefinitionNode,\n  ObjectTypeExtensionNode,\n  InputObjectTypeDefinitionNode,\n  InputObjectTypeExtensionNode,\n  ValueNode,\n  Kind,\n} from 'graphql';\n\nexport type DirectiveArgs = { [name: string]: any };\nexport type DirectiveUsage = { name: string; args: DirectiveArgs };\nexport type TypeAndFieldToDirectives = {\n  [typeAndField: string]: DirectiveUsage[];\n};\n\ninterface Options {\n  includeInputTypes?: boolean;\n}\n\ntype SelectedNodes =\n  | ObjectTypeDefinitionNode\n  | ObjectTypeExtensionNode\n  | InputObjectTypeDefinitionNode\n  | InputObjectTypeExtensionNode;\n\nfunction parseDirectiveValue(value: ValueNode): any {\n  switch (value.kind) {\n    case Kind.INT:\n      return parseInt(value.value);\n    case Kind.FLOAT:\n      return parseFloat(value.value);\n    case Kind.BOOLEAN:\n      return Boolean(value.value);\n    case Kind.STRING:\n    case Kind.ENUM:\n      return value.value;\n    case Kind.LIST:\n      return value.values.map(v => parseDirectiveValue(v));\n    case Kind.OBJECT:\n      return value.fields.reduce((prev, v) => ({ ...prev, [v.name.value]: parseDirectiveValue(v.value) }), {});\n    case Kind.NULL:\n      return null;\n    default:\n      return null;\n  }\n}\n\nexport function getFieldsWithDirectives(documentNode: DocumentNode, options: Options = {}): TypeAndFieldToDirectives {\n  const result: TypeAndFieldToDirectives = {};\n\n  let selected = ['ObjectTypeDefinition', 'ObjectTypeExtension'];\n\n  if (options.includeInputTypes) {\n    selected = [...selected, 'InputObjectTypeDefinition', 'InputObjectTypeExtension'];\n  }\n\n  const allTypes = documentNode.definitions.filter(obj => selected.includes(obj.kind)) as SelectedNodes[];\n\n  for (const type of allTypes) {\n    const typeName = type.name.value;\n\n    for (const field of type.fields) {\n      if (field.directives && field.directives.length > 0) {\n        const fieldName = field.name.value;\n        const key = `${typeName}.${fieldName}`;\n        const directives: DirectiveUsage[] = field.directives.map(d => ({\n          name: d.name.value,\n          args: (d.arguments || []).reduce(\n            (prev, arg) => ({ ...prev, [arg.name.value]: parseDirectiveValue(arg.value) }),\n            {}\n          ),\n        }));\n\n        result[key] = directives;\n      }\n    }\n  }\n\n  return result;\n}\n"],"version":3}