{"file":"/home/ardat_000/Guild/graphql-tools/packages/mock/tests/store.spec.ts","mappings":";;AAAA,qCAAsC;AACtC,gCAAyC;AACzC,wCAAgD;AAChD,wCAAuC;AAEvC,MAAM,QAAQ,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuDhB,CAAC;AAEF,MAAM,MAAM,GAAG,qBAAW,CAAC,QAAQ,CAAC,CAAC;AAErC,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;QACjE,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAC1C,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;QACxE,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAC1C,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAW,CAAC;QACxD,MAAM,CAAC,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAC1C,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAEjC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;QACjE,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAC1C,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IACnF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wEAAwE,EAAE,GAAG,EAAE;QAChF,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAC1C,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC;YACtB,QAAQ,EAAE,OAAO;YACjB,GAAG,EAAE,MAAM;YACX,SAAS,EAAE,UAAU;YACrB,SAAS,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE;SACvB,CAAC,CAAC;QAEH,mBAAW,CAAC,KAAK,CAAC,CAAC;QAEnB,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC;YACzB,QAAQ,EAAE,OAAO;YACjB,GAAG,EAAE,MAAM;YACX,SAAS,EAAE,UAAU;YACrB,SAAS,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE;SACvB,CAAC,CAAC;QAEH,mBAAW,CAAC,QAAQ,CAAC,CAAC;QAEtB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAC1C,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC;YACtB,QAAQ,EAAE,OAAO;YACjB,GAAG,EAAE,MAAM;YACX,SAAS,EAAE,QAAQ;YACnB,SAAS,EAAE,EAAE;SACd,CAAC,CAAC;QAEH,mBAAW,CAAC,KAAK,CAAC,CAAC;QAEnB,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC;YACzB,QAAQ,EAAE,OAAO;YACjB,GAAG,EAAE,MAAM;YACX,SAAS,EAAE,QAAQ;SACpB,CAAC,CAAC;QAEH,mBAAW,CAAC,QAAQ,CAAC,CAAC;QAEtB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,oEAAoE,EAAE,GAAG,EAAE;QAC5E,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAC1C,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC;YACtB,QAAQ,EAAE,OAAO;YACjB,GAAG,EAAE,MAAM;YACX,SAAS,EAAE,UAAU;YACrB,SAAS,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE;SACvB,CAAC,CAAC;QAEH,mBAAW,CAAC,KAAK,CAAC,CAAC;QAEnB,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC;YACtB,QAAQ,EAAE,OAAO;YACjB,GAAG,EAAE,MAAM;YACX,SAAS,EAAE,UAAU;YACrB,SAAS,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE;SACvB,CAAC,CAAC;QAEH,mBAAW,CAAC,KAAK,CAAC,CAAC;QAEnB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAE1C,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAEtC,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACpC,mBAAW,CAAC,IAAI,CAAC,CAAC;QAElB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,sEAAsE,EAAE,GAAG,EAAE;QAC9E,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAE1C,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAE/B,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;QAChE,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAE1C,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC;QAElE,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;IAC9C,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAC1C,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAO,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACvC,MAAM,KAAK,GAAG,qBAAe,CAAC;YAC5B,MAAM;YACN,KAAK,EAAE;gBACL,IAAI,EAAE;oBACJ,IAAI,EAAE,GAAG,EAAE,CAAC,UAAU;iBACvB;aACF;SACF,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACpE,MAAM,KAAK,GAAG,qBAAe,CAAC;YAC5B,MAAM;YACN,KAAK,EAAE;gBACL,IAAI,EAAE,GAAG,EAAE;oBACT,MAAM,QAAQ,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;oBACrD,OAAO;wBACL,GAAG,EAAE,QAAQ;wBACb,IAAI,EAAE,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC;qBACpC,CAAA;gBACH,CAAC;aACF;SACF,CAAC,CAAC;QAEH,MAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAW,CAAC;QAEtD,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACrC,MAAM,KAAK,GAAG,qBAAe,CAAC;YAC5B,MAAM;YACN,KAAK,EAAE;gBACL,IAAI,EAAE;oBACJ,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;iBAC1C;aACF;SACF,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,CAAU,CAAC;QACjE,MAAM,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACpC,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAC1F,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAC1C,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;QACnD,MAAM,CAAC,KAAK,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAC1C,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,CAAa,CAAC;QAElE,MAAM,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACvC,MAAM,CAAC,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAGH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC1D,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAC1C,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;QAEpD,MAAM,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACtC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;QAC3C,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAE1C,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE;YACtB,IAAI,EAAE,WAAW;YACjB,GAAG,EAAE,EAAE;SACR,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAC/B,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAE1C,KAAK,CAAC,GAAG,CAAC,eAAO,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;QACtD,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACnC,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAE1C,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE;YACnC,EAAE,EAAE,IAAI;YACR,IAAI,EAAE,WAAW;YACjB,GAAG,EAAE,EAAE;SACR,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAC,CAAC,CAAC;QAC/F,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAE1C,KAAK,CAAC,GAAG,CAAC,eAAO,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,WAAW,EAAC,CAAC,CAAC;QACvD,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC5C,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAE1C,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE;YACnC,EAAE,EAAE,IAAI;SACT,CAAC,CAAC;QAEH,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE;YACnC,IAAI,EAAE,WAAW;SAClB,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;QAChG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAE1C,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE;YACjC;gBACE,IAAI,EAAE,MAAM;aACb,EAAE;gBACD,IAAI,EAAE,MAAM;aACb,EAAE;gBACD,IAAI,EAAE,MAAM;aACf;SAAC,CAAC,CAAC;QAEJ,MAAM,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,CAAU,CAAC;QAClE,MAAM,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAEtC,MAAM,cAAc,GAAG,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAChG,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAE1C,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEvD,MAAM,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,UAAU,CAAa,CAAC;QACnE,MAAM,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAEnC,MAAM,CAAC,OAAO,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wEAAwE,EAAE,GAAG,EAAE;QAChF,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAE1C,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;QAExF,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,YAAY,CAAe,CAAC;QACzE,MAAM,CAAC,YAAY,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAExC,MAAM,CAAC,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAE1C,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEtD,MAAM,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,CAAU,CAAC;QAClE,MAAM,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAEtC,oCAAoC;QACpC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,MAAM,QAAQ,GAAG;;;;;;;;;;KAUhB,CAAC;QAEF,MAAM,MAAM,GAAG,qBAAW,CAAC,QAAQ,CAAC,CAAC;QAErC,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAgB,CAAC;QACjE,MAAM,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;YAE1C,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,WAAW,EAAC,CAAQ,CAAC;YAE/D,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;YAE1C,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,WAAW,EAAC,CAAQ,CAAC;YAErD,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAC7B,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;YAE1C,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;YAC7C,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,UAAU,EAAC,CAAQ,CAAC;YAEpD,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;YAC3B,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;gBAE1C,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAQ,CAAC;gBAEzD,MAAM,CAAC,CAAC,qBAAqB,EAAE,cAAc,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,EAAE,CAAA;YAC/F,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;gBAChC,MAAM,KAAK,GAAG,qBAAe,CAAC;oBAC5B,MAAM;oBACN,KAAK,EAAE;wBACL,SAAS,EAAE,GAAG,EAAE;4BACd,OAAO;gCACP,UAAU,EAAE,qBAAqB;gCACjC,KAAK,EAAE,OAAO;6BACf,CAAA;wBACH,CAAC;qBACA;iBACF,CAAC,CAAC;gBAEH,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAQ,CAAC;gBAEzD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;gBAC9D,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;YACvD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;gBAC/C,MAAM,KAAK,GAAG,qBAAe,CAAC;oBAC5B,MAAM;oBACN,KAAK,EAAE;wBACL,SAAS,EAAE,GAAG,EAAE;4BACd,OAAO;gCACL,EAAE,EAAE,0BAA0B;gCAC9B,UAAU,EAAE,qBAAqB;6BAClC,CAAA;wBACH,CAAC;qBACF;iBACF,CAAC,CAAC;gBAEH,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAQ,CAAC;gBAEzD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;gBAC9D,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAA;YACvE,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;gBAChC,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;gBAE1C,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE;oBACtB,KAAK,EAAE;wBACL,UAAU,EAAE,qBAAqB;wBACjC,KAAK,EAAE,OAAO;qBACf;iBACF,CAAC,CAAC;gBACH,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAQ,CAAC;gBAEzD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;gBAC9D,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;YACvD,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;YAC/B,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;gBAE1C,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,CAAQ,CAAC;gBAE9D,MAAM,CAAC,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,EAAE,CAAA;YACnF,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;gBAChC,MAAM,KAAK,GAAG,qBAAe,CAAC;oBAC5B,MAAM;oBACN,KAAK,EAAE;wBACL,IAAI,EAAE,GAAG,EAAE;4BACT,OAAO;gCACL,UAAU,EAAE,UAAU;gCACtB,IAAI,EAAE,WAAW;6BAClB,CAAA;wBACH,CAAC;qBACF;iBACF,CAAC,CAAC;gBAEH,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,CAAQ,CAAC;gBAE9D,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBAClD,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;YACzD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;gBAChC,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;gBAE1C,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE;oBACzB,QAAQ,EAAE;wBACR,UAAU,EAAE,UAAU;wBACtB,IAAI,EAAE,WAAW;qBAClB;iBACF,CAAC,CAAC;gBACH,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,CAAQ,CAAC;gBAE9D,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBAClD,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;YACzD,CAAC,CAAC,CAAA;QAEJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IACF,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,KAAK,GAAG,qBAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAE1C,KAAK,CAAC,GAAG,CAAC,eAAO,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;QACtD,KAAK,CAAC,KAAK,EAAE,CAAC;QACd,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACnE,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/mock/tests/store.spec.ts"],"sourcesContent":["import { buildSchema } from 'graphql';\nimport { createMockStore } from '../src';\nimport { assertIsRef, Ref } from '../src/types';\nimport { makeRef } from '../src/utils';\n\nconst typeDefs = `\ntype User {\n  id: ID!\n  age: Int!\n  name: String!\n  surnames: [String!]!\n  listOfList: [[String]]!\n\n  friends: [User!]!\n\n  sex: Sex\n\n  image: UserImage!\n}\n\nunion UserImage = UserImageSolidColor | UserImageURL\n\ntype UserImageSolidColor {\n  id: ID!\n  color: String!\n}\n\ntype UserImageURL {\n  id: ID!\n  url: String!\n}\n\nenum Sex {\n  Male,\n  Female,\n  Other\n}\n\ninterface Book {\n  id: ID!\n  title: String\n}\n\ntype TextBook implements Book {\n  id: ID!\n  title: String\n  text: String\n}\n\ntype ColoringBook implements Book {\n  id: ID!\n  title: String\n  colors: [String]\n}\n\ntype Query {\n  viewer: User!\n  userById(id: ID!): User!\n  bookById(id: ID!): Book!\n}\n`;\n\nconst schema = buildSchema(typeDefs);\n\ndescribe('MockStore', () => {\n  it('should generate a value properly without provided mocks', () => {\n    const store = createMockStore({ schema });\n    expect(store.get('User', '123', 'name')).toEqual('Hello World');\n  });\n\n  it('should generate a value properly without provided mocks (enum)', () => {\n    const store = createMockStore({ schema });\n    const value = store.get('User', '123', 'sex') as string;\n    expect(['Male', 'Female', 'Other'].indexOf(value)).not.toEqual(-1);\n  });\n\n  it('should generate an id that matches key', () => {\n    const store = createMockStore({ schema });\n    store.get('User', '123', 'name');\n\n    expect(store.get('User', '123', 'id')).toEqual('123');\n  });\n\n  it('should return the same value when called multiple times', () => {\n    const store = createMockStore({ schema });\n    expect(store.get('User', '123', 'age')).toEqual(store.get('User', '123', 'age'));\n  });\n\n  it('should return the same value when called multiple times with same args', () => {\n    const store = createMockStore({ schema });\n    const user1 = store.get({\n      typeName: 'Query',\n      key: 'ROOT',\n      fieldName: 'userById',\n      fieldArgs: { id: '1' }\n    });\n\n    assertIsRef(user1);\n\n    const user1Bis = store.get({\n      typeName: 'Query',\n      key: 'ROOT',\n      fieldName: 'userById',\n      fieldArgs: { id: '1' }\n    });\n\n    assertIsRef(user1Bis);\n\n    expect(user1.$ref).toEqual(user1Bis.$ref);\n  });\n\n  it('should treat empty object args the same as no arg', () => {\n    const store = createMockStore({ schema });\n    const user1 = store.get({\n      typeName: 'Query',\n      key: 'ROOT',\n      fieldName: 'viewer',\n      fieldArgs: {}\n    });\n\n    assertIsRef(user1);\n\n    const user1Bis = store.get({\n      typeName: 'Query',\n      key: 'ROOT',\n      fieldName: 'viewer',\n    });\n\n    assertIsRef(user1Bis);\n\n    expect(user1.$ref).toEqual(user1Bis.$ref);\n  })\n\n  it('sould return a different value if called with different field args', () => {\n    const store = createMockStore({ schema });\n    const user1 = store.get({\n      typeName: 'Query',\n      key: 'ROOT',\n      fieldName: 'userById',\n      fieldArgs: { id: '1' }\n    });\n\n    assertIsRef(user1);\n\n    const user2 = store.get({\n      typeName: 'Query',\n      key: 'ROOT',\n      fieldName: 'userById',\n      fieldArgs: { id: '2' }\n    });\n\n    assertIsRef(user2);\n\n    expect(user1.$ref).not.toEqual(user2.$ref);\n  });\n\n  it('should return a ref when called with no `fieldName`', () => {\n    const store = createMockStore({ schema });\n\n    const user = store.get('User', '123');\n\n    expect(user).toHaveProperty('$ref');\n    assertIsRef(user);\n\n    expect(user.$ref.key).toEqual('123');\n  })\n\n  it('should return a random ref when called with no `fieldName` nor `key`', () => {\n    const store = createMockStore({ schema });\n\n    const user = store.get('User');\n\n    expect(user).toHaveProperty('$ref');\n  })\n\n  it('should support multiple `fieldnames` for ref traversal', () => {\n    const store = createMockStore({ schema });\n\n    const friends = store.get('Query', 'ROOT', ['viewer', 'friends']);\n\n    expect(Array.isArray(friends)).toBeTruthy();\n  })\n\n  it('should support passing a ref as first argument', () => {\n    const store = createMockStore({ schema });\n    expect(store.get(makeRef('User', '123'), 'name')).toEqual('Hello World');\n  })\n\n  it('should respect provided mocks', () => {\n    const store = createMockStore({\n      schema,\n      mocks: {\n        User: {\n          name: () => 'Superman',\n        }\n      }\n    });\n    expect(store.get('User', '123', 'name')).toEqual('Superman');\n  });\n\n  it('with type level mocks, it should produce consistent values', () => {\n    const store = createMockStore({\n      schema,\n      mocks: {\n        User: () => {\n          const charCode = 65 + Math.round(Math.random() * 25);\n          return {\n            age: charCode,\n            name: String.fromCharCode(charCode),\n          }\n        }\n      }\n    });\n\n    const age = store.get('User', '123', 'age') as number;\n\n    expect(store.get('User', '123', 'name')).toEqual(String.fromCharCode(age));\n  })\n\n  it('should support nested mocks', () => {\n    const store = createMockStore({\n      schema,\n      mocks: {\n        User: {\n          friends: () => [{ age: 21 }, { age: 22 }]\n        }\n      }\n    });\n\n    const friendsRefs = store.get('User', '123', 'friends') as Ref[];\n    expect(friendsRefs).toHaveLength(2);\n    const friendsAges = friendsRefs.map(ref => store.get('User', ref.$ref.key, 'age')).sort();\n    expect(friendsAges).toEqual([21, 22]);\n  });\n\n  it('should generate a ref when the field is a type', () => {\n    const store = createMockStore({ schema });\n    const value = store.get('Query', 'ROOT', 'viewer');\n    expect(value).toHaveProperty('$ref');\n  });\n\n  it('should be able to generate a list of scalar types', () => {\n    const store = createMockStore({ schema });\n    const surnames = store.get('User', '123', 'surnames') as string[];\n\n    expect(surnames).toBeInstanceOf(Array);\n    expect(typeof surnames[0]).toBe('string');\n  });\n\n\n  it('should be able to generate a list of Object type', () => {\n    const store = createMockStore({ schema });\n    const friends = store.get('User', '123', 'friends');\n\n    expect(friends).toBeInstanceOf(Array);\n    expect(friends[0]).toHaveProperty('$ref');\n  });\n\n  it('should support multiple field set', () => {\n    const store = createMockStore({ schema });\n\n    store.set('User', 'me', {\n      name: 'Alexandre',\n      age: 31,\n    });\n\n    expect(store.get('User', 'me', 'name')).toEqual('Alexandre');\n  });\n\n  it('should set with a ref', () => {\n    const store = createMockStore({ schema });\n\n    store.set(makeRef('User', 'me'), 'name', 'Alexandre');\n    expect(store.get('User', 'me', 'name')).toEqual('Alexandre');\n  });\n\n  it('should support nested set', () => {\n    const store = createMockStore({ schema });\n\n    store.set('Query', 'ROOT', 'viewer', {\n      id: 'me',\n      name: 'Alexandre',\n      age: 31,\n    });\n\n    expect(store.get('Query', 'ROOT', 'viewer')).toEqual({ $ref: { key: 'me', typeName: 'User' }});\n    expect(store.get('User', 'me', 'name')).toEqual('Alexandre');\n  });\n\n  it('should support nested set with a ref', () => {\n    const store = createMockStore({ schema });\n\n    store.set(makeRef('User', 'me'), { name: 'Alexandre'});\n    expect(store.get('User', 'me', 'name')).toEqual('Alexandre');\n  });\n\n  it('nested set should not override ref', () => {\n    const store = createMockStore({ schema });\n\n    store.set('Query', 'ROOT', 'viewer', {\n      id: 'me',\n    });\n\n    store.set('Query', 'ROOT', 'viewer', {\n      name: 'Alexandre',\n    });\n\n    expect(store.get('Query', 'ROOT', 'viewer')).toEqual({ $ref: { key: 'me', typeName: 'User' } });\n    expect(store.get('User', 'me', 'name')).toEqual('Alexandre');\n  });\n\n  it('should support nested set with list', () => {\n    const store = createMockStore({ schema });\n\n    store.set('User', 'me', 'friends', [\n      {\n        name: 'Ross'\n      }, {\n        name: 'Nico'\n      }, {\n        name: 'Trev'\n    }]);\n\n    const myFriendsRefs = store.get('User', 'me', 'friends') as Ref[];\n    expect(myFriendsRefs).toHaveLength(3);\n\n    const MyFriendsNames = myFriendsRefs.map(ref => store.get('User', ref.$ref.key, 'name')).sort();\n    expect(MyFriendsNames).toEqual(['Nico', 'Ross', 'Trev']);\n  });\n\n  it('should support nested set with empty list of scalars', () => {\n    const store = createMockStore({ schema });\n\n    store.set('User', 'me', 'surnames', [...new Array(2)]);\n\n    const mySurnames = store.get('User', 'me', 'surnames') as string[];\n    expect(mySurnames).toHaveLength(2);\n\n    expect(typeof mySurnames[0]).toBe('string')\n  });\n\n  it('should support nested set of lists of lists with empty list of scalars', () => {\n    const store = createMockStore({ schema });\n\n    store.set('User', 'me', 'listOfList', [[undefined, undefined], [undefined, undefined]]);\n\n    const myListOfList = store.get('User', 'me', 'listOfList') as string[][];\n    expect(myListOfList).toHaveLength(2);\n    expect(myListOfList[0]).toHaveLength(2);\n\n    expect(typeof myListOfList[0][0]).toBe('string')\n  });\n\n  it('should support nested set with empty list of types', () => {\n    const store = createMockStore({ schema });\n\n    store.set('User', 'me', 'friends', [...new Array(2)]);\n\n    const myFriendsRefs = store.get('User', 'me', 'friends') as Ref[];\n    expect(myFriendsRefs).toHaveLength(2);\n\n    // should return array of valid refs\n    expect(myFriendsRefs[0]).toHaveProperty('$ref')\n  });\n\n  it('should support ID of type number', () => {\n    const typeDefs = `\n      type User {\n        id: Int!\n        name: String!\n      }\n\n      type Query {\n        viewer: User!\n        userById(id: Int!): User!\n      }\n    `;\n\n    const schema = buildSchema(typeDefs);\n\n    const store = createMockStore({ schema });\n    const user = store.get('Query', 'ROOT', 'viewer') as Ref<number>;\n    expect(typeof user.$ref.key).toBe('number');\n  });\n\n  describe('default values', () => {\n    it('should be inserted when called with no key', () => {\n      const store = createMockStore({ schema });\n\n      const alexRef = store.get('User', { name: 'Alexandre'}) as Ref;\n\n      expect(store.get('User', alexRef.$ref.key, 'name')).toEqual('Alexandre');\n    });\n\n    it('should be inserted when called with a key', () => {\n      const store = createMockStore({ schema });\n\n      store.get('User', 'me', { name: 'Alexandre'}) as Ref;\n\n      expect(store.get('User','me', 'name')).toEqual('Alexandre');\n    });\n\n    it('should not override', () => {\n      const store = createMockStore({ schema });\n\n      store.set('User', 'me', 'name', 'Alexandre');\n      store.get('User', 'me', { name: 'Matthias'}) as Ref;\n\n      expect(store.get('User','me', 'name')).toEqual('Alexandre');\n    });\n\n    describe('union types', () => {\n      it('should work without mocks', () => {\n        const store = createMockStore({ schema });\n\n        const imageRef = store.get('User', 'me', 'image') as Ref;\n\n        expect(['UserImageSolidColor', 'UserImageURL'].includes(imageRef.$ref.typeName)).toBeTruthy()\n      });\n\n      it('should work with mocks', () => {\n        const store = createMockStore({\n          schema,\n          mocks: {\n            UserImage: () => {\n              return {\n              __typename: 'UserImageSolidColor',\n              color: 'white',\n            }\n          }\n          }\n        });\n\n        const imageRef = store.get('User', 'me', 'image') as Ref;\n\n        expect(imageRef.$ref.typeName).toEqual('UserImageSolidColor');\n        expect(store.get(imageRef, 'color')).toEqual('white')\n      });\n\n      it('should work with mocks setting the id', () => {\n        const store = createMockStore({\n          schema,\n          mocks: {\n            UserImage: () => {\n              return {\n                id: 'UserImageSolidColor:1234',\n                __typename: 'UserImageSolidColor',\n              }\n            }\n          }\n        });\n\n        const imageRef = store.get('User', 'me', 'image') as Ref;\n\n        expect(imageRef.$ref.typeName).toEqual('UserImageSolidColor');\n        expect(store.get(imageRef, 'id')).toEqual('UserImageSolidColor:1234')\n      });\n\n      it('should let nested sets', () => {\n        const store = createMockStore({ schema });\n\n        store.set('User', 'me', {\n          image: {\n            __typename: 'UserImageSolidColor',\n            color: 'white',\n          }\n        });\n        const imageRef = store.get('User', 'me', 'image') as Ref;\n\n        expect(imageRef.$ref.typeName).toEqual('UserImageSolidColor');\n        expect(store.get(imageRef, 'color')).toEqual('white')\n      })\n    });\n\n    describe('interface types', () => {\n      it('should work without mocks', () => {\n        const store = createMockStore({ schema });\n\n        const bookRef = store.get('Query', 'ROOT', 'bookById') as Ref;\n\n        expect(['TextBook', 'ColoringBook'].includes(bookRef.$ref.typeName)).toBeTruthy()\n      });\n\n      it('should work with mocks', () => {\n        const store = createMockStore({\n          schema,\n          mocks: {\n            Book: () => {\n              return {\n                __typename: 'TextBook',\n                text: 'long text',\n              }\n            }\n          }\n        });\n\n        const bookRef = store.get('Query', 'ROOT', 'bookById') as Ref;\n\n        expect(bookRef.$ref.typeName).toEqual('TextBook');\n        expect(store.get(bookRef, 'text')).toEqual('long text')\n      });\n\n      it('should let nested sets', () => {\n        const store = createMockStore({ schema });\n\n        store.set('Query', 'ROOT', {\n          bookById: {\n            __typename: 'TextBook',\n            text: 'long text',\n          },\n        });\n        const bookRef = store.get('Query', 'ROOT', 'bookById') as Ref;\n\n        expect(bookRef.$ref.typeName).toEqual('TextBook');\n        expect(store.get(bookRef, 'text')).toEqual('long text')\n      })\n\n    })\n  })\n  it('should reset the store', () => {\n    const store = createMockStore({ schema });\n\n    store.set(makeRef('User', 'me'), 'name', 'Alexandre');\n    store.reset();\n    expect(store.get('User', 'me', 'name')).not.toEqual('Alexandre');\n  })\n});\n"],"version":3}