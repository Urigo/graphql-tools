{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/astFromType.ts","mappings":";;;AAAA,qCAAiF;AAEjF,SAAgB,WAAW,CAAC,IAAiB;IAC3C,IAAI,uBAAa,CAAC,IAAI,CAAC,EAAE;QACvB,MAAM,SAAS,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3C,IAAI,SAAS,CAAC,IAAI,KAAK,cAAI,CAAC,aAAa,EAAE;YACzC,MAAM,IAAI,KAAK,CACb,qBAAqB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,0DAA0D,CACpG,CAAC;SACH;QACD,OAAO;YACL,IAAI,EAAE,cAAI,CAAC,aAAa;YACxB,IAAI,EAAE,SAAS;SAChB,CAAC;KACH;SAAM,IAAI,oBAAU,CAAC,IAAI,CAAC,EAAE;QAC3B,OAAO;YACL,IAAI,EAAE,cAAI,CAAC,SAAS;YACpB,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC;SAC/B,CAAC;KACH;IAED,OAAO;QACL,IAAI,EAAE,cAAI,CAAC,UAAU;QACrB,IAAI,EAAE;YACJ,IAAI,EAAE,cAAI,CAAC,IAAI;YACf,KAAK,EAAE,IAAI,CAAC,IAAI;SACjB;KACF,CAAC;AACJ,CAAC;AA1BD,kCA0BC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/astFromType.ts"],"sourcesContent":["import { isNonNullType, Kind, GraphQLType, TypeNode, isListType } from 'graphql';\n\nexport function astFromType(type: GraphQLType): TypeNode {\n  if (isNonNullType(type)) {\n    const innerType = astFromType(type.ofType);\n    if (innerType.kind === Kind.NON_NULL_TYPE) {\n      throw new Error(\n        `Invalid type node ${JSON.stringify(type)}. Inner type of non-null type cannot be a non-null type.`\n      );\n    }\n    return {\n      kind: Kind.NON_NULL_TYPE,\n      type: innerType,\n    };\n  } else if (isListType(type)) {\n    return {\n      kind: Kind.LIST_TYPE,\n      type: astFromType(type.ofType),\n    };\n  }\n\n  return {\n    kind: Kind.NAMED_TYPE,\n    name: {\n      kind: Kind.NAME,\n      value: type.name,\n    },\n  };\n}\n"],"version":3}