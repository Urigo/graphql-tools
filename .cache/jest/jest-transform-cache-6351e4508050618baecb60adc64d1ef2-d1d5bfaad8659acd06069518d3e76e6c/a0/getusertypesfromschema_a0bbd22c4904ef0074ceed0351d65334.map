{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/get-user-types-from-schema.ts","mappings":";;;AAAA,qCAAyE;AAEzE;;;;;;;GAOG;AACH,SAAgB,sBAAsB,CAAC,MAAqB;IAC1D,MAAM,WAAW,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;IAExC,0DAA0D;IAC1D,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC,WAA8B,EAAE,EAAE;QACtF,IAAI,sBAAY,CAAC,WAAW,CAAC,EAAE;YAC7B,2BAA2B;YAC3B,IAAI,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACrC,OAAO,KAAK,CAAC;aACd;YACD,IAAI,MAAM,CAAC,eAAe,EAAE,IAAI,WAAW,CAAC,IAAI,KAAK,MAAM,CAAC,eAAe,EAAE,CAAC,IAAI,EAAE;gBAClF,OAAO,KAAK,CAAC;aACd;YACD,IAAI,MAAM,CAAC,YAAY,EAAE,IAAI,WAAW,CAAC,IAAI,KAAK,MAAM,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE;gBAC5E,OAAO,KAAK,CAAC;aACd;YACD,IAAI,MAAM,CAAC,mBAAmB,EAAE,IAAI,WAAW,CAAC,IAAI,KAAK,MAAM,CAAC,mBAAmB,EAAE,CAAC,IAAI,EAAE;gBAC1F,OAAO,KAAK,CAAC;aACd;YAED,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,OAAO,UAAiC,CAAC;AAC3C,CAAC;AA3BD,wDA2BC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/get-user-types-from-schema.ts"],"sourcesContent":["import { GraphQLSchema, GraphQLObjectType, isObjectType } from 'graphql';\n\n/**\n * Get all GraphQL types from schema without:\n *\n * - Query, Mutation, Subscription objects\n * - Internal scalars added by parser\n *\n * @param schema\n */\nexport function getUserTypesFromSchema(schema: GraphQLSchema): GraphQLObjectType[] {\n  const allTypesMap = schema.getTypeMap();\n\n  // tslint:disable-next-line: no-unnecessary-local-variable\n  const modelTypes = Object.values(allTypesMap).filter((graphqlType: GraphQLObjectType) => {\n    if (isObjectType(graphqlType)) {\n      // Filter out private types\n      if (graphqlType.name.startsWith('__')) {\n        return false;\n      }\n      if (schema.getMutationType() && graphqlType.name === schema.getMutationType().name) {\n        return false;\n      }\n      if (schema.getQueryType() && graphqlType.name === schema.getQueryType().name) {\n        return false;\n      }\n      if (schema.getSubscriptionType() && graphqlType.name === schema.getSubscriptionType().name) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  });\n\n  return modelTypes as GraphQLObjectType[];\n}\n"],"version":3}