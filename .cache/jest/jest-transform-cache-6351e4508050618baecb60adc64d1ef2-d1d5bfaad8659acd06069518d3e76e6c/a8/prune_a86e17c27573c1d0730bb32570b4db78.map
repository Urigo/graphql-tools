{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/prune.ts","mappings":"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","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/prune.ts"],"sourcesContent":["import {\n  GraphQLSchema,\n  GraphQLNamedType,\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  getNamedType,\n  isObjectType,\n  isInterfaceType,\n  isUnionType,\n  isInputObjectType,\n} from 'graphql';\n\nimport { PruneSchemaOptions } from './types';\n\nimport { mapSchema } from './mapSchema';\nimport { MapperKind } from './Interfaces';\n\ntype NamedOutputType =\n  | GraphQLObjectType\n  | GraphQLInterfaceType\n  | GraphQLUnionType\n  | GraphQLEnumType\n  | GraphQLScalarType;\ntype NamedInputType = GraphQLInputObjectType | GraphQLEnumType | GraphQLScalarType;\n\ninterface PruningContext {\n  schema: GraphQLSchema;\n  unusedTypes: Record<string, boolean>;\n  implementations: Record<string, Record<string, boolean>>;\n}\n\n/**\n * Prunes the provided schema, removing unused and empty types\n * @param schema The schema to prune\n * @param options Additional options for removing unused types from the schema\n */\nexport function pruneSchema(schema: GraphQLSchema, options: PruneSchemaOptions = {}): GraphQLSchema {\n  const pruningContext: PruningContext = {\n    schema,\n    unusedTypes: Object.create(null),\n    implementations: Object.create(null),\n  };\n\n  Object.keys(schema.getTypeMap()).forEach(typeName => {\n    const type = schema.getType(typeName);\n    if ('getInterfaces' in type) {\n      type.getInterfaces().forEach(iface => {\n        if (pruningContext.implementations[iface.name] == null) {\n          pruningContext.implementations[iface.name] = Object.create(null);\n        }\n        pruningContext.implementations[iface.name][type.name] = true;\n      });\n    }\n  });\n\n  visitTypes(pruningContext, schema);\n\n  return mapSchema(schema, {\n    [MapperKind.TYPE]: (type: GraphQLNamedType) => {\n      if (isObjectType(type) || isInputObjectType(type)) {\n        if (\n          (!Object.keys(type.getFields()).length && !options.skipEmptyCompositeTypePruning) ||\n          (pruningContext.unusedTypes[type.name] && !options.skipUnusedTypesPruning)\n        ) {\n          return null;\n        }\n      } else if (isUnionType(type)) {\n        if (\n          (!type.getTypes().length && !options.skipEmptyUnionPruning) ||\n          (pruningContext.unusedTypes[type.name] && !options.skipUnusedTypesPruning)\n        ) {\n          return null;\n        }\n      } else if (isInterfaceType(type)) {\n        if (\n          (!Object.keys(type.getFields()).length && !options.skipEmptyCompositeTypePruning) ||\n          (!Object.keys(pruningContext.implementations[type.name]).length &&\n            !options.skipUnimplementedInterfacesPruning) ||\n          (pruningContext.unusedTypes[type.name] && !options.skipUnusedTypesPruning)\n        ) {\n          return null;\n        }\n      } else {\n        if (pruningContext.unusedTypes[type.name] && !options.skipUnusedTypesPruning) {\n          return null;\n        }\n      }\n    },\n  });\n}\n\nfunction visitOutputType(\n  visitedTypes: Record<string, boolean>,\n  pruningContext: PruningContext,\n  type: NamedOutputType\n): void {\n  if (visitedTypes[type.name]) {\n    return;\n  }\n\n  visitedTypes[type.name] = true;\n  pruningContext.unusedTypes[type.name] = false;\n\n  if (isObjectType(type) || isInterfaceType(type)) {\n    const fields = type.getFields();\n    Object.keys(fields).forEach(fieldName => {\n      const field = fields[fieldName];\n      const namedType = getNamedType(field.type) as NamedOutputType;\n      visitOutputType(visitedTypes, pruningContext, namedType);\n\n      const args = field.args;\n      args.forEach(arg => {\n        const type = getNamedType(arg.type) as NamedInputType;\n        visitInputType(visitedTypes, pruningContext, type);\n      });\n    });\n\n    if (isInterfaceType(type)) {\n      Object.keys(pruningContext.implementations[type.name]).forEach(typeName => {\n        visitOutputType(visitedTypes, pruningContext, pruningContext.schema.getType(typeName) as NamedOutputType);\n      });\n    }\n\n    if ('getInterfaces' in type) {\n      type.getInterfaces().forEach(type => {\n        visitOutputType(visitedTypes, pruningContext, type);\n      });\n    }\n  } else if (isUnionType(type)) {\n    const types = type.getTypes();\n    types.forEach(type => visitOutputType(visitedTypes, pruningContext, type));\n  }\n}\n\nfunction visitInputType(\n  visitedTypes: Record<string, boolean>,\n  pruningContext: PruningContext,\n  type: NamedInputType\n): void {\n  if (visitedTypes[type.name]) {\n    return;\n  }\n\n  pruningContext.unusedTypes[type.name] = false;\n  visitedTypes[type.name] = true;\n\n  if (isInputObjectType(type)) {\n    const fields = type.getFields();\n    Object.keys(fields).forEach(fieldName => {\n      const field = fields[fieldName];\n      const namedType = getNamedType(field.type) as NamedInputType;\n      visitInputType(visitedTypes, pruningContext, namedType);\n    });\n  }\n}\n\nfunction visitTypes(pruningContext: PruningContext, schema: GraphQLSchema): void {\n  Object.keys(schema.getTypeMap()).forEach(typeName => {\n    if (!typeName.startsWith('__')) {\n      pruningContext.unusedTypes[typeName] = true;\n    }\n  });\n\n  const visitedTypes: Record<string, boolean> = Object.create(null);\n\n  const rootTypes = [schema.getQueryType(), schema.getMutationType(), schema.getSubscriptionType()].filter(\n    type => type != null\n  );\n\n  rootTypes.forEach(rootType => visitOutputType(visitedTypes, pruningContext, rootType));\n\n  schema.getDirectives().forEach(directive => {\n    directive.args.forEach(arg => {\n      const type = getNamedType(arg.type) as NamedInputType;\n      visitInputType(visitedTypes, pruningContext, type);\n    });\n  });\n}\n"],"version":3}