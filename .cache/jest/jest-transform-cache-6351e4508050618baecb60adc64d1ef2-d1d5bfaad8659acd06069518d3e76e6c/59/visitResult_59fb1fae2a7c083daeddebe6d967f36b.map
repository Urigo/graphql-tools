{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/visitResult.ts","mappings":"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","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/visitResult.ts"],"sourcesContent":["import {\n  GraphQLSchema,\n  getOperationRootType,\n  getOperationAST,\n  Kind,\n  GraphQLObjectType,\n  FieldNode,\n  GraphQLOutputType,\n  isListType,\n  getNullableType,\n  isAbstractType,\n  isObjectType,\n  OperationDefinitionNode,\n  GraphQLError,\n} from 'graphql';\n\nimport { Request, GraphQLExecutionContext, ExecutionResult } from './Interfaces';\nimport { collectFields } from './collectFields';\n\nexport type ValueVisitor = (value: any) => any;\n\nexport type ObjectValueVisitor = {\n  __enter?: ValueVisitor;\n  __leave?: ValueVisitor;\n} & Record<string, ValueVisitor>;\n\nexport type ResultVisitorMap = Record<string, ValueVisitor | ObjectValueVisitor>;\n\nexport type ErrorVisitor = (error: GraphQLError, pathIndex: number) => GraphQLError;\n\nexport type ErrorVisitorMap = {\n  __unpathed?: (error: GraphQLError) => GraphQLError;\n} & Record<string, Record<string, ErrorVisitor>>;\n\ninterface SegmentInfo {\n  type: GraphQLObjectType;\n  fieldName: string;\n  pathIndex: number;\n}\n\ninterface ErrorInfo {\n  segmentInfoMap: Map<GraphQLError, Array<SegmentInfo>>;\n  unpathedErrors: Set<GraphQLError>;\n}\n\ninterface SortedErrors {\n  errorMap: Record<string, Array<GraphQLError>>;\n  unpathedErrors: Set<GraphQLError>;\n}\n\nexport function visitData(data: any, enter?: ValueVisitor, leave?: ValueVisitor): any {\n  if (Array.isArray(data)) {\n    return data.map(value => visitData(value, enter, leave));\n  } else if (typeof data === 'object') {\n    const newData = enter != null ? enter(data) : data;\n\n    if (newData != null) {\n      Object.keys(newData).forEach(key => {\n        const value = newData[key];\n        newData[key] = visitData(value, enter, leave);\n      });\n    }\n\n    return leave != null ? leave(newData) : newData;\n  }\n\n  return data;\n}\n\nexport function visitErrors(\n  errors: ReadonlyArray<GraphQLError>,\n  visitor: (error: GraphQLError) => GraphQLError\n): Array<GraphQLError> {\n  return errors.map(error => visitor(error));\n}\nexport function visitResult(\n  result: ExecutionResult,\n  request: Request,\n  schema: GraphQLSchema,\n  resultVisitorMap?: ResultVisitorMap,\n  errorVisitorMap?: ErrorVisitorMap\n): any {\n  const partialExecutionContext = {\n    schema,\n    fragments: request.document.definitions.reduce((acc, def) => {\n      if (def.kind === Kind.FRAGMENT_DEFINITION) {\n        acc[def.name.value] = def;\n      }\n      return acc;\n    }, {}),\n    variableValues: request.variables,\n  } as GraphQLExecutionContext;\n\n  const errorInfo: ErrorInfo = {\n    segmentInfoMap: new Map<GraphQLError, Array<SegmentInfo>>(),\n    unpathedErrors: new Set<GraphQLError>(),\n  };\n\n  const data = result.data;\n  const errors = result.errors;\n  const visitingErrors = errors != null && errorVisitorMap != null;\n\n  if (data != null) {\n    result.data = visitRoot(\n      data,\n      getOperationAST(request.document, undefined),\n      partialExecutionContext,\n      resultVisitorMap,\n      visitingErrors ? errors : undefined,\n      errorInfo\n    );\n  }\n\n  if (visitingErrors) {\n    result.errors = visitErrorsByType(errors, errorVisitorMap, errorInfo);\n  }\n\n  return result;\n}\n\nfunction visitErrorsByType(\n  errors: ReadonlyArray<GraphQLError>,\n  errorVisitorMap: ErrorVisitorMap,\n  errorInfo: ErrorInfo\n): Array<GraphQLError> {\n  const segmentInfoMap = errorInfo.segmentInfoMap;\n  const unpathedErrors = errorInfo.unpathedErrors;\n  const unpathedErrorVisitor = errorVisitorMap['__unpathed'];\n\n  return errors.map(originalError => {\n    const pathSegmentsInfo = segmentInfoMap.get(originalError);\n    const newError =\n      pathSegmentsInfo == null\n        ? originalError\n        : pathSegmentsInfo.reduceRight((acc, segmentInfo) => {\n            const typeName = segmentInfo.type.name;\n            const typeVisitorMap = errorVisitorMap[typeName];\n            if (typeVisitorMap == null) {\n              return acc;\n            }\n            const errorVisitor = typeVisitorMap[segmentInfo.fieldName];\n            return errorVisitor == null ? acc : errorVisitor(acc, segmentInfo.pathIndex);\n          }, originalError);\n\n    if (unpathedErrorVisitor && unpathedErrors.has(originalError)) {\n      return unpathedErrorVisitor(newError);\n    }\n\n    return newError;\n  });\n}\n\nfunction visitRoot(\n  root: any,\n  operation: OperationDefinitionNode,\n  exeContext: GraphQLExecutionContext,\n  resultVisitorMap: ResultVisitorMap,\n  errors: ReadonlyArray<GraphQLError>,\n  errorInfo: ErrorInfo\n): any {\n  const operationRootType = getOperationRootType(exeContext.schema, operation);\n  const collectedFields = collectFields(\n    exeContext,\n    operationRootType,\n    operation.selectionSet,\n    Object.create(null),\n    Object.create(null)\n  );\n\n  return visitObjectValue(root, operationRootType, collectedFields, exeContext, resultVisitorMap, 0, errors, errorInfo);\n}\n\nfunction visitObjectValue(\n  object: Record<string, any>,\n  type: GraphQLObjectType,\n  fieldNodeMap: Record<string, Array<FieldNode>>,\n  exeContext: GraphQLExecutionContext,\n  resultVisitorMap: ResultVisitorMap,\n  pathIndex: number,\n  errors: ReadonlyArray<GraphQLError>,\n  errorInfo: ErrorInfo\n): Record<string, any> {\n  const fieldMap = type.getFields();\n  const typeVisitorMap = resultVisitorMap?.[type.name] as ObjectValueVisitor;\n\n  const enterObject = typeVisitorMap?.__enter as ValueVisitor;\n  const newObject = enterObject != null ? enterObject(object) : object;\n\n  let sortedErrors: SortedErrors;\n  let errorMap: Record<string, Array<GraphQLError>>;\n  if (errors != null) {\n    sortedErrors = sortErrorsByPathSegment(errors, pathIndex);\n    errorMap = sortedErrors.errorMap;\n    sortedErrors.unpathedErrors.forEach(error => errorInfo.unpathedErrors.add(error));\n  }\n\n  Object.keys(fieldNodeMap).forEach(responseKey => {\n    const subFieldNodes = fieldNodeMap[responseKey];\n    const fieldName = subFieldNodes[0].name.value;\n    const fieldType = fieldMap[fieldName].type;\n\n    const newPathIndex = pathIndex + 1;\n\n    let fieldErrors: Array<GraphQLError>;\n    if (errors != null) {\n      fieldErrors = errorMap[responseKey];\n      if (fieldErrors != null) {\n        delete errorMap[responseKey];\n      }\n      addPathSegmentInfo(type, fieldName, newPathIndex, fieldErrors, errorInfo);\n    }\n\n    const newValue = visitFieldValue(\n      object[responseKey],\n      fieldType,\n      subFieldNodes,\n      exeContext,\n      resultVisitorMap,\n      newPathIndex,\n      fieldErrors,\n      errorInfo\n    );\n\n    updateObject(newObject, responseKey, newValue, typeVisitorMap, fieldName);\n  });\n\n  const oldTypename = newObject.__typename;\n  if (oldTypename != null) {\n    updateObject(newObject, '__typename', oldTypename, typeVisitorMap, '__typename');\n  }\n\n  if (errors != null) {\n    Object.keys(errorMap).forEach(unknownResponseKey => {\n      errorMap[unknownResponseKey].forEach(error => errorInfo.unpathedErrors.add(error));\n    });\n  }\n\n  const leaveObject = typeVisitorMap?.__leave as ValueVisitor;\n\n  return leaveObject != null ? leaveObject(newObject) : newObject;\n}\n\nfunction updateObject(\n  object: Record<string, any>,\n  responseKey: string,\n  newValue: any,\n  typeVisitorMap: ObjectValueVisitor,\n  fieldName: string\n): void {\n  if (typeVisitorMap == null) {\n    object[responseKey] = newValue;\n    return;\n  }\n\n  const fieldVisitor = typeVisitorMap[fieldName];\n  if (fieldVisitor == null) {\n    object[responseKey] = newValue;\n    return;\n  }\n\n  const visitedValue = fieldVisitor(newValue);\n  if (visitedValue === undefined) {\n    delete object[responseKey];\n    return;\n  }\n\n  object[responseKey] = visitedValue;\n}\n\nfunction visitListValue(\n  list: Array<any>,\n  returnType: GraphQLOutputType,\n  fieldNodes: Array<FieldNode>,\n  exeContext: GraphQLExecutionContext,\n  resultVisitorMap: ResultVisitorMap,\n  pathIndex: number,\n  errors: ReadonlyArray<GraphQLError>,\n  errorInfo: ErrorInfo\n): Array<any> {\n  return list.map(listMember =>\n    visitFieldValue(listMember, returnType, fieldNodes, exeContext, resultVisitorMap, pathIndex + 1, errors, errorInfo)\n  );\n}\n\nfunction visitFieldValue(\n  value: any,\n  returnType: GraphQLOutputType,\n  fieldNodes: Array<FieldNode>,\n  exeContext: GraphQLExecutionContext,\n  resultVisitorMap: ResultVisitorMap,\n  pathIndex: number,\n  errors: ReadonlyArray<GraphQLError> = [],\n  errorInfo: ErrorInfo\n): any {\n  if (value == null) {\n    return value;\n  }\n\n  const nullableType = getNullableType(returnType);\n  if (isListType(nullableType)) {\n    return visitListValue(\n      value as Array<any>,\n      nullableType.ofType,\n      fieldNodes,\n      exeContext,\n      resultVisitorMap,\n      pathIndex,\n      errors,\n      errorInfo\n    );\n  } else if (isAbstractType(nullableType)) {\n    const finalType = exeContext.schema.getType(value.__typename) as GraphQLObjectType;\n    const collectedFields = collectSubFields(exeContext, finalType, fieldNodes);\n    return visitObjectValue(\n      value,\n      finalType,\n      collectedFields,\n      exeContext,\n      resultVisitorMap,\n      pathIndex,\n      errors,\n      errorInfo\n    );\n  } else if (isObjectType(nullableType)) {\n    const collectedFields = collectSubFields(exeContext, nullableType, fieldNodes);\n    return visitObjectValue(\n      value,\n      nullableType,\n      collectedFields,\n      exeContext,\n      resultVisitorMap,\n      pathIndex,\n      errors,\n      errorInfo\n    );\n  }\n\n  const typeVisitorMap = resultVisitorMap?.[nullableType.name] as ValueVisitor;\n  if (typeVisitorMap == null) {\n    return value;\n  }\n\n  const visitedValue = typeVisitorMap(value);\n  return visitedValue === undefined ? value : visitedValue;\n}\n\nfunction sortErrorsByPathSegment(errors: ReadonlyArray<GraphQLError>, pathIndex: number): SortedErrors {\n  const errorMap = Object.create(null);\n  const unpathedErrors: Set<GraphQLError> = new Set();\n  errors.forEach(error => {\n    const pathSegment = error.path?.[pathIndex];\n    if (pathSegment == null) {\n      unpathedErrors.add(error);\n      return;\n    }\n\n    if (pathSegment in errorMap) {\n      errorMap[pathSegment].push(error);\n    } else {\n      errorMap[pathSegment] = [error];\n    }\n  });\n\n  return {\n    errorMap,\n    unpathedErrors,\n  };\n}\n\nfunction addPathSegmentInfo(\n  type: GraphQLObjectType,\n  fieldName: string,\n  pathIndex: number,\n  errors: ReadonlyArray<GraphQLError> = [],\n  errorInfo: ErrorInfo\n) {\n  errors.forEach(error => {\n    const segmentInfo = {\n      type,\n      fieldName,\n      pathIndex,\n    };\n    const pathSegmentsInfo = errorInfo.segmentInfoMap.get(error);\n    if (pathSegmentsInfo == null) {\n      errorInfo.segmentInfoMap.set(error, [segmentInfo]);\n    } else {\n      pathSegmentsInfo.push(segmentInfo);\n    }\n  });\n}\n\nfunction collectSubFields(\n  exeContext: GraphQLExecutionContext,\n  type: GraphQLObjectType,\n  fieldNodes: Array<FieldNode>\n): Record<string, Array<FieldNode>> {\n  let subFieldNodes: Record<string, Array<FieldNode>> = Object.create(null);\n  const visitedFragmentNames = Object.create(null);\n\n  fieldNodes.forEach(fieldNode => {\n    subFieldNodes = collectFields(exeContext, type, fieldNode.selectionSet, subFieldNodes, visitedFragmentNames);\n  });\n\n  return subFieldNodes;\n}\n"],"version":3}