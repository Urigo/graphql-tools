{"file":"/home/ardat_000/Guild/graphql-tools/packages/mock/tests/mocking-compatibility.spec.ts","mappings":";;AAAA,8BAA8B;AAC9B,qCAKiB;AAEjB,mCAA8C;AAE9C,gCAAoF;AACpF,kDAI+B;AAE/B,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,MAAM,SAAS,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8DjB,CAAC;IAEF,MAAM,gBAAgB,GAAG;QACvB,YAAY,EAAE;YACZ,aAAa,CAAC,IAAS,EAAE,QAAa,EAAE,IAAwB;gBAC9D,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC9C,CAAC;SACF;QACD,MAAM,EAAE;YACN,aAAa,CAAC,IAAS,EAAE,QAAa,EAAE,IAAwB;gBAC9D,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC9C,CAAC;SACF;KACF,CAAC;IAEF,IAAI,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACxD,MAAM,CAAC,GAAG,EAAE,CAAC,sBAAgB,CAAC,EAAS,CAAC,CAAC,CAAC,YAAY,CACpD,6BAA6B,CAC9B,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,6FAA6F,EAAE,GAAG,EAAE;QACvG,MAAM,CAAC,GAAG,EAAE,CACV,sBAAgB,CAAC,EAAE,MAAM,EAAG,EAA+B,EAAE,CAAC,CAC/D,CAAC,YAAY,CAAC,iDAAiD,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,iDAAiD,EAAE,GAAG,EAAE;QAC3D,MAAM,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QAC3D,MAAM,CAAC,GAAG,EAAE,CACV,sBAAgB,CAAC;YACf,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAG,CAAC,GAAG,CAAuB;SACpC,CAAC,CACH,CAAC,YAAY,CAAC,8BAA8B,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,iCAAiC,EAAE,GAAG,EAAE;QAC3C,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;;;;;MAMhB,CAAC;QACH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC,CAAC;YACzD,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YACrD,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC,CAAC;YAC3D,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YACvD,MAAM,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACtD,MAAM,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACpD,MAAM,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACnD,MAAM,SAAS,GAAG;;;;;;;;;;;;;;;;MAgBhB,CAAC;QACH,MAAM,OAAO,GAAG;YACd,GAAG,EAAE,GAAG,EAAE,CAAC,KAAK;YAChB,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;YACxC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;SACxC,CAAC;QACF,OAAO,gBAAU,CAAC,SAAS,EAAE,OAAO,CAAC;aAClC,KAAK,CAAC,SAAS,CAAC;aAChB,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE;YACjB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC,CAAC;YAC3D,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YACvD,MAAM,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACtD,MAAM,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACpD,MAAM,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAChD,oEAAoE;YACpE,6CAA6C;YAC7C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7D,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,8DAA8D,EAAE,GAAG,EAAE;QACxE,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,SAAS,GAAG;YAChB,SAAS,EAAE;gBACT,YAAY,EAAE,GAAG,EAAE,CAAC,YAAY;aACjC;SACF,CAAC;QACF,QAAQ,GAAG,6BAAoB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QACrD,MAAM,SAAS,GAAG;;;;;;;;;;;MAWhB,CAAC;QACH,MAAM,OAAO,GAAG;YACd,GAAG,EAAE,GAAG,EAAE,CAAC,KAAK;YAChB,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;YACxC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;SACxC,CAAC;QACF,OAAO,gBAAU,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC;aACvC,KAAK,CAAC,SAAS,CAAC;aAChB,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE;YACjB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACjD,oEAAoE;YACpE,6CAA6C;YAC7C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7D,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACxD,MAAM,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QAC3D,MAAM,SAAS,GAAG;;;;;;;;;;;;;;;;MAgBhB,CAAC;QACH,MAAM,OAAO,GAAG;YACd,GAAG,EAAE,GAAG,EAAE,CAAC,KAAK;YAChB,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;YACxC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;SACxC,CAAC;QACF,OAAO,gBAAU,CAAC,QAAQ,EAAE,OAAO,CAAC;aACjC,KAAK,CAAC,SAAS,CAAC;aAChB,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE;YACjB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC,CAAC;YAC3D,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YACvD,MAAM,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACtD,MAAM,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACpD,MAAM,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAChD,oEAAoE;YACpE,6CAA6C;YAC7C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7D,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,2DAA2D,EAAE,GAAG,EAAE;QACrE,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,MAAM,SAAS,GAAG;YAChB,YAAY,EAAE;gBACZ,aAAa,CAAC,IAAS,EAAE,QAAa,EAAE,IAAwB;oBAC9D,EAAE,GAAG,CAAC;oBACN,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC9C,CAAC;aACF;SACF,CAAC;QACF,QAAQ,GAAG,6BAAoB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QACrD,QAAQ,GAAG,sBAAgB,CAAC;YAC1B,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,EAAE;YACT,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QACH,MAAM,SAAS,GAAG;;;;;;;;;;;MAWhB,CAAC;QACH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;YAChD,wCAAwC;YACxC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,+CAA+C;IAC/C,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE;QACzB,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC9C,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG;YACd,QAAQ,EAAE,GAAG,EAAE,CAAC,GAAG;SACpB,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC3B,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,QAAQ,GAAG,6BAAoB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAC5D,MAAM,OAAO,GAAG;YACd,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE;YACb,MAAM,EAAE,GAAG,EAAE,CAAC,KAAK;YACnB,QAAQ,EAAE,GAAG,EAAE,CAAC,GAAG;YACnB,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;gBAChB,kBAAkB,EAAE,GAAG,EAAE,CAAC,IAAI,cAAQ,CAAC,EAAE,CAAC;aAC3C,CAAC;SACH,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;;;;;;;;;;MAWhB,CAAC;QACH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,8DAA8D;YAC9D,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,cAAc,CAChD,MAAM,CAAC,gBAAgB,CAAC;gBACtB,SAAS,EAAE,EAAE;gBACb,YAAY,EAAE,KAAK;aACpB,CAAC,CACH,CAAC;YACF,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,cAAc,CACvD,MAAM,CAAC,gBAAgB,CAAC;gBACtB,SAAS,EAAE,EAAE;gBACb,UAAU,EAAE,GAAG;aAChB,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC1C,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG;YACd,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE;YACb,MAAM,EAAE,GAAG,EAAE,CAAC,KAAK;YACnB,QAAQ,EAAE,GAAG,EAAE,CAAC,GAAG;YACnB,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;gBAChB,YAAY,EAAE,GAAG,EAAE,CAAC,IAAI,cAAQ,CAAC,EAAE,CAAC;aACrC,CAAC;SACH,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC;YAC1B,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,OAAO;SACf,CAAC,CAAC;QACH,MAAM,SAAS,GAAG;;;;;;;;;;;MAWhB,CAAC;QACH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,cAAc,CAC1C,MAAM,CAAC,gBAAgB,CAAC;gBACtB,SAAS,EAAE,EAAE;gBACb,YAAY,EAAE,KAAK;aACpB,CAAC,CACH,CAAC;YACF,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,cAAc,CACjD,MAAM,CAAC,gBAAgB,CAAC;gBACtB,SAAS,EAAE,EAAE;gBACb,UAAU,EAAE,GAAG;aAChB,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;QACtC,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QAEzD,QAAQ,GAAG,6BAAoB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAE5D,MAAM,OAAO,GAAG;YACd,IAAI,EAAE,GAAS,EAAE,CAAC,IAAI;YACtB,GAAG,EAAE,GAAS,EAAE,CAAC,IAAI;YACrB,MAAM,EAAE,CAAC,CAAM,EAAE,IAAS,EAAE,EAAE;gBAC5B,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;gBACpB,MAAM,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9B,2BAA2B;gBAC3B,MAAM,UAAU,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,CACrC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,IAAI,CAChC,CAAC;gBACF,OAAO,EAAE,UAAU,EAAE,CAAC;YACxB,CAAC;SACF,CAAC;QAEF,QAAQ,GAAG,sBAAgB,CAAC;YAC1B,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,OAAO;YACd,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QAEH,MAAM,SAAS,GAAG;;;;MAIhB,CAAC;QAEH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC/C,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,MAAM,OAAO,GAAG;YACd,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;gBACX,SAAS,EAAE,GAAG;aACf,CAAC;YACF,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;gBACV,SAAS,EAAE,GAAG;aACf,CAAC;YACF,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;gBACb,UAAU,EAAE,qBAAqB;aAClC,CAAC;SACH,CAAC;QACF,MAAM,SAAS,GAAG,CAAC,KAAiB,EAAE,EAAE,CAAC,CAAC;YACxC,SAAS,EAAE;gBACT,IAAI,EAAE,CAAC,KAAU,EAAE,IAAS,EAAE,EAAE;oBAC9B,GAAG,EAAE,CAAC;oBACN,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;oBACpB,MAAM,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC9B,MAAM,UAAU,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,CACrC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,IAAI,CAChC,CAAC;oBACF,OAAO,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;gBACnC,CAAC;aACF;SACF,CAAC,CAAC;QACH,QAAQ,GAAG,sBAAgB,CAAC;YAC1B,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,OAAO;YACd,SAAS;SACV,CAAC,CAAC;QACH,MAAM,SAAS,GAAG;;;;;;MAMhB,CAAC;QAEH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,oEAAoE;YACzF,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,EAAE,EAAE,YAAY;gBAChB,UAAU,EAAE,qBAAqB;gBACjC,SAAS,EAAE,GAAG;aACf,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ;IACR,IAAI,CAAC,IAAI,CAAC,qCAAqC,EAAE,GAAG,EAAE;QACpD,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,QAAQ,GAAG,6BAAoB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAC5D,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,MAAM,OAAO,GAAG;YACd,IAAI,EAAE,CAAC,KAAU,EAAE,IAAS,EAAE,EAAE,CAAC,CAAC;gBAChC,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,SAAS,EAAE,GAAG;aACf,CAAC;YACF,GAAG,EAAE,CAAC,KAAU,EAAE,IAAS,EAAE,EAAE,CAAC,CAAC;gBAC/B,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,UAAU,EAAE,GAAG;aAChB,CAAC;YACF,YAAY,EAAE,CAAC,KAAU,EAAE,IAAS,EAAE,EAAE;gBACtC,GAAG,EAAE,CAAC;gBACN,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;gBACpB,MAAM,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9B,OAAO;oBACL,UAAU,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC;iBAClE,CAAC;YACJ,CAAC;SACF,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC;YAC1B,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,OAAO;YACd,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QACH,MAAM,SAAS,GAAG;;;;;;;QAOd,CAAC;QAEL,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC;gBACnC,EAAE,EAAE,YAAY;gBAChB,UAAU,EAAE,GAAG;aAChB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,mFAAmF,EAAE,GAAG,EAAE;QAC7F,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,QAAQ,GAAG,6BAAoB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAC5D,MAAM,OAAO,GAAG;YACd,IAAI,EAAE,CAAC,KAAU,EAAE,IAAS,EAAE,EAAE,CAAC,CAAC;gBAChC,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,SAAS,EAAE,GAAG;aACf,CAAC;YACF,GAAG,EAAE,CAAC,KAAU,EAAE,IAAS,EAAE,EAAE,CAAC,CAAC;gBAC/B,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,SAAS,EAAE,GAAG;aACf,CAAC;YACF,MAAM,EAAE,CAAC,KAAU,EAAE,KAAU,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC;SACzC,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;;;;UAKZ,CAAC;QACP,MAAM,QAAQ,GAAG,wCAAwC,CAAC;QAC1D,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,wDAAwD,EAAE,GAAG,EAAE;QAClE,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,MAAM,QAAQ,GAAG,4CAA4C,CAAC;QAC9D,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,4EAA4E,EAAE,GAAG,EAAE;QACtF,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,SAAS,GAAG;YAChB,eAAe,EAAE;gBACf,WAAW,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,GAAG;gBACjC,YAAY,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,GAAG;gBAClC,cAAc,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,GAAG;aACrC;YACD,SAAS,EAAE;gBACT,eAAe,EAAE,GAAW,EAAE,CAAC,SAAS;aACzC;SACF,CAAC;QACF,QAAQ,GAAG,6BAAoB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAErD,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,QAAQ,GAAG,sBAAgB,CAAC;YAC1B,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,OAAO;YACd,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QACH,MAAM,SAAS,GAAG;;QAEd,CAAC;QACL,MAAM,QAAQ,GAAG,4CAA4C,CAAC;QAC9D,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACzC,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,SAAS,GAAG;YAChB,eAAe,EAAE;gBACf,WAAW,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,GAAG;gBACjC,YAAY,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,GAAG;gBAClC,cAAc,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,GAAG;aACrC;YACD,SAAS,EAAE;gBACT,eAAe,EAAE,GAAG,EAAE,CAAC,YAAY;aACpC;SACF,CAAC;QACF,QAAQ,GAAG,6BAAoB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAErD,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,sBAAgB,CAAC;YACf,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,OAAO;YACd,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QACH,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,MAAM,QAAQ,GAAG;YACf,eAAe,EAAE,YAAY;SAC9B,CAAC;QACF,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACnC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC3B,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;QAClC,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC5B,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;QACtC,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC7B,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,UAAU,EAAE,CAAC;QAC7C,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC9B,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;QACxC,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC1B,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,UAAU,EAAE,CAAC;QACzC,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACrC,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,EAAE,MAAM,EAAE,GAAS,EAAE,CAAC,IAAI,EAAE,CAAC;QAC7C,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACnC,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;QAC5C,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,8BAA8B,EAAE,GAAG,EAAE;QACxC,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,EAAE,MAAM,EAAE,GAAS,EAAE,CAAC,IAAI,EAAE,CAAC;QAC7C,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5B,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACjC,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG;YACd,MAAM,EAAE,GAAG,EAAE,CAAC,KAAK;YACnB,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG;SACf,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,MAAM,QAAQ,GAAG;YACf,YAAY,EAAE,EAAE,SAAS,EAAE,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE;SACtD,CAAC;QACF,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACnC,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;QACnC,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,MAAM,QAAQ,GAAG;YACf,eAAe,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;SAC5B,CAAC;QACF,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC/C,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG;YACd,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG;YACjB,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;SACb,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,MAAM,QAAQ,GAAG;YACf,wBAAwB,EAAE;gBACxB;oBACE,EAAE,SAAS,EAAE,CAAC,EAAE,YAAY,EAAE,GAAG,EAAE;oBACnC,EAAE,SAAS,EAAE,CAAC,EAAE,YAAY,EAAE,GAAG,EAAE;iBACpC;gBACD;oBACE,EAAE,SAAS,EAAE,CAAC,EAAE,YAAY,EAAE,GAAG,EAAE;oBACnC,EAAE,SAAS,EAAE,CAAC,EAAE,YAAY,EAAE,GAAG,EAAE;iBACpC;aACF;SACF,CAAC;QACF,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACzD,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG;YACd,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;gBAChB,SAAS,EAAE,CAAC,KAAU,EAAE,KAA0B,EAAE,EAAE,CAAC,EAAE;gBACzD,WAAW,EAAE,CAAC,KAAU,EAAE,KAA0B,EAAE,EAAE,CAAC,GAAG;gBAC5D,YAAY,EAAE,CAAC,KAAU,EAAE,KAA0B,EAAE,EAAE,CACvD,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,oCAAoC;aAC/D,CAAC;SACH,CAAC;QACF,MAAM,SAAS,GAAG;YAChB,SAAS,EAAE;gBACT,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;gBAClB,YAAY,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,SAAS;aACtD;SACF,CAAC;QACF,QAAQ,GAAG,6BAAoB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QACrD,QAAQ,GAAG,sBAAgB,CAAC;YAC1B,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,OAAO;YACd,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QACH,MAAM,SAAS,GAAG;;;;MAIhB,CAAC;QACH,MAAM,QAAQ,GAAG;YACf,SAAS,EAAE,CAAC;YACZ,WAAW,EAAE,GAAG;YAChB,YAAY,EAAE,KAAK,EAAE,sDAAsD;SAC5E,CAAC;QACF,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACrD,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG;YACd,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;gBACX,SAAS,EAAE,EAAE;gBACb,YAAY,EAAE,QAAQ;aACvB,CAAC;YACF,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE;SACd,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;;;;;MAMhB,CAAC;QACH,MAAM,QAAQ,GAAG;YACf,YAAY,EAAE;gBACZ,SAAS,EAAE,EAAE;gBACb,YAAY,EAAE,QAAQ;aACvB;YACD,SAAS,EAAE,EAAE;SACd,CAAC;QACF,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,uDAAuD,EAAE,GAAG,EAAE;QACjE,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,SAAS,GAAG;YAChB,SAAS,EAAE;gBACT,eAAe,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBAChC,YAAY,EAAE,GAAG,EAAE,CAAC,CAAC;oBACnB,SAAS,EAAE,EAAE,EAAE,kDAAkD;oBACjE,2BAA2B;iBAC5B,CAAC;aACH;SACF,CAAC;QACF,QAAQ,GAAG,6BAAoB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QACrD,MAAM,OAAO,GAAG;YACd,eAAe,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YAChC,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;gBACX,SAAS,EAAE,CAAC;gBACZ,YAAY,EAAE,QAAQ,EAAE,4BAA4B;aACrD,CAAC;SACH,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC;YAC1B,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,OAAO;YACd,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QACH,MAAM,SAAS,GAAG;;;;;;MAMhB,CAAC;QACH,MAAM,QAAQ,GAAG;YACf,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YAC1B,YAAY,EAAE;gBACZ,SAAS,EAAE,EAAE;gBACb,YAAY,EAAE,QAAQ,EAAE,wBAAwB;aACjD;SACF,CAAC;QACF,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,yEAAyE,EAAE,GAAG,EAAE;QACnF,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,SAAS,GAAG;YAChB,SAAS,EAAE;gBACT,YAAY,EAAE,GAAG,EAAE,CACjB,OAAO,CAAC,OAAO,CAAC;oBACd,SAAS,EAAE,EAAE,EAAE,kDAAkD;oBACjE,2BAA2B;iBAC5B,CAAC;aACL;SACF,CAAC;QACF,QAAQ,GAAG,6BAAoB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QACrD,MAAM,OAAO,GAAG;YACd,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;gBACX,SAAS,EAAE,CAAC;gBACZ,YAAY,EAAE,QAAQ,EAAE,4BAA4B;aACrD,CAAC;SACH,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC;YAC1B,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,OAAO;YACd,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QACH,MAAM,SAAS,GAAG;;;;;QAKd,CAAC;QACL,MAAM,QAAQ,GAAG;YACf,YAAY,EAAE;gBACZ,SAAS,EAAE,EAAE;gBACb,YAAY,EAAE,QAAQ,EAAE,wBAAwB;aACjD;SACF,CAAC;QACF,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,+EAA+E,EAAE,GAAG,EAAE;QACzF,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,MAAM,CAAC,cAAc,CACnB,QAAQ,EACR,WAAW,EAAE,kDAAkD;QAC/D,EAAE,KAAK,EAAE,EAAE,EAAE,CACd,CAAC;QACF,MAAM,SAAS,GAAG;YAChB,SAAS,EAAE;gBACT,YAAY,EAAE,GAAG,EAAE,CAAC,QAAQ;aAC7B;SACF,CAAC;QACF,QAAQ,GAAG,6BAAoB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QACrD,MAAM,OAAO,GAAG;YACd,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;gBACX,SAAS,EAAE,CAAC;gBACZ,YAAY,EAAE,QAAQ,EAAE,4BAA4B;aACrD,CAAC;SACH,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC;YAC1B,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,OAAO;YACd,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QACH,MAAM,SAAS,GAAG;;;;;QAKd,CAAC;QACL,MAAM,QAAQ,GAAG;YACf,YAAY,EAAE;gBACZ,SAAS,EAAE,EAAE;gBACb,YAAY,EAAE,QAAQ,EAAE,wBAAwB;aACjD;SACF,CAAC;QACF,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,gEAAgE,EAAE,GAAG,EAAE;QAC1E,MAAM,SAAS,GAAG;YAChB,SAAS,EAAE;gBACT,YAAY,EAAE,GAAG,EAAE,CAAC,QAAQ,EAAE,yBAAyB;aACxD;SACF,CAAC;QACF,IAAI,QAAQ,GAAG,6BAAoB,CAAC;YAClC,QAAQ,EAAE,CAAC,SAAS,CAAC;YACrB,SAAS;YACT,MAAM,EAAE,OAAO;SAChB,CAAC,CAAC;QACH,MAAM,OAAO,GAAG;YACd,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,kBAAkB;SACnC,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC;YAC1B,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,OAAO;YACd,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QACH,MAAM,SAAS,GAAG;;;;;;MAMhB,CAAC;QACH,MAAM,QAAQ,GAAG;YACf,YAAY,EAAE;gBACZ,SAAS,EAAE,GAAG;gBACd,YAAY,EAAE,aAAa,EAAE,4BAA4B;aAC1D;YACD,YAAY,EAAE,QAAQ,EAAE,wBAAwB;SACjD,CAAC;QACF,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACtE,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,SAAS,GAAG;YAChB,SAAS,EAAE;gBACT,YAAY,EAAE,GAAW,EAAE,CAAC,IAAI,EAAE,yBAAyB;aAC5D;SACF,CAAC;QACF,QAAQ,GAAG,6BAAoB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QACrD,MAAM,OAAO,GAAG;YACd,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,kBAAkB;SACnC,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC;YAC1B,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,OAAO;YACd,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QACH,MAAM,SAAS,GAAG;;;;;;MAMhB,CAAC;QACH,MAAM,QAAQ,GAAG;YACf,YAAY,EAAE;gBACZ,SAAS,EAAE,GAAG;gBACd,YAAY,EAAE,aAAa,EAAE,4BAA4B;aAC1D;YACD,YAAY,EAAE,IAAc,EAAE,wBAAwB;SACvD,CAAC;QACF,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC9D,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,iCAAiC,EAAE,GAAG,EAAE;QAC3C,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,SAAS,GAAG;YAChB,SAAS,EAAE;gBACT,oBAAoB,EAAE,CAAC,CAAO,EAAE,CAAsB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;aAC/D;SACF,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC;QAC7D,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,MAAM,QAAQ,GAAG;YACf,oBAAoB,EAAE,OAAO;SAC9B,CAAC;QACF,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC9C,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,SAAS,GAAG;YAChB,YAAY,EAAE;gBACZ,oBAAoB,EAAE,CAAC,CAAO,EAAE,CAAsB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;aAC/D;SACF,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC;QAC7D,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,MAAM,QAAQ,GAAG;YACf,oBAAoB,EAAE,OAAO;SAC9B,CAAC;QACF,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;QACpD,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG;YACd,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,eAAe,EAAE,GAAG,EAAE,CAAC,IAAI,cAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;YAC7D,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE;SACd,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,MAAM,QAAQ,GAAG;YACf,eAAe,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;SAC9B,CAAC;QACF,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACnD,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG;YACd,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,eAAe,EAAE,GAAG,EAAE,CAAC,IAAI,cAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC;YACpE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE;SACd,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,sBAAsB,CAAC,EAAE,CAAC,CAAC;YACnE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;YAChE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACzD,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG;YACd,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;gBAChB,eAAe,EAAE,GAAG,EAAE,CAAC,IAAI,cAAQ,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;aACjD,CAAC;YACF,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE;SACd,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,MAAM,QAAQ,GAAG;YACf,eAAe,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;SAC1B,CAAC;QACF,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sEAAsE,EAAE,GAAG,EAAE;QAChF,MAAM,CACJ,GAAG,EAAE,CACH,IAAI,cAAQ,CAAC,CAAC,EAAG,KAAa,CAAC,CAClC,CAAC,YAAY,CACZ,6DAA6D,CAC9D,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC9C,IAAI,QAAQ,GAAG,uCAA8B,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG;YACd,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;gBAChB,qBAAqB,EAAE,GAAG,EAAE,CAAC,IAAI,cAAQ,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,cAAQ,CAAC,CAAC,CAAC,CAAC;aACpE,CAAC;YACF,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE;SACd,CAAC;QACF,QAAQ,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG;;MAEhB,CAAC;QACH,MAAM,QAAQ,GAAG;YACf,qBAAqB,EAAE;gBACrB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;gBACZ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;aACb;SACF,CAAC;QACF,OAAO,iBAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,gDAAgD,EAAE,GAAG,EAAE;QAC1D,MAAM,QAAQ,GAAG;;;;;;;;;;;;KAYhB,CAAC;QAEF,MAAM,SAAS,GAAG;YAChB,KAAK,EAAE;gBACL,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;oBACZ,KAAK,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;iBAC9B,CAAC;gBACF,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC;aACpC;YACD,UAAU,EAAE;gBACV,KAAK,EAAE,CAAC,GAAoB,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK;aAC3C;YACD,IAAI,EAAE;gBACJ,WAAW,EAAE,CAAC,GAAS,EAAE,EAAE,CAAC,GAAG,CAAC,WAAW,EAAE;gBAC7C,YAAY,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC;gBAC5C,cAAc,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC;aAC/C;SACF,CAAC;QAEF,IAAI,MAAM,GAAG,6BAAoB,CAAC;YAChC,QAAQ;YACR,SAAS;SACV,CAAC,CAAC;QAEH,MAAM,GAAG,sBAAgB,CAAC;YACxB,MAAM;YACN,KAAK,EAAE;gBACL,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC;aACnC;YACD,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG;;;;;;;;KAQb,CAAC;QAEF,MAAM,QAAQ,GAAG;YACf,KAAK,EAAE;gBACL,KAAK,EAAE,0BAA0B;aAClC;YACD,KAAK,EAAE,0BAA0B;YACjC,KAAK,EAAE,0BAA0B;SAClC,CAAC;QACF,OAAO,iBAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YACzC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yEAAyE,EAAE,KAAK,IAAI,EAAE;QACvF,oDAAoD;QACpD,MAAM,QAAQ,GAAG,aAAa,CAAC;;;;;;;;;;;;;KAa9B,CAAC;QAEF,oDAAoD;QACpD,MAAM,SAAS,GAAG;YAChB,KAAK,EAAE;gBACL,UAAU;oBACR,OAAO;wBACL,aAAa,EAAE,IAAI;wBACnB,YAAY,EAAE,0BAA0B;qBACzC,CAAC;gBACJ,CAAC;aACF;SACF,CAAC;QAEF,IAAI,MAAM,GAAG,6BAAoB,CAAC;YAChC,QAAQ;YACR,SAAS;SACV,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG;YACZ,KAAK,EAAE,GAAG,EAAE,CAAC,GAAG;YAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,0BAA0B;SAC3C,CAAC;QAEF,MAAM,GAAG,sBAAgB,CAAC;YACxB,MAAM;YACN,KAAK;YACL,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,iBAAO,CAAC;YAC3B,MAAM;YACN,MAAM,EAAE,aAAa,CAAC;;;;;;;;;OASrB;SACF,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,IAAI,EAAE;gBACJ,UAAU,EAAE;oBACV,aAAa,EAAE,IAAI;oBACnB,WAAW,EAAE,GAAG;oBAChB,YAAY,EAAE,0BAA0B;oBACxC,UAAU,EAAE,0BAA0B;iBACvC;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;;QACpD,MAAM,KAAK,GAAG;YACZ,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,IAAI,EAAE;YACtB,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;gBACb,QAAQ,EAAR,iBAAQ;aACT,CAAC;YACF,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;gBACX,UAAU,EAAV,mBAAU;aACX,CAAC;YACF,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;gBACZ,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,cAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aACpC,CAAC;SACH,CAAC;QAEF,IAAI,MAAM,GAAG,qBAAW,CAAC,aAAa,CAAC;;;;;;;;;;;;KAYtC,CAAC,CAAC;QAEH,MAAM,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QAE7C,MAAM,MAAM,GAAG,MAAM,iBAAO,CAAC;YAC3B,MAAM;YACN,MAAM,EAAE,aAAa,CAAC;;;;;;;;;OASrB;SACF,CAAC,CAAC;QAEH,MAAM,CAAC,CAAA,MAAA,MAAA,MAAM,CAAC,IAAI,0CAAE,OAAO,0CAAE,MAAM,KAAI,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QACvD,MAAM,CAAC,OAAO,CAAA,MAAA,MAAA,MAAM,CAAC,IAAI,0CAAE,OAAO,CAAC,CAAC,CAAC,0CAAE,QAAQ,CAAA,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChE,MAAM,CAAC,OAAO,CAAA,MAAA,MAAA,MAAA,MAAM,CAAC,IAAI,0CAAE,OAAO,CAAC,CAAC,CAAC,0CAAE,IAAI,0CAAE,UAAU,CAAA,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,IAAI,MAAM,GAAG,qBAAW,CAAC,aAAa,CAAC;;;;;;;;;;KAUtC,CAAC,CAAC;QAEH,MAAM,GAAG,sBAAgB,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;QAEtC,MAAM,cAAc,GAAG,MAAM,mBAAS,CAAC;YACrC,MAAM;YACN,QAAQ,EAAE,aAAa,CAAC,eAAK,CAAC;;;;;;OAM7B,CAAC;SACH,CAAC,CAAC;QAEH,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QAE1D,IAAI,KAAK,EAAE,MAAM,MAAM,IAAI,cAAqB,EAAE;YAChD,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;gBAClB,MAAM,EAAE;oBACN,GAAG,EAAE,cAAc;iBACpB;aACF,CAAC,CAAA;SACH;IAEH,CAAC,CAAC,CAAA;IAEF,4EAA4E;IAC5E,yDAAyD;IAEzD,mEAAmE;AACrE,CAAC,CAAC,CAAC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/mock/tests/mocking-compatibility.spec.ts"],"sourcesContent":["/* eslint-disable camelcase */\nimport {\n  graphql,\n  GraphQLResolveInfo,\n  GraphQLSchema,\n  buildSchema, subscribe, parse\n} from 'graphql';\n\nimport { sentence, first_name } from 'casual';\n\nimport { addMocksToSchema, MockList, mockServer, IMocks, IMockStore } from '../src';\nimport {\n  addResolversToSchema,\n  buildSchemaFromTypeDefinitions,\n  makeExecutableSchema,\n} from '@graphql-tools/schema';\n\ndescribe('Mock retro-compatibility', () => {\n  const shorthand = `\n    scalar MissingMockType\n\n    interface Flying {\n      id:String!\n      returnSong: String\n      returnInt: Int\n    }\n\n    type Bird implements Flying {\n      id:String!\n      returnSong: String\n      returnInt: Int\n      returnString: String\n      returnStringArgument(s: String): String\n    }\n\n    type Bee implements Flying {\n      id:String!\n      returnSong: String\n      returnInt: Int\n      returnEnum: SomeEnum\n    }\n\n    union BirdsAndBees = Bird | Bee\n\n    enum SomeEnum {\n      A\n      B\n      C\n    }\n\n    type RootQuery {\n      returnInt: Int\n      returnFloat: Float\n      returnString: String\n      returnBoolean: Boolean\n      returnID: ID\n      returnEnum: SomeEnum\n      returnBirdsAndBees: [BirdsAndBees]\n      returnFlying: [Flying]\n      returnMockError: MissingMockType\n      returnNullableString: String\n      returnNonNullString: String!\n      returnObject: Bird\n      returnListOfInt: [Int]\n      returnListOfIntArg(l: Int): [Int]\n      returnListOfListOfInt: [[Int!]!]!\n      returnListOfListOfIntArg(l: Int): [[Int]]\n      returnListOfListOfObject: [[Bird!]]!\n      returnStringArgument(s: String): String\n      node(id:String!):Flying\n      node2(id:String!):BirdsAndBees\n    }\n\n    type RootMutation{\n      returnStringArgument(s: String): String\n    }\n    schema {\n      query: RootQuery\n      mutation: RootMutation\n    }\n  `;\n\n  const resolveFunctions = {\n    BirdsAndBees: {\n      __resolveType(data: any, _context: any, info: GraphQLResolveInfo) {\n        return info.schema.getType(data.__typename);\n      },\n    },\n    Flying: {\n      __resolveType(data: any, _context: any, info: GraphQLResolveInfo) {\n        return info.schema.getType(data.__typename);\n      },\n    },\n  };\n\n  test('throws an error if you forget to pass schema', () => {\n    expect(() => addMocksToSchema({} as any)).toThrowError(\n      'Must provide schema to mock',\n    );\n  });\n\n  test('throws an error if the property \"schema\" on the first argument is not of type GraphQLSchema', () => {\n    expect(() =>\n      addMocksToSchema({ schema: ({} as unknown) as GraphQLSchema }),\n    ).toThrowError('Value at \"schema\" must be of type GraphQLSchema');\n  });\n\n  test('throws an error if second argument is not a Map', () => {\n    const jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    expect(() =>\n      addMocksToSchema({\n        schema: jsSchema,\n        mocks: (['a'] as unknown) as IMocks,\n      }),\n    ).toThrowError('mocks must be of type Object');\n  });\n\n  test('mocks the default types for you', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = {};\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnInt\n      returnFloat\n      returnBoolean\n      returnString\n      returnID\n    }`;\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data.returnInt).toBeGreaterThanOrEqual(-1000);\n      expect(res.data.returnInt).toBeLessThanOrEqual(1000);\n      expect(res.data.returnFloat).toBeGreaterThanOrEqual(-1000);\n      expect(res.data.returnFloat).toBeLessThanOrEqual(1000);\n      expect(typeof res.data.returnBoolean).toBe('boolean');\n      expect(typeof res.data.returnString).toBe('string');\n      expect(typeof res.data.returnID).toBe('string');\n    });\n  });\n\n  test('lets you use mockServer for convenience', () => {\n    const testQuery = `{\n      returnInt\n      returnFloat\n      returnBoolean\n      returnString\n      returnID\n      returnBirdsAndBees {\n        ... on Bird {\n          returnInt\n          returnString\n        }\n        ... on Bee {\n          returnInt\n          returnEnum\n        }\n      }\n    }`;\n    const mockMap = {\n      Int: () => 12345,\n      Bird: () => ({ returnInt: () => 54321 }),\n      Bee: () => ({ returnInt: () => 54321 }),\n    };\n    return mockServer(shorthand, mockMap)\n      .query(testQuery)\n      .then((res: any) => {\n        expect(res.data.returnInt).toBe(12345);\n        expect(res.data.returnFloat).toBeGreaterThanOrEqual(-1000);\n        expect(res.data.returnFloat).toBeLessThanOrEqual(1000);\n        expect(typeof res.data.returnBoolean).toBe('boolean');\n        expect(typeof res.data.returnString).toBe('string');\n        expect(typeof res.data.returnID).toBe('string');\n        // tests that resolveType is correctly set for unions and interfaces\n        // and that the correct mock function is used\n        expect(res.data.returnBirdsAndBees[0].returnInt).toBe(54321);\n        expect(res.data.returnBirdsAndBees[1].returnInt).toBe(54321);\n      });\n  });\n\n  test('mockServer is able to preserveResolvers of a prebuilt schema', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const resolvers = {\n      RootQuery: {\n        returnString: () => 'someString',\n      },\n    };\n    jsSchema = addResolversToSchema(jsSchema, resolvers);\n    const testQuery = `{\n      returnInt\n      returnString\n      returnBirdsAndBees {\n        ... on Bird {\n          returnInt\n        }\n        ... on Bee {\n          returnInt\n        }\n      }\n    }`;\n    const mockMap = {\n      Int: () => 12345,\n      Bird: () => ({ returnInt: () => 54321 }),\n      Bee: () => ({ returnInt: () => 54321 }),\n    };\n    return mockServer(jsSchema, mockMap, true)\n      .query(testQuery)\n      .then((res: any) => {\n        expect(res.data.returnInt).toBe(12345);\n        expect(res.data.returnString).toBe('someString');\n        // tests that resolveType is correctly set for unions and interfaces\n        // and that the correct mock function is used\n        expect(res.data.returnBirdsAndBees[0].returnInt).toBe(54321);\n        expect(res.data.returnBirdsAndBees[1].returnInt).toBe(54321);\n      });\n  });\n\n  test('lets you use mockServer with prebuilt schema', () => {\n    const jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const testQuery = `{\n      returnInt\n      returnFloat\n      returnBoolean\n      returnString\n      returnID\n      returnBirdsAndBees {\n        ... on Bird {\n          returnInt\n          returnString\n        }\n        ... on Bee {\n          returnInt\n          returnEnum\n        }\n      }\n    }`;\n    const mockMap = {\n      Int: () => 12345,\n      Bird: () => ({ returnInt: () => 54321 }),\n      Bee: () => ({ returnInt: () => 54321 }),\n    };\n    return mockServer(jsSchema, mockMap)\n      .query(testQuery)\n      .then((res: any) => {\n        expect(res.data.returnInt).toBe(12345);\n        expect(res.data.returnFloat).toBeGreaterThanOrEqual(-1000);\n        expect(res.data.returnFloat).toBeLessThanOrEqual(1000);\n        expect(typeof res.data.returnBoolean).toBe('boolean');\n        expect(typeof res.data.returnString).toBe('string');\n        expect(typeof res.data.returnID).toBe('string');\n        // tests that resolveType is correctly set for unions and interfaces\n        // and that the correct mock function is used\n        expect(res.data.returnBirdsAndBees[0].returnInt).toBe(54321);\n        expect(res.data.returnBirdsAndBees[1].returnInt).toBe(54321);\n      });\n  });\n\n  test('does not mask resolveType functions if you tell it not to', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    let spy = 0;\n    const resolvers = {\n      BirdsAndBees: {\n        __resolveType(data: any, _context: any, info: GraphQLResolveInfo) {\n          ++spy;\n          return info.schema.getType(data.__typename);\n        },\n      },\n    };\n    jsSchema = addResolversToSchema(jsSchema, resolvers);\n    jsSchema = addMocksToSchema({\n      schema: jsSchema,\n      mocks: {},\n      preserveResolvers: true,\n    });\n    const testQuery = `{\n      returnBirdsAndBees {\n        ... on Bird {\n          returnInt\n          returnString\n        }\n        ... on Bee {\n          returnInt\n          returnEnum\n        }\n      }\n    }`;\n    return graphql(jsSchema, testQuery).then((_res) => {\n      // the resolveType has been called twice\n      expect(spy).toBe(2);\n    });\n  });\n\n  // TODO test mockServer with precompiled schema\n  test('can mock Enum', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = {};\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnEnum\n    }`;\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(['A', 'B', 'C']).toContain(res.data.returnEnum);\n    });\n  });\n\n  test('can mock Enum with a certain value', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = {\n      SomeEnum: () => 'C',\n    };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnEnum\n    }`;\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect('C').toBe(res.data.returnEnum);\n    });\n  });\n\n  test('can mock Unions', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    jsSchema = addResolversToSchema(jsSchema, resolveFunctions);\n    const mockMap = {\n      Int: () => 10,\n      String: () => 'aha',\n      SomeEnum: () => 'A',\n      RootQuery: () => ({\n        returnBirdsAndBees: () => new MockList(40),\n      }),\n    };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnBirdsAndBees {\n        ... on Bird {\n          returnInt\n          returnString\n        }\n        ... on Bee {\n          returnInt\n          returnEnum\n        }\n      }\n    }`;\n    return graphql(jsSchema, testQuery).then((res) => {\n      // XXX this test is expected to fail once every 2^40 times ;-)\n      expect(res.data.returnBirdsAndBees).toContainEqual(\n        expect.objectContaining({\n          returnInt: 10,\n          returnString: 'aha',\n        }),\n      );\n      return expect(res.data.returnBirdsAndBees).toContainEqual(\n        expect.objectContaining({\n          returnInt: 10,\n          returnEnum: 'A',\n        }),\n      );\n    });\n  });\n\n  test('can mock Interfaces by default', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = {\n      Int: () => 10,\n      String: () => 'aha',\n      SomeEnum: () => 'A',\n      RootQuery: () => ({\n        returnFlying: () => new MockList(40),\n      }),\n    };\n    jsSchema = addMocksToSchema({\n      schema: jsSchema,\n      mocks: mockMap,\n    });\n    const testQuery = `{\n      returnFlying {\n        ... on Bird {\n          returnInt\n          returnString\n        }\n        ... on Bee {\n          returnInt\n          returnEnum\n        }\n      }\n    }`;\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data.returnFlying).toContainEqual(\n        expect.objectContaining({\n          returnInt: 10,\n          returnString: 'aha',\n        }),\n      );\n      return expect(res.data.returnFlying).toContainEqual(\n        expect.objectContaining({\n          returnInt: 10,\n          returnEnum: 'A',\n        }),\n      );\n    });\n  });\n\n  it('can mock nullable Interfaces', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n\n    jsSchema = addResolversToSchema(jsSchema, resolveFunctions);\n\n    const mockMap = {\n      Bird: (): null => null,\n      Bee: (): null => null,\n      Flying: (_: any, args: any) => {\n        const { id } = args;\n        const type = id.split(':')[0];\n        // tslint:disable-next-line\n        const __typename = ['Bird', 'Bee'].find(\n          (r) => r.toLowerCase() === type,\n        );\n        return { __typename };\n      },\n    };\n\n    jsSchema = addMocksToSchema({\n      schema: jsSchema,\n      mocks: mockMap,\n      preserveResolvers: true,\n    });\n\n    const testQuery = `{\n      node(id: \"someid\") {\n        id\n      }\n    }`;\n\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data.node).toEqual(null);\n    });\n  });\n\n  test('can support explicit Interface mock', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    let spy = 0;\n    const mockMap = {\n      Bird: () => ({\n        returnInt: 100,\n      }),\n      Bee: () => ({\n        returnInt: 200,\n      }),\n      Flying: () => ({\n        returnSong: 'I believe i can fly'\n      })\n    };\n    const resolvers = (store: IMockStore) => ({\n      RootQuery: {\n        node: (_root: any, args: any) => {\n          spy++;\n          const { id } = args;\n          const type = id.split(':')[0];\n          const __typename = ['Bird', 'Bee'].find(\n            (r) => r.toLowerCase() === type,\n          );\n          return store.get(__typename, id);\n        }\n      }\n    });\n    jsSchema = addMocksToSchema({\n      schema: jsSchema,\n      mocks: mockMap,\n      resolvers,\n    });\n    const testQuery = `{\n      node(id:\"bee:123456\"){\n        id,\n        returnSong,\n        returnInt,\n      }\n    }`;\n\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(spy).toBe(1); // to make sure that Flying possible types are not randomly selected\n      expect(res.data.node).toMatchObject({\n        id: 'bee:123456',\n        returnSong: 'I believe i can fly',\n        returnInt: 200,\n      });\n    });\n  });\n\n  // FIXME\n  test.skip('can support explicit UnionType mock', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    jsSchema = addResolversToSchema(jsSchema, resolveFunctions);\n    let spy = 0;\n    const mockMap = {\n      Bird: (_root: any, args: any) => ({\n        id: args.id,\n        returnInt: 100,\n      }),\n      Bee: (_root: any, args: any) => ({\n        id: args.id,\n        returnEnum: 'A',\n      }),\n      BirdsAndBees: (_root: any, args: any) => {\n        spy++;\n        const { id } = args;\n        const type = id.split(':')[0];\n        return {\n          __typename: ['Bird', 'Bee'].find((r) => r.toLowerCase() === type),\n        };\n      },\n    };\n    jsSchema = addMocksToSchema({\n      schema: jsSchema,\n      mocks: mockMap,\n      preserveResolvers: true,\n    });\n    const testQuery = `{\n        node2(id:\"bee:123456\"){\n          ...on Bee{\n            id,\n            returnEnum\n          }\n        }\n      }`;\n\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(spy).toBe(1);\n      expect(res.data.node2).toMatchObject({\n        id: 'bee:123456',\n        returnEnum: 'A',\n      });\n    });\n  });\n\n  test('throws an error when __typename is not returned within an explicit interface mock', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    jsSchema = addResolversToSchema(jsSchema, resolveFunctions);\n    const mockMap = {\n      Bird: (_root: any, args: any) => ({\n        id: args.id,\n        returnInt: 100,\n      }),\n      Bee: (_root: any, args: any) => ({\n        id: args.id,\n        returnInt: 100,\n      }),\n      Flying: (_root: any, _args: any) => ({}),\n    };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n          node(id:\"bee:123456\"){\n            id,\n            returnInt\n          }\n        }`;\n    const expected = 'Please return a __typename in \"Flying\"';\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.errors[0].originalError.message).toBe(expected);\n    });\n  });\n\n  test('throws an error in resolve if mock type is not defined', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = {};\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnMockError\n    }`;\n    const expected = 'No mock defined for type \"MissingMockType\"';\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.errors[0].originalError.message).toBe(expected);\n    });\n  });\n\n  test('throws an error in resolve if mock type is not defined and resolver failed', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const resolvers = {\n      MissingMockType: {\n        __serialize: (val: string) => val,\n        __parseValue: (val: string) => val,\n        __parseLiteral: (val: string) => val,\n      },\n      RootQuery: {\n        returnMockError: (): string => undefined,\n      },\n    };\n    jsSchema = addResolversToSchema(jsSchema, resolvers);\n\n    const mockMap = {};\n    jsSchema = addMocksToSchema({\n      schema: jsSchema,\n      mocks: mockMap,\n      preserveResolvers: true,\n    });\n    const testQuery = `{\n        returnMockError\n      }`;\n    const expected = 'No mock defined for type \"MissingMockType\"';\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.errors[0].originalError.message).toBe(expected);\n    });\n  });\n\n  test('can preserve scalar resolvers', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const resolvers = {\n      MissingMockType: {\n        __serialize: (val: string) => val,\n        __parseValue: (val: string) => val,\n        __parseLiteral: (val: string) => val,\n      },\n      RootQuery: {\n        returnMockError: () => '10-11-2012',\n      },\n    };\n    jsSchema = addResolversToSchema(jsSchema, resolvers);\n\n    const mockMap = {};\n    addMocksToSchema({\n      schema: jsSchema,\n      mocks: mockMap,\n      preserveResolvers: true,\n    });\n    const testQuery = `{\n      returnMockError\n    }`;\n    const expected = {\n      returnMockError: '10-11-2012',\n    };\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data).toEqual(expected);\n      expect(res.errors).toBeUndefined();\n    });\n  });\n\n  test('can mock an Int', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = { Int: () => 55 };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnInt\n    }`;\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data.returnInt).toBe(55);\n    });\n  });\n\n  test('can mock a Float', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = { Float: () => 55.5 };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnFloat\n    }`;\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data.returnFloat).toBe(55.5);\n    });\n  });\n  test('can mock a String', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = { String: () => 'a string' };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnString\n    }`;\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data.returnString).toBe('a string');\n    });\n  });\n  test('can mock a Boolean', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = { Boolean: () => true };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnBoolean\n    }`;\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data.returnBoolean).toBe(true);\n    });\n  });\n  test('can mock an ID', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = { ID: () => 'ea5bdc19' };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnID\n    }`;\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data.returnID).toBe('ea5bdc19');\n    });\n  });\n  test('nullable type is nullable', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = { String: (): null => null };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnNullableString\n    }`;\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data.returnNullableString).toBe(null);\n    });\n  });\n  test('can mock a nonNull type', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = { String: () => 'nonnull' };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnNonNullString\n    }`;\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data.returnNonNullString).toBe('nonnull');\n    });\n  });\n  test('nonNull type is not nullable', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = { String: (): null => null };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnNonNullString\n    }`;\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data).toBe(null);\n      expect(res.errors.length).toBe(1);\n    });\n  });\n  test('can mock object types', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = {\n      String: () => 'abc',\n      Int: () => 123,\n    };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnObject { returnInt, returnString }\n    }`;\n    const expected = {\n      returnObject: { returnInt: 123, returnString: 'abc' },\n    };\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });\n\n  test('can mock a list of ints', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = { Int: () => 123 };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnListOfInt\n    }`;\n    const expected = {\n      returnListOfInt: [123, 123],\n    };\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });\n\n  test('can mock a list of lists of objects', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = {\n      String: () => 'a',\n      Int: () => 1,\n    };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnListOfListOfObject { returnInt, returnString }\n    }`;\n    const expected = {\n      returnListOfListOfObject: [\n        [\n          { returnInt: 1, returnString: 'a' },\n          { returnInt: 1, returnString: 'a' },\n        ],\n        [\n          { returnInt: 1, returnString: 'a' },\n          { returnInt: 1, returnString: 'a' },\n        ],\n      ],\n    };\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });\n\n  test('does not mask resolvers if you tell it not to', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = {\n      RootQuery: () => ({\n        returnInt: (_root: any, _args: Record<string, any>) => 42, // a) in resolvers, will not be used\n        returnFloat: (_root: any, _args: Record<string, any>) => 1.3, // b) not in resolvers, will be used\n        returnString: (_root: any, _args: Record<string, any>) =>\n          Promise.resolve('foo'), // c) in resolvers, will not be used\n      }),\n    };\n    const resolvers = {\n      RootQuery: {\n        returnInt: () => 5, // see a)\n        returnString: () => Promise.resolve('bar'), // see c)\n      },\n    };\n    jsSchema = addResolversToSchema(jsSchema, resolvers);\n    jsSchema = addMocksToSchema({\n      schema: jsSchema,\n      mocks: mockMap,\n      preserveResolvers: true,\n    });\n    const testQuery = `{\n      returnInt\n      returnFloat\n      returnString\n    }`;\n    const expected = {\n      returnInt: 5, // a) from resolvers, not masked by mock\n      returnFloat: 1.3, // b) from mock\n      returnString: 'bar', // c) from resolvers, not masked by mock (and promise)\n    };\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });\n\n  test('lets you mock non-leaf types conveniently', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = {\n      Bird: () => ({\n        returnInt: 12,\n        returnString: 'woot!?',\n      }),\n      Int: () => 15,\n    };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnObject{\n        returnInt\n        returnString\n      }\n      returnInt\n    }`;\n    const expected = {\n      returnObject: {\n        returnInt: 12,\n        returnString: 'woot!?',\n      },\n      returnInt: 15,\n    };\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });\n\n  test('lets you mock and resolve non-leaf types concurrently', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const resolvers = {\n      RootQuery: {\n        returnListOfInt: () => [1, 2, 3],\n        returnObject: () => ({\n          returnInt: 12, // a) part of a Bird, should not be masked by mock\n          // no returnString returned\n        }),\n      },\n    };\n    jsSchema = addResolversToSchema(jsSchema, resolvers);\n    const mockMap = {\n      returnListOfInt: () => [5, 6, 7],\n      Bird: () => ({\n        returnInt: 3, // see a)\n        returnString: 'woot!?', // b) another part of a Bird\n      }),\n    };\n    jsSchema = addMocksToSchema({\n      schema: jsSchema,\n      mocks: mockMap,\n      preserveResolvers: true,\n    });\n    const testQuery = `{\n      returnListOfInt\n      returnObject{\n        returnInt\n        returnString\n      }\n    }`;\n    const expected = {\n      returnListOfInt: [1, 2, 3],\n      returnObject: {\n        returnInt: 12, // from the resolver, see a)\n        returnString: 'woot!?', // from the mock, see b)\n      },\n    };\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });\n\n  test('lets you mock and resolve non-leaf types concurrently, support promises', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const resolvers = {\n      RootQuery: {\n        returnObject: () =>\n          Promise.resolve({\n            returnInt: 12, // a) part of a Bird, should not be masked by mock\n            // no returnString returned\n          }),\n      },\n    };\n    jsSchema = addResolversToSchema(jsSchema, resolvers);\n    const mockMap = {\n      Bird: () => ({\n        returnInt: 3, // see a)\n        returnString: 'woot!?', // b) another part of a Bird\n      }),\n    };\n    jsSchema = addMocksToSchema({\n      schema: jsSchema,\n      mocks: mockMap,\n      preserveResolvers: true,\n    });\n    const testQuery = `{\n        returnObject{\n          returnInt\n          returnString\n        }\n      }`;\n    const expected = {\n      returnObject: {\n        returnInt: 12, // from the resolver, see a)\n        returnString: 'woot!?', // from the mock, see b)\n      },\n    };\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });\n\n  test('lets you mock and resolve non-leaf types concurrently, support defineProperty', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const objProxy = {};\n    Object.defineProperty(\n      objProxy,\n      'returnInt', // a) part of a Bird, should not be masked by mock\n      { value: 12 },\n    );\n    const resolvers = {\n      RootQuery: {\n        returnObject: () => objProxy,\n      },\n    };\n    jsSchema = addResolversToSchema(jsSchema, resolvers);\n    const mockMap = {\n      Bird: () => ({\n        returnInt: 3, // see a)\n        returnString: 'woot!?', // b) another part of a Bird\n      }),\n    };\n    jsSchema = addMocksToSchema({\n      schema: jsSchema,\n      mocks: mockMap,\n      preserveResolvers: true,\n    });\n    const testQuery = `{\n        returnObject{\n          returnInt\n          returnString\n        }\n      }`;\n    const expected = {\n      returnObject: {\n        returnInt: 12, // from the resolver, see a)\n        returnString: 'woot!?', // from the mock, see b)\n      },\n    };\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });\n\n  test('let you mock with preserving resolvers, also when using logger', () => {\n    const resolvers = {\n      RootQuery: {\n        returnString: () => 'woot!?', // a) resolve of a string\n      },\n    };\n    let jsSchema = makeExecutableSchema({\n      typeDefs: [shorthand],\n      resolvers,\n      logger: console,\n    });\n    const mockMap = {\n      Int: () => 123, // b) mock of Int.\n    };\n    jsSchema = addMocksToSchema({\n      schema: jsSchema,\n      mocks: mockMap,\n      preserveResolvers: true,\n    });\n    const testQuery = `{\n      returnObject {\n        returnInt\n          returnString\n      }\n      returnString\n    }`;\n    const expected = {\n      returnObject: {\n        returnInt: 123, // from the mock, see b)\n        returnString: 'Hello World', // from mock default values.\n      },\n      returnString: 'woot!?', // from the mock, see a)\n    };\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });\n\n  test('let you resolve null with mocking and preserving resolvers', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const resolvers = {\n      RootQuery: {\n        returnString: (): string => null, // a) resolve of a string\n      },\n    };\n    jsSchema = addResolversToSchema(jsSchema, resolvers);\n    const mockMap = {\n      Int: () => 666, // b) mock of Int.\n    };\n    jsSchema = addMocksToSchema({\n      schema: jsSchema,\n      mocks: mockMap,\n      preserveResolvers: true,\n    });\n    const testQuery = `{\n      returnObject {\n        returnInt\n        returnString\n      }\n      returnString\n    }`;\n    const expected = {\n      returnObject: {\n        returnInt: 666, // from the mock, see b)\n        returnString: 'Hello World', // from mock default values.\n      },\n      returnString: null as string, // from the mock, see a)\n    };\n    return graphql(jsSchema, testQuery, undefined, {}).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });\n\n  test('lets you mock root query fields', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const resolvers = {\n      RootQuery: {\n        returnStringArgument: (_: void, a: Record<string, any>) => a.s,\n      },\n    };\n    jsSchema = addMocksToSchema({ schema: jsSchema, resolvers });\n    const testQuery = `{\n      returnStringArgument(s: \"adieu\")\n    }`;\n    const expected = {\n      returnStringArgument: 'adieu',\n    };\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });\n\n  test('lets you mock root mutation fields', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const resolvers = {\n      RootMutation: {\n        returnStringArgument: (_: void, a: Record<string, any>) => a.s,\n      },\n    };\n    jsSchema = addMocksToSchema({ schema: jsSchema, resolvers });\n    const testQuery = `mutation {\n      returnStringArgument(s: \"adieu\")\n    }`;\n    const expected = {\n      returnStringArgument: 'adieu',\n    };\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });\n\n  test('lets you mock a list of a certain length', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = {\n      RootQuery: () => ({ returnListOfInt: () => new MockList(3) }),\n      Int: () => 12,\n    };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnListOfInt\n    }`;\n    const expected = {\n      returnListOfInt: [12, 12, 12],\n    };\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });\n\n  test('lets you mock a list of a random length', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = {\n      RootQuery: () => ({ returnListOfInt: () => new MockList([10, 20]) }),\n      Int: () => 12,\n    };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnListOfInt\n    }`;\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data.returnListOfInt.length).toBeGreaterThanOrEqual(10);\n      expect(res.data.returnListOfInt.length).toBeLessThanOrEqual(20);\n      expect(res.data.returnListOfInt[0]).toBe(12);\n    });\n  });\n\n  test('lets you provide a function for your MockList', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = {\n      RootQuery: () => ({\n        returnListOfInt: () => new MockList(2, () => 33),\n      }),\n      Int: () => 12,\n    };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnListOfInt\n    }`;\n    const expected = {\n      returnListOfInt: [33, 33],\n    };\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });\n\n  test('throws an error if the second argument to MockList is not a function', () => {\n    expect(\n      () =>\n        new MockList(5, ('abc' as any)),\n    ).toThrowError(\n      'Second argument to MockList must be a function or undefined',\n    );\n  });\n\n  test('lets you nest MockList in MockList', () => {\n    let jsSchema = buildSchemaFromTypeDefinitions(shorthand);\n    const mockMap = {\n      RootQuery: () => ({\n        returnListOfListOfInt: () => new MockList(2, () => new MockList(3)),\n      }),\n      Int: () => 12,\n    };\n    jsSchema = addMocksToSchema({ schema: jsSchema, mocks: mockMap });\n    const testQuery = `{\n      returnListOfListOfInt\n    }`;\n    const expected = {\n      returnListOfListOfInt: [\n        [12, 12, 12],\n        [12, 12, 12],\n      ],\n    };\n    return graphql(jsSchema, testQuery).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });\n\n  test('works for resolvers returning javascript Dates', () => {\n    const typeDefs = `\n      scalar Date\n\n      type DateObject {\n        start: Date!\n      }\n\n      type Query {\n        date1: DateObject\n        date2: Date\n        date3: Date\n      }\n    `;\n\n    const resolvers = {\n      Query: {\n        date1: () => ({\n          start: new Date('2018-01-03'),\n        }),\n        date2: () => new Date('2016-01-01'),\n      },\n      DateObject: {\n        start: (obj: { start: Date }) => obj.start,\n      },\n      Date: {\n        __serialize: (val: Date) => val.toISOString(),\n        __parseValue: (val: string) => new Date(val),\n        __parseLiteral: (val: string) => new Date(val),\n      },\n    };\n\n    let schema = makeExecutableSchema({\n      typeDefs,\n      resolvers,\n    });\n\n    schema = addMocksToSchema({\n      schema,\n      mocks: {\n        Date: () => new Date('2016-05-04'),\n      },\n      preserveResolvers: true,\n    });\n\n    const query = `\n    {\n      date1 {\n        start\n      }\n      date2\n      date3\n    }\n    `;\n\n    const expected = {\n      date1: {\n        start: '2018-01-03T00:00:00.000Z',\n      },\n      date2: '2016-01-01T00:00:00.000Z',\n      date3: '2016-05-04T00:00:00.000Z',\n    };\n    return graphql(schema, query).then((res) => {\n      expect(res.data).toEqual(expected);\n    });\n  });\n\n  it('should preserve resolvers for custom scalars if preserveResolvers: true', async () => {\n    // Construct a schema, using GraphQL schema language\n    const typeDefs = /* GraphQL */ `\n      scalar DateTime\n\n      type SomeObject {\n        floatResolved: Float\n        floatMocked: Float\n        dateResolved: DateTime\n        dateMocked: DateTime\n      }\n\n      type Query {\n        someObject: SomeObject\n      }\n    `;\n\n    // Provide resolver functions for your schema fields\n    const resolvers = {\n      Query: {\n        someObject() {\n          return {\n            floatResolved: 42.2,\n            dateResolved: '2018-11-11T11:11:11.270Z',\n          };\n        },\n      },\n    };\n\n    let schema = makeExecutableSchema({\n      typeDefs,\n      resolvers,\n    });\n\n    const mocks = {\n      Float: () => 777,\n      DateTime: () => '2000-01-01T00:00:00.270Z',\n    };\n\n    schema = addMocksToSchema({\n      schema,\n      mocks,\n      preserveResolvers: true,\n    });\n    const result = await graphql({\n      schema,\n      source: /* GraphQL */ `\n        query {\n          someObject {\n            floatResolved\n            floatMocked\n            dateResolved\n            dateMocked\n          }\n        }\n      `,\n    });\n\n    expect(result).toEqual({\n      data: {\n        someObject: {\n          floatResolved: 42.2,\n          floatMocked: 777,\n          dateResolved: '2018-11-11T11:11:11.270Z',\n          dateMocked: '2000-01-01T00:00:00.270Z',\n        },\n      },\n    });\n  });\n\n  it('should work with casual and MockList', async () => {\n    const mocks = {\n      Date: () => new Date(),\n      Review: () => ({\n        sentence,\n      }),\n      User: () => ({\n        first_name,\n      }),\n      Query: () => ({\n        reviews: () => new MockList([1, 4]),\n      }),\n    };\n\n    let schema = buildSchema(/* GraphQL */ `\n      scalar Date\n      type Review {\n        sentence: String\n        user: User\n      }\n      type User {\n        first_name: String\n      }\n      type Query {\n        reviews: [Review]\n      }\n    `);\n\n    schema = addMocksToSchema({ schema, mocks });\n\n    const result = await graphql({\n      schema,\n      source: /* GraphQL */ `\n        {\n          reviews {\n            sentence\n            user {\n              first_name\n            }\n          }\n        }\n      `,\n    });\n\n    expect(result.data?.reviews?.length <= 4).toBeTruthy();\n    expect(typeof result.data?.reviews[0]?.sentence).toBe('string');\n    expect(typeof result.data?.reviews[0]?.user?.first_name).toBe('string');\n  });\n\n  it('resolves subscriptions only once', async () => {\n    let schema = buildSchema(/* GraphQL */ `\n      type Foo {\n        bar: String\n      }\n      type Query {\n        foo: Foo\n      }\n      type Subscription {\n        fooSub: Foo\n      }\n    `);\n\n    schema = addMocksToSchema({ schema });\n\n    const resultIterator = await subscribe({\n      schema,\n      document: /* GraphQL */ parse(`\n        subscription FooSub {\n          fooSub {\n            bar\n          }\n        }\n      `),\n    });\n\n    expect(resultIterator[Symbol.asyncIterator]).toBeTruthy();\n\n    for await (const result of resultIterator as any) {\n      expect(result).toBe({\n        fooSub: {\n          bar: 'Hello World!'\n        }\n      })\n    }\n\n  })\n\n  // TODO add a test that checks that even when merging defaults, lists invoke\n  // the function for every object, not just once per list.\n\n  // TODO test that you can call mock server with a graphql-js schema\n});\n"],"version":3}