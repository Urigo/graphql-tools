22593e2c6f18c3bbf2bf16b55b3fde9e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rewireTypes = void 0;
const graphql_1 = require("graphql");
const stub_1 = require("./stub");
function rewireTypes(originalTypeMap, directives) {
    const referenceTypeMap = Object.create(null);
    Object.keys(originalTypeMap).forEach(typeName => {
        referenceTypeMap[typeName] = originalTypeMap[typeName];
    });
    const newTypeMap = Object.create(null);
    Object.keys(referenceTypeMap).forEach(typeName => {
        const namedType = referenceTypeMap[typeName];
        if (namedType == null || typeName.startsWith('__')) {
            return;
        }
        const newName = namedType.name;
        if (newName.startsWith('__')) {
            return;
        }
        if (newTypeMap[newName] != null) {
            throw new Error(`Duplicate schema type name ${newName}`);
        }
        newTypeMap[newName] = namedType;
    });
    Object.keys(newTypeMap).forEach(typeName => {
        newTypeMap[typeName] = rewireNamedType(newTypeMap[typeName]);
    });
    const newDirectives = directives.map(directive => rewireDirective(directive));
    return {
        typeMap: newTypeMap,
        directives: newDirectives,
    };
    function rewireDirective(directive) {
        if (graphql_1.isSpecifiedDirective(directive)) {
            return directive;
        }
        const directiveConfig = directive.toConfig();
        directiveConfig.args = rewireArgs(directiveConfig.args);
        return new graphql_1.GraphQLDirective(directiveConfig);
    }
    function rewireArgs(args) {
        const rewiredArgs = {};
        Object.keys(args).forEach(argName => {
            const arg = args[argName];
            const rewiredArgType = rewireType(arg.type);
            if (rewiredArgType != null) {
                arg.type = rewiredArgType;
                rewiredArgs[argName] = arg;
            }
        });
        return rewiredArgs;
    }
    function rewireNamedType(type) {
        if (graphql_1.isObjectType(type)) {
            const config = type.toConfig();
            const newConfig = {
                ...config,
                fields: () => rewireFields(config.fields),
                interfaces: () => rewireNamedTypes(config.interfaces),
            };
            return new graphql_1.GraphQLObjectType(newConfig);
        }
        else if (graphql_1.isInterfaceType(type)) {
            const config = type.toConfig();
            const newConfig = {
                ...config,
                fields: () => rewireFields(config.fields),
            };
            if ('interfaces' in newConfig) {
                newConfig.interfaces = () => rewireNamedTypes(config.interfaces);
            }
            return new graphql_1.GraphQLInterfaceType(newConfig);
        }
        else if (graphql_1.isUnionType(type)) {
            const config = type.toConfig();
            const newConfig = {
                ...config,
                types: () => rewireNamedTypes(config.types),
            };
            return new graphql_1.GraphQLUnionType(newConfig);
        }
        else if (graphql_1.isInputObjectType(type)) {
            const config = type.toConfig();
            const newConfig = {
                ...config,
                fields: () => rewireInputFields(config.fields),
            };
            return new graphql_1.GraphQLInputObjectType(newConfig);
        }
        else if (graphql_1.isEnumType(type)) {
            const enumConfig = type.toConfig();
            return new graphql_1.GraphQLEnumType(enumConfig);
        }
        else if (graphql_1.isScalarType(type)) {
            if (graphql_1.isSpecifiedScalarType(type)) {
                return type;
            }
            const scalarConfig = type.toConfig();
            return new graphql_1.GraphQLScalarType(scalarConfig);
        }
        throw new Error(`Unexpected schema type: ${type}`);
    }
    function rewireFields(fields) {
        const rewiredFields = {};
        Object.keys(fields).forEach(fieldName => {
            const field = fields[fieldName];
            const rewiredFieldType = rewireType(field.type);
            if (rewiredFieldType != null) {
                field.type = rewiredFieldType;
                field.args = rewireArgs(field.args);
                rewiredFields[fieldName] = field;
            }
        });
        return rewiredFields;
    }
    function rewireInputFields(fields) {
        const rewiredFields = {};
        Object.keys(fields).forEach(fieldName => {
            const field = fields[fieldName];
            const rewiredFieldType = rewireType(field.type);
            if (rewiredFieldType != null) {
                field.type = rewiredFieldType;
                rewiredFields[fieldName] = field;
            }
        });
        return rewiredFields;
    }
    function rewireNamedTypes(namedTypes) {
        const rewiredTypes = [];
        namedTypes.forEach(namedType => {
            const rewiredType = rewireType(namedType);
            if (rewiredType != null) {
                rewiredTypes.push(rewiredType);
            }
        });
        return rewiredTypes;
    }
    function rewireType(type) {
        if (graphql_1.isListType(type)) {
            const rewiredType = rewireType(type.ofType);
            return rewiredType != null ? new graphql_1.GraphQLList(rewiredType) : null;
        }
        else if (graphql_1.isNonNullType(type)) {
            const rewiredType = rewireType(type.ofType);
            return rewiredType != null ? new graphql_1.GraphQLNonNull(rewiredType) : null;
        }
        else if (graphql_1.isNamedType(type)) {
            let rewiredType = referenceTypeMap[type.name];
            if (rewiredType === undefined) {
                rewiredType = stub_1.isNamedStub(type) ? stub_1.getBuiltInForStub(type) : rewireNamedType(type);
                newTypeMap[rewiredType.name] = referenceTypeMap[type.name] = rewiredType;
            }
            return rewiredType != null ? newTypeMap[rewiredType.name] : null;
        }
        return null;
    }
}
exports.rewireTypes = rewireTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJkYXRfMDAwL0d1aWxkL2dyYXBocWwtdG9vbHMvcGFja2FnZXMvdXRpbHMvc3JjL3Jld2lyZS50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0EwQmlCO0FBRWpCLGlDQUF3RDtBQUd4RCxTQUFnQixXQUFXLENBQ3pCLGVBQXdELEVBQ3hELFVBQTJDO0lBSzNDLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUM5QyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekQsQ0FBQyxDQUFDLENBQUM7SUFDSCxNQUFNLFVBQVUsR0FBWSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhELE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDL0MsTUFBTSxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFN0MsSUFBSSxTQUFTLElBQUksSUFBSSxJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEQsT0FBTztTQUNSO1FBRUQsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztRQUMvQixJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDNUIsT0FBTztTQUNSO1FBRUQsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxFQUFFO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDMUQ7UUFFRCxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsU0FBUyxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDekMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUU5RSxPQUFPO1FBQ0wsT0FBTyxFQUFFLFVBQVU7UUFDbkIsVUFBVSxFQUFFLGFBQWE7S0FDMUIsQ0FBQztJQUVGLFNBQVMsZUFBZSxDQUFDLFNBQTJCO1FBQ2xELElBQUksOEJBQW9CLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDbkMsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFDRCxNQUFNLGVBQWUsR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDN0MsZUFBZSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hELE9BQU8sSUFBSSwwQkFBZ0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsU0FBUyxVQUFVLENBQUMsSUFBbUM7UUFDckQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2xDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxQixNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzVDLElBQUksY0FBYyxJQUFJLElBQUksRUFBRTtnQkFDMUIsR0FBRyxDQUFDLElBQUksR0FBRyxjQUFjLENBQUM7Z0JBQzFCLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUM7YUFDNUI7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxTQUFTLGVBQWUsQ0FBNkIsSUFBTztRQUMxRCxJQUFJLHNCQUFZLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEIsTUFBTSxNQUFNLEdBQUksSUFBMEIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN0RCxNQUFNLFNBQVMsR0FBRztnQkFDaEIsR0FBRyxNQUFNO2dCQUNULE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztnQkFDekMsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7YUFDdEQsQ0FBQztZQUNGLE9BQU8sSUFBSSwyQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN6QzthQUFNLElBQUkseUJBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNoQyxNQUFNLE1BQU0sR0FBSSxJQUE2QixDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3pELE1BQU0sU0FBUyxHQUFRO2dCQUNyQixHQUFHLE1BQU07Z0JBQ1QsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO2FBQzFDLENBQUM7WUFDRixJQUFJLFlBQVksSUFBSSxTQUFTLEVBQUU7Z0JBQzdCLFNBQVMsQ0FBQyxVQUFVLEdBQUcsR0FBRyxFQUFFLENBQzFCLGdCQUFnQixDQUFHLE1BQWtFLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDckc7WUFDRCxPQUFPLElBQUksOEJBQW9CLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDNUM7YUFBTSxJQUFJLHFCQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDNUIsTUFBTSxNQUFNLEdBQUksSUFBeUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNyRCxNQUFNLFNBQVMsR0FBRztnQkFDaEIsR0FBRyxNQUFNO2dCQUNULEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO2FBQzVDLENBQUM7WUFDRixPQUFPLElBQUksMEJBQWdCLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDeEM7YUFBTSxJQUFJLDJCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2xDLE1BQU0sTUFBTSxHQUFJLElBQStCLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDM0QsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLEdBQUcsTUFBTTtnQkFDVCxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQzthQUMvQyxDQUFDO1lBQ0YsT0FBTyxJQUFJLGdDQUFzQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzlDO2FBQU0sSUFBSSxvQkFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzNCLE1BQU0sVUFBVSxHQUFJLElBQXdCLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDeEQsT0FBTyxJQUFJLHlCQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDeEM7YUFBTSxJQUFJLHNCQUFZLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDN0IsSUFBSSwrQkFBcUIsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDL0IsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUNELE1BQU0sWUFBWSxHQUFJLElBQTBCLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDNUQsT0FBTyxJQUFJLDJCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzVDO1FBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBNEIsSUFBMEIsRUFBRSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELFNBQVMsWUFBWSxDQUFDLE1BQXVDO1FBQzNELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN0QyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDaEMsTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hELElBQUksZ0JBQWdCLElBQUksSUFBSSxFQUFFO2dCQUM1QixLQUFLLENBQUMsSUFBSSxHQUFHLGdCQUFnQixDQUFDO2dCQUM5QixLQUFLLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDbEM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxTQUFTLGlCQUFpQixDQUFDLE1BQWtDO1FBQzNELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN0QyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDaEMsTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hELElBQUksZ0JBQWdCLElBQUksSUFBSSxFQUFFO2dCQUM1QixLQUFLLENBQUMsSUFBSSxHQUFHLGdCQUFnQixDQUFDO2dCQUM5QixhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQ2xDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDO0lBRUQsU0FBUyxnQkFBZ0IsQ0FBNkIsVUFBb0I7UUFDeEUsTUFBTSxZQUFZLEdBQWEsRUFBRSxDQUFDO1FBQ2xDLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDN0IsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzFDLElBQUksV0FBVyxJQUFJLElBQUksRUFBRTtnQkFDdkIsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUNoQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVELFNBQVMsVUFBVSxDQUF3QixJQUFPO1FBQ2hELElBQUksb0JBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNwQixNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzVDLE9BQU8sV0FBVyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUUsSUFBSSxxQkFBVyxDQUFDLFdBQVcsQ0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDekU7YUFBTSxJQUFJLHVCQUFhLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDOUIsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM1QyxPQUFPLFdBQVcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFFLElBQUksd0JBQWMsQ0FBQyxXQUFXLENBQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1NBQzVFO2FBQU0sSUFBSSxxQkFBVyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzVCLElBQUksV0FBVyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM5QyxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7Z0JBQzdCLFdBQVcsR0FBRyxrQkFBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNsRixVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxXQUFXLENBQUM7YUFDMUU7WUFDRCxPQUFPLFdBQVcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFFLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztTQUN6RTtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztBQUNILENBQUM7QUF6S0Qsa0NBeUtDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2FyZGF0XzAwMC9HdWlsZC9ncmFwaHFsLXRvb2xzL3BhY2thZ2VzL3V0aWxzL3NyYy9yZXdpcmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgR3JhcGhRTERpcmVjdGl2ZSxcbiAgR3JhcGhRTEVudW1UeXBlLFxuICBHcmFwaFFMRmllbGRDb25maWdBcmd1bWVudE1hcCxcbiAgR3JhcGhRTEZpZWxkQ29uZmlnTWFwLFxuICBHcmFwaFFMSW5wdXRGaWVsZENvbmZpZ01hcCxcbiAgR3JhcGhRTElucHV0T2JqZWN0VHlwZSxcbiAgR3JhcGhRTEludGVyZmFjZVR5cGUsXG4gIEdyYXBoUUxMaXN0LFxuICBHcmFwaFFMT2JqZWN0VHlwZSxcbiAgR3JhcGhRTE5hbWVkVHlwZSxcbiAgR3JhcGhRTE5vbk51bGwsXG4gIEdyYXBoUUxTY2FsYXJUeXBlLFxuICBHcmFwaFFMVHlwZSxcbiAgR3JhcGhRTFVuaW9uVHlwZSxcbiAgaXNJbnRlcmZhY2VUeXBlLFxuICBpc0VudW1UeXBlLFxuICBpc0lucHV0T2JqZWN0VHlwZSxcbiAgaXNMaXN0VHlwZSxcbiAgaXNOYW1lZFR5cGUsXG4gIGlzTm9uTnVsbFR5cGUsXG4gIGlzT2JqZWN0VHlwZSxcbiAgaXNTY2FsYXJUeXBlLFxuICBpc1VuaW9uVHlwZSxcbiAgaXNTcGVjaWZpZWRTY2FsYXJUeXBlLFxuICBpc1NwZWNpZmllZERpcmVjdGl2ZSxcbn0gZnJvbSAnZ3JhcGhxbCc7XG5cbmltcG9ydCB7IGdldEJ1aWx0SW5Gb3JTdHViLCBpc05hbWVkU3R1YiB9IGZyb20gJy4vc3R1Yic7XG5pbXBvcnQgeyBUeXBlTWFwIH0gZnJvbSAnLi9JbnRlcmZhY2VzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJld2lyZVR5cGVzKFxuICBvcmlnaW5hbFR5cGVNYXA6IFJlY29yZDxzdHJpbmcsIEdyYXBoUUxOYW1lZFR5cGUgfCBudWxsPixcbiAgZGlyZWN0aXZlczogUmVhZG9ubHlBcnJheTxHcmFwaFFMRGlyZWN0aXZlPlxuKToge1xuICB0eXBlTWFwOiBUeXBlTWFwO1xuICBkaXJlY3RpdmVzOiBBcnJheTxHcmFwaFFMRGlyZWN0aXZlPjtcbn0ge1xuICBjb25zdCByZWZlcmVuY2VUeXBlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgT2JqZWN0LmtleXMob3JpZ2luYWxUeXBlTWFwKS5mb3JFYWNoKHR5cGVOYW1lID0+IHtcbiAgICByZWZlcmVuY2VUeXBlTWFwW3R5cGVOYW1lXSA9IG9yaWdpbmFsVHlwZU1hcFt0eXBlTmFtZV07XG4gIH0pO1xuICBjb25zdCBuZXdUeXBlTWFwOiBUeXBlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBPYmplY3Qua2V5cyhyZWZlcmVuY2VUeXBlTWFwKS5mb3JFYWNoKHR5cGVOYW1lID0+IHtcbiAgICBjb25zdCBuYW1lZFR5cGUgPSByZWZlcmVuY2VUeXBlTWFwW3R5cGVOYW1lXTtcblxuICAgIGlmIChuYW1lZFR5cGUgPT0gbnVsbCB8fCB0eXBlTmFtZS5zdGFydHNXaXRoKCdfXycpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbmV3TmFtZSA9IG5hbWVkVHlwZS5uYW1lO1xuICAgIGlmIChuZXdOYW1lLnN0YXJ0c1dpdGgoJ19fJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobmV3VHlwZU1hcFtuZXdOYW1lXSAhPSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYER1cGxpY2F0ZSBzY2hlbWEgdHlwZSBuYW1lICR7bmV3TmFtZX1gKTtcbiAgICB9XG5cbiAgICBuZXdUeXBlTWFwW25ld05hbWVdID0gbmFtZWRUeXBlO1xuICB9KTtcblxuICBPYmplY3Qua2V5cyhuZXdUeXBlTWFwKS5mb3JFYWNoKHR5cGVOYW1lID0+IHtcbiAgICBuZXdUeXBlTWFwW3R5cGVOYW1lXSA9IHJld2lyZU5hbWVkVHlwZShuZXdUeXBlTWFwW3R5cGVOYW1lXSk7XG4gIH0pO1xuXG4gIGNvbnN0IG5ld0RpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzLm1hcChkaXJlY3RpdmUgPT4gcmV3aXJlRGlyZWN0aXZlKGRpcmVjdGl2ZSkpO1xuXG4gIHJldHVybiB7XG4gICAgdHlwZU1hcDogbmV3VHlwZU1hcCxcbiAgICBkaXJlY3RpdmVzOiBuZXdEaXJlY3RpdmVzLFxuICB9O1xuXG4gIGZ1bmN0aW9uIHJld2lyZURpcmVjdGl2ZShkaXJlY3RpdmU6IEdyYXBoUUxEaXJlY3RpdmUpOiBHcmFwaFFMRGlyZWN0aXZlIHtcbiAgICBpZiAoaXNTcGVjaWZpZWREaXJlY3RpdmUoZGlyZWN0aXZlKSkge1xuICAgICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgICB9XG4gICAgY29uc3QgZGlyZWN0aXZlQ29uZmlnID0gZGlyZWN0aXZlLnRvQ29uZmlnKCk7XG4gICAgZGlyZWN0aXZlQ29uZmlnLmFyZ3MgPSByZXdpcmVBcmdzKGRpcmVjdGl2ZUNvbmZpZy5hcmdzKTtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxEaXJlY3RpdmUoZGlyZWN0aXZlQ29uZmlnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJld2lyZUFyZ3MoYXJnczogR3JhcGhRTEZpZWxkQ29uZmlnQXJndW1lbnRNYXApOiBHcmFwaFFMRmllbGRDb25maWdBcmd1bWVudE1hcCB7XG4gICAgY29uc3QgcmV3aXJlZEFyZ3MgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhhcmdzKS5mb3JFYWNoKGFyZ05hbWUgPT4ge1xuICAgICAgY29uc3QgYXJnID0gYXJnc1thcmdOYW1lXTtcbiAgICAgIGNvbnN0IHJld2lyZWRBcmdUeXBlID0gcmV3aXJlVHlwZShhcmcudHlwZSk7XG4gICAgICBpZiAocmV3aXJlZEFyZ1R5cGUgIT0gbnVsbCkge1xuICAgICAgICBhcmcudHlwZSA9IHJld2lyZWRBcmdUeXBlO1xuICAgICAgICByZXdpcmVkQXJnc1thcmdOYW1lXSA9IGFyZztcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmV3aXJlZEFyZ3M7XG4gIH1cblxuICBmdW5jdGlvbiByZXdpcmVOYW1lZFR5cGU8VCBleHRlbmRzIEdyYXBoUUxOYW1lZFR5cGU+KHR5cGU6IFQpIHtcbiAgICBpZiAoaXNPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgICBjb25zdCBjb25maWcgPSAodHlwZSBhcyBHcmFwaFFMT2JqZWN0VHlwZSkudG9Db25maWcoKTtcbiAgICAgIGNvbnN0IG5ld0NvbmZpZyA9IHtcbiAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICBmaWVsZHM6ICgpID0+IHJld2lyZUZpZWxkcyhjb25maWcuZmllbGRzKSxcbiAgICAgICAgaW50ZXJmYWNlczogKCkgPT4gcmV3aXJlTmFtZWRUeXBlcyhjb25maWcuaW50ZXJmYWNlcyksXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMT2JqZWN0VHlwZShuZXdDb25maWcpO1xuICAgIH0gZWxzZSBpZiAoaXNJbnRlcmZhY2VUeXBlKHR5cGUpKSB7XG4gICAgICBjb25zdCBjb25maWcgPSAodHlwZSBhcyBHcmFwaFFMSW50ZXJmYWNlVHlwZSkudG9Db25maWcoKTtcbiAgICAgIGNvbnN0IG5ld0NvbmZpZzogYW55ID0ge1xuICAgICAgICAuLi5jb25maWcsXG4gICAgICAgIGZpZWxkczogKCkgPT4gcmV3aXJlRmllbGRzKGNvbmZpZy5maWVsZHMpLFxuICAgICAgfTtcbiAgICAgIGlmICgnaW50ZXJmYWNlcycgaW4gbmV3Q29uZmlnKSB7XG4gICAgICAgIG5ld0NvbmZpZy5pbnRlcmZhY2VzID0gKCkgPT5cbiAgICAgICAgICByZXdpcmVOYW1lZFR5cGVzKCgoY29uZmlnIGFzIHVua25vd24pIGFzIHsgaW50ZXJmYWNlczogQXJyYXk8R3JhcGhRTEludGVyZmFjZVR5cGU+IH0pLmludGVyZmFjZXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMSW50ZXJmYWNlVHlwZShuZXdDb25maWcpO1xuICAgIH0gZWxzZSBpZiAoaXNVbmlvblR5cGUodHlwZSkpIHtcbiAgICAgIGNvbnN0IGNvbmZpZyA9ICh0eXBlIGFzIEdyYXBoUUxVbmlvblR5cGUpLnRvQ29uZmlnKCk7XG4gICAgICBjb25zdCBuZXdDb25maWcgPSB7XG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgdHlwZXM6ICgpID0+IHJld2lyZU5hbWVkVHlwZXMoY29uZmlnLnR5cGVzKSxcbiAgICAgIH07XG4gICAgICByZXR1cm4gbmV3IEdyYXBoUUxVbmlvblR5cGUobmV3Q29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgICBjb25zdCBjb25maWcgPSAodHlwZSBhcyBHcmFwaFFMSW5wdXRPYmplY3RUeXBlKS50b0NvbmZpZygpO1xuICAgICAgY29uc3QgbmV3Q29uZmlnID0ge1xuICAgICAgICAuLi5jb25maWcsXG4gICAgICAgIGZpZWxkczogKCkgPT4gcmV3aXJlSW5wdXRGaWVsZHMoY29uZmlnLmZpZWxkcyksXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMSW5wdXRPYmplY3RUeXBlKG5ld0NvbmZpZyk7XG4gICAgfSBlbHNlIGlmIChpc0VudW1UeXBlKHR5cGUpKSB7XG4gICAgICBjb25zdCBlbnVtQ29uZmlnID0gKHR5cGUgYXMgR3JhcGhRTEVudW1UeXBlKS50b0NvbmZpZygpO1xuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMRW51bVR5cGUoZW51bUNvbmZpZyk7XG4gICAgfSBlbHNlIGlmIChpc1NjYWxhclR5cGUodHlwZSkpIHtcbiAgICAgIGlmIChpc1NwZWNpZmllZFNjYWxhclR5cGUodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICB9XG4gICAgICBjb25zdCBzY2FsYXJDb25maWcgPSAodHlwZSBhcyBHcmFwaFFMU2NhbGFyVHlwZSkudG9Db25maWcoKTtcbiAgICAgIHJldHVybiBuZXcgR3JhcGhRTFNjYWxhclR5cGUoc2NhbGFyQ29uZmlnKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgc2NoZW1hIHR5cGU6ICR7KHR5cGUgYXMgdW5rbm93bikgYXMgc3RyaW5nfWApO1xuICB9XG5cbiAgZnVuY3Rpb24gcmV3aXJlRmllbGRzKGZpZWxkczogR3JhcGhRTEZpZWxkQ29uZmlnTWFwPGFueSwgYW55Pik6IEdyYXBoUUxGaWVsZENvbmZpZ01hcDxhbnksIGFueT4ge1xuICAgIGNvbnN0IHJld2lyZWRGaWVsZHMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhmaWVsZHMpLmZvckVhY2goZmllbGROYW1lID0+IHtcbiAgICAgIGNvbnN0IGZpZWxkID0gZmllbGRzW2ZpZWxkTmFtZV07XG4gICAgICBjb25zdCByZXdpcmVkRmllbGRUeXBlID0gcmV3aXJlVHlwZShmaWVsZC50eXBlKTtcbiAgICAgIGlmIChyZXdpcmVkRmllbGRUeXBlICE9IG51bGwpIHtcbiAgICAgICAgZmllbGQudHlwZSA9IHJld2lyZWRGaWVsZFR5cGU7XG4gICAgICAgIGZpZWxkLmFyZ3MgPSByZXdpcmVBcmdzKGZpZWxkLmFyZ3MpO1xuICAgICAgICByZXdpcmVkRmllbGRzW2ZpZWxkTmFtZV0gPSBmaWVsZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmV3aXJlZEZpZWxkcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJld2lyZUlucHV0RmllbGRzKGZpZWxkczogR3JhcGhRTElucHV0RmllbGRDb25maWdNYXApOiBHcmFwaFFMSW5wdXRGaWVsZENvbmZpZ01hcCB7XG4gICAgY29uc3QgcmV3aXJlZEZpZWxkcyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGZpZWxkcykuZm9yRWFjaChmaWVsZE5hbWUgPT4ge1xuICAgICAgY29uc3QgZmllbGQgPSBmaWVsZHNbZmllbGROYW1lXTtcbiAgICAgIGNvbnN0IHJld2lyZWRGaWVsZFR5cGUgPSByZXdpcmVUeXBlKGZpZWxkLnR5cGUpO1xuICAgICAgaWYgKHJld2lyZWRGaWVsZFR5cGUgIT0gbnVsbCkge1xuICAgICAgICBmaWVsZC50eXBlID0gcmV3aXJlZEZpZWxkVHlwZTtcbiAgICAgICAgcmV3aXJlZEZpZWxkc1tmaWVsZE5hbWVdID0gZmllbGQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJld2lyZWRGaWVsZHM7XG4gIH1cblxuICBmdW5jdGlvbiByZXdpcmVOYW1lZFR5cGVzPFQgZXh0ZW5kcyBHcmFwaFFMTmFtZWRUeXBlPihuYW1lZFR5cGVzOiBBcnJheTxUPik6IEFycmF5PFQ+IHtcbiAgICBjb25zdCByZXdpcmVkVHlwZXM6IEFycmF5PFQ+ID0gW107XG4gICAgbmFtZWRUeXBlcy5mb3JFYWNoKG5hbWVkVHlwZSA9PiB7XG4gICAgICBjb25zdCByZXdpcmVkVHlwZSA9IHJld2lyZVR5cGUobmFtZWRUeXBlKTtcbiAgICAgIGlmIChyZXdpcmVkVHlwZSAhPSBudWxsKSB7XG4gICAgICAgIHJld2lyZWRUeXBlcy5wdXNoKHJld2lyZWRUeXBlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmV3aXJlZFR5cGVzO1xuICB9XG5cbiAgZnVuY3Rpb24gcmV3aXJlVHlwZTxUIGV4dGVuZHMgR3JhcGhRTFR5cGU+KHR5cGU6IFQpOiBUIHwgbnVsbCB7XG4gICAgaWYgKGlzTGlzdFR5cGUodHlwZSkpIHtcbiAgICAgIGNvbnN0IHJld2lyZWRUeXBlID0gcmV3aXJlVHlwZSh0eXBlLm9mVHlwZSk7XG4gICAgICByZXR1cm4gcmV3aXJlZFR5cGUgIT0gbnVsbCA/IChuZXcgR3JhcGhRTExpc3QocmV3aXJlZFR5cGUpIGFzIFQpIDogbnVsbDtcbiAgICB9IGVsc2UgaWYgKGlzTm9uTnVsbFR5cGUodHlwZSkpIHtcbiAgICAgIGNvbnN0IHJld2lyZWRUeXBlID0gcmV3aXJlVHlwZSh0eXBlLm9mVHlwZSk7XG4gICAgICByZXR1cm4gcmV3aXJlZFR5cGUgIT0gbnVsbCA/IChuZXcgR3JhcGhRTE5vbk51bGwocmV3aXJlZFR5cGUpIGFzIFQpIDogbnVsbDtcbiAgICB9IGVsc2UgaWYgKGlzTmFtZWRUeXBlKHR5cGUpKSB7XG4gICAgICBsZXQgcmV3aXJlZFR5cGUgPSByZWZlcmVuY2VUeXBlTWFwW3R5cGUubmFtZV07XG4gICAgICBpZiAocmV3aXJlZFR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXdpcmVkVHlwZSA9IGlzTmFtZWRTdHViKHR5cGUpID8gZ2V0QnVpbHRJbkZvclN0dWIodHlwZSkgOiByZXdpcmVOYW1lZFR5cGUodHlwZSk7XG4gICAgICAgIG5ld1R5cGVNYXBbcmV3aXJlZFR5cGUubmFtZV0gPSByZWZlcmVuY2VUeXBlTWFwW3R5cGUubmFtZV0gPSByZXdpcmVkVHlwZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXdpcmVkVHlwZSAhPSBudWxsID8gKG5ld1R5cGVNYXBbcmV3aXJlZFR5cGUubmFtZV0gYXMgVCkgOiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=