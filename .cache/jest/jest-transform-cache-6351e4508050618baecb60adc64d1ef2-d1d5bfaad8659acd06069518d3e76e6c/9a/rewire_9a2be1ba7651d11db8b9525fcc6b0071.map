{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/rewire.ts","mappings":"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","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/rewire.ts"],"sourcesContent":["import {\n  GraphQLDirective,\n  GraphQLEnumType,\n  GraphQLFieldConfigArgumentMap,\n  GraphQLFieldConfigMap,\n  GraphQLInputFieldConfigMap,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLNamedType,\n  GraphQLNonNull,\n  GraphQLScalarType,\n  GraphQLType,\n  GraphQLUnionType,\n  isInterfaceType,\n  isEnumType,\n  isInputObjectType,\n  isListType,\n  isNamedType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n  isSpecifiedScalarType,\n  isSpecifiedDirective,\n} from 'graphql';\n\nimport { getBuiltInForStub, isNamedStub } from './stub';\nimport { TypeMap } from './Interfaces';\n\nexport function rewireTypes(\n  originalTypeMap: Record<string, GraphQLNamedType | null>,\n  directives: ReadonlyArray<GraphQLDirective>\n): {\n  typeMap: TypeMap;\n  directives: Array<GraphQLDirective>;\n} {\n  const referenceTypeMap = Object.create(null);\n  Object.keys(originalTypeMap).forEach(typeName => {\n    referenceTypeMap[typeName] = originalTypeMap[typeName];\n  });\n  const newTypeMap: TypeMap = Object.create(null);\n\n  Object.keys(referenceTypeMap).forEach(typeName => {\n    const namedType = referenceTypeMap[typeName];\n\n    if (namedType == null || typeName.startsWith('__')) {\n      return;\n    }\n\n    const newName = namedType.name;\n    if (newName.startsWith('__')) {\n      return;\n    }\n\n    if (newTypeMap[newName] != null) {\n      throw new Error(`Duplicate schema type name ${newName}`);\n    }\n\n    newTypeMap[newName] = namedType;\n  });\n\n  Object.keys(newTypeMap).forEach(typeName => {\n    newTypeMap[typeName] = rewireNamedType(newTypeMap[typeName]);\n  });\n\n  const newDirectives = directives.map(directive => rewireDirective(directive));\n\n  return {\n    typeMap: newTypeMap,\n    directives: newDirectives,\n  };\n\n  function rewireDirective(directive: GraphQLDirective): GraphQLDirective {\n    if (isSpecifiedDirective(directive)) {\n      return directive;\n    }\n    const directiveConfig = directive.toConfig();\n    directiveConfig.args = rewireArgs(directiveConfig.args);\n    return new GraphQLDirective(directiveConfig);\n  }\n\n  function rewireArgs(args: GraphQLFieldConfigArgumentMap): GraphQLFieldConfigArgumentMap {\n    const rewiredArgs = {};\n    Object.keys(args).forEach(argName => {\n      const arg = args[argName];\n      const rewiredArgType = rewireType(arg.type);\n      if (rewiredArgType != null) {\n        arg.type = rewiredArgType;\n        rewiredArgs[argName] = arg;\n      }\n    });\n    return rewiredArgs;\n  }\n\n  function rewireNamedType<T extends GraphQLNamedType>(type: T) {\n    if (isObjectType(type)) {\n      const config = (type as GraphQLObjectType).toConfig();\n      const newConfig = {\n        ...config,\n        fields: () => rewireFields(config.fields),\n        interfaces: () => rewireNamedTypes(config.interfaces),\n      };\n      return new GraphQLObjectType(newConfig);\n    } else if (isInterfaceType(type)) {\n      const config = (type as GraphQLInterfaceType).toConfig();\n      const newConfig: any = {\n        ...config,\n        fields: () => rewireFields(config.fields),\n      };\n      if ('interfaces' in newConfig) {\n        newConfig.interfaces = () =>\n          rewireNamedTypes(((config as unknown) as { interfaces: Array<GraphQLInterfaceType> }).interfaces);\n      }\n      return new GraphQLInterfaceType(newConfig);\n    } else if (isUnionType(type)) {\n      const config = (type as GraphQLUnionType).toConfig();\n      const newConfig = {\n        ...config,\n        types: () => rewireNamedTypes(config.types),\n      };\n      return new GraphQLUnionType(newConfig);\n    } else if (isInputObjectType(type)) {\n      const config = (type as GraphQLInputObjectType).toConfig();\n      const newConfig = {\n        ...config,\n        fields: () => rewireInputFields(config.fields),\n      };\n      return new GraphQLInputObjectType(newConfig);\n    } else if (isEnumType(type)) {\n      const enumConfig = (type as GraphQLEnumType).toConfig();\n      return new GraphQLEnumType(enumConfig);\n    } else if (isScalarType(type)) {\n      if (isSpecifiedScalarType(type)) {\n        return type;\n      }\n      const scalarConfig = (type as GraphQLScalarType).toConfig();\n      return new GraphQLScalarType(scalarConfig);\n    }\n\n    throw new Error(`Unexpected schema type: ${(type as unknown) as string}`);\n  }\n\n  function rewireFields(fields: GraphQLFieldConfigMap<any, any>): GraphQLFieldConfigMap<any, any> {\n    const rewiredFields = {};\n    Object.keys(fields).forEach(fieldName => {\n      const field = fields[fieldName];\n      const rewiredFieldType = rewireType(field.type);\n      if (rewiredFieldType != null) {\n        field.type = rewiredFieldType;\n        field.args = rewireArgs(field.args);\n        rewiredFields[fieldName] = field;\n      }\n    });\n    return rewiredFields;\n  }\n\n  function rewireInputFields(fields: GraphQLInputFieldConfigMap): GraphQLInputFieldConfigMap {\n    const rewiredFields = {};\n    Object.keys(fields).forEach(fieldName => {\n      const field = fields[fieldName];\n      const rewiredFieldType = rewireType(field.type);\n      if (rewiredFieldType != null) {\n        field.type = rewiredFieldType;\n        rewiredFields[fieldName] = field;\n      }\n    });\n    return rewiredFields;\n  }\n\n  function rewireNamedTypes<T extends GraphQLNamedType>(namedTypes: Array<T>): Array<T> {\n    const rewiredTypes: Array<T> = [];\n    namedTypes.forEach(namedType => {\n      const rewiredType = rewireType(namedType);\n      if (rewiredType != null) {\n        rewiredTypes.push(rewiredType);\n      }\n    });\n    return rewiredTypes;\n  }\n\n  function rewireType<T extends GraphQLType>(type: T): T | null {\n    if (isListType(type)) {\n      const rewiredType = rewireType(type.ofType);\n      return rewiredType != null ? (new GraphQLList(rewiredType) as T) : null;\n    } else if (isNonNullType(type)) {\n      const rewiredType = rewireType(type.ofType);\n      return rewiredType != null ? (new GraphQLNonNull(rewiredType) as T) : null;\n    } else if (isNamedType(type)) {\n      let rewiredType = referenceTypeMap[type.name];\n      if (rewiredType === undefined) {\n        rewiredType = isNamedStub(type) ? getBuiltInForStub(type) : rewireNamedType(type);\n        newTypeMap[rewiredType.name] = referenceTypeMap[type.name] = rewiredType;\n      }\n      return rewiredType != null ? (newTypeMap[rewiredType.name] as T) : null;\n    }\n\n    return null;\n  }\n}\n"],"version":3}