25dd36b50afd2ca9f46f1bdf72cc8c88
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapAsyncIterator = void 0;
/**
 * Given an AsyncIterable and a callback function, return an AsyncIterator
 * which produces values mapped via calling the callback function.
 */
function mapAsyncIterator(iterator, callback, rejectCallback) {
    let $return;
    let abruptClose;
    if (typeof iterator.return === 'function') {
        $return = iterator.return;
        abruptClose = (error) => {
            const rethrow = () => Promise.reject(error);
            return $return.call(iterator).then(rethrow, rethrow);
        };
    }
    function mapResult(result) {
        return result.done ? result : asyncMapValue(result.value, callback).then(iteratorResult, abruptClose);
    }
    let mapReject;
    if (rejectCallback) {
        // Capture rejectCallback to ensure it cannot be null.
        const reject = rejectCallback;
        mapReject = (error) => asyncMapValue(error, reject).then(iteratorResult, abruptClose);
    }
    return {
        next() {
            return iterator.next().then(mapResult, mapReject);
        },
        return() {
            return $return
                ? $return.call(iterator).then(mapResult, mapReject)
                : Promise.resolve({ value: undefined, done: true });
        },
        throw(error) {
            if (typeof iterator.throw === 'function') {
                return iterator.throw(error).then(mapResult, mapReject);
            }
            return Promise.reject(error).catch(abruptClose);
        },
        [Symbol.asyncIterator]() {
            return this;
        },
    };
}
exports.mapAsyncIterator = mapAsyncIterator;
function asyncMapValue(value, callback) {
    return new Promise(resolve => resolve(callback(value)));
}
function iteratorResult(value) {
    return { value, done: false };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJkYXRfMDAwL0d1aWxkL2dyYXBocWwtdG9vbHMvcGFja2FnZXMvdXRpbHMvc3JjL21hcEFzeW5jSXRlcmF0b3IudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7OztHQUdHO0FBQ0gsU0FBZ0IsZ0JBQWdCLENBQzlCLFFBQTBCLEVBQzFCLFFBQXNDLEVBQ3RDLGNBQW9CO0lBRXBCLElBQUksT0FBWSxDQUFDO0lBQ2pCLElBQUksV0FBZ0IsQ0FBQztJQUVyQixJQUFJLE9BQU8sUUFBUSxDQUFDLE1BQU0sS0FBSyxVQUFVLEVBQUU7UUFDekMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFDMUIsV0FBVyxHQUFHLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDM0IsTUFBTSxPQUFPLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM1QyxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUM7S0FDSDtJQUVELFNBQVMsU0FBUyxDQUFDLE1BQVc7UUFDNUIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDeEcsQ0FBQztJQUVELElBQUksU0FBYyxDQUFDO0lBQ25CLElBQUksY0FBYyxFQUFFO1FBQ2xCLHNEQUFzRDtRQUN0RCxNQUFNLE1BQU0sR0FBRyxjQUFjLENBQUM7UUFDOUIsU0FBUyxHQUFHLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsV0FBVyxDQUFDLENBQUM7S0FDNUY7SUFFRCxPQUFPO1FBQ0wsSUFBSTtZQUNGLE9BQU8sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDcEQsQ0FBQztRQUNELE1BQU07WUFDSixPQUFPLE9BQU87Z0JBQ1osQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUM7Z0JBQ25ELENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN4RCxDQUFDO1FBQ0QsS0FBSyxDQUFDLEtBQVU7WUFDZCxJQUFJLE9BQU8sUUFBUSxDQUFDLEtBQUssS0FBSyxVQUFVLEVBQUU7Z0JBQ3hDLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2FBQ3pEO1lBQ0QsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsRCxDQUFDO1FBQ0QsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1lBQ3BCLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztLQUNLLENBQUM7QUFDWCxDQUFDO0FBOUNELDRDQThDQztBQUVELFNBQVMsYUFBYSxDQUFPLEtBQVEsRUFBRSxRQUFzQztJQUMzRSxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFJLEtBQVE7SUFDakMsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFDaEMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9hcmRhdF8wMDAvR3VpbGQvZ3JhcGhxbC10b29scy9wYWNrYWdlcy91dGlscy9zcmMvbWFwQXN5bmNJdGVyYXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdpdmVuIGFuIEFzeW5jSXRlcmFibGUgYW5kIGEgY2FsbGJhY2sgZnVuY3Rpb24sIHJldHVybiBhbiBBc3luY0l0ZXJhdG9yXG4gKiB3aGljaCBwcm9kdWNlcyB2YWx1ZXMgbWFwcGVkIHZpYSBjYWxsaW5nIHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcEFzeW5jSXRlcmF0b3I8VCwgVT4oXG4gIGl0ZXJhdG9yOiBBc3luY0l0ZXJhdG9yPFQ+LFxuICBjYWxsYmFjazogKHZhbHVlOiBUKSA9PiBQcm9taXNlPFU+IHwgVSxcbiAgcmVqZWN0Q2FsbGJhY2s/OiBhbnlcbik6IEFzeW5jSXRlcmF0b3I8VT4ge1xuICBsZXQgJHJldHVybjogYW55O1xuICBsZXQgYWJydXB0Q2xvc2U6IGFueTtcblxuICBpZiAodHlwZW9mIGl0ZXJhdG9yLnJldHVybiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICRyZXR1cm4gPSBpdGVyYXRvci5yZXR1cm47XG4gICAgYWJydXB0Q2xvc2UgPSAoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgY29uc3QgcmV0aHJvdyA9ICgpID0+IFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgIHJldHVybiAkcmV0dXJuLmNhbGwoaXRlcmF0b3IpLnRoZW4ocmV0aHJvdywgcmV0aHJvdyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcFJlc3VsdChyZXN1bHQ6IGFueSkge1xuICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdCA6IGFzeW5jTWFwVmFsdWUocmVzdWx0LnZhbHVlLCBjYWxsYmFjaykudGhlbihpdGVyYXRvclJlc3VsdCwgYWJydXB0Q2xvc2UpO1xuICB9XG5cbiAgbGV0IG1hcFJlamVjdDogYW55O1xuICBpZiAocmVqZWN0Q2FsbGJhY2spIHtcbiAgICAvLyBDYXB0dXJlIHJlamVjdENhbGxiYWNrIHRvIGVuc3VyZSBpdCBjYW5ub3QgYmUgbnVsbC5cbiAgICBjb25zdCByZWplY3QgPSByZWplY3RDYWxsYmFjaztcbiAgICBtYXBSZWplY3QgPSAoZXJyb3I6IGFueSkgPT4gYXN5bmNNYXBWYWx1ZShlcnJvciwgcmVqZWN0KS50aGVuKGl0ZXJhdG9yUmVzdWx0LCBhYnJ1cHRDbG9zZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5leHQoKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3IubmV4dCgpLnRoZW4obWFwUmVzdWx0LCBtYXBSZWplY3QpO1xuICAgIH0sXG4gICAgcmV0dXJuKCkge1xuICAgICAgcmV0dXJuICRyZXR1cm5cbiAgICAgICAgPyAkcmV0dXJuLmNhbGwoaXRlcmF0b3IpLnRoZW4obWFwUmVzdWx0LCBtYXBSZWplY3QpXG4gICAgICAgIDogUHJvbWlzZS5yZXNvbHZlKHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9KTtcbiAgICB9LFxuICAgIHRocm93KGVycm9yOiBhbnkpIHtcbiAgICAgIGlmICh0eXBlb2YgaXRlcmF0b3IudGhyb3cgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yLnRocm93KGVycm9yKS50aGVuKG1hcFJlc3VsdCwgbWFwUmVqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcikuY2F0Y2goYWJydXB0Q2xvc2UpO1xuICAgIH0sXG4gICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gIH0gYXMgYW55O1xufVxuXG5mdW5jdGlvbiBhc3luY01hcFZhbHVlPFQsIFU+KHZhbHVlOiBULCBjYWxsYmFjazogKHZhbHVlOiBUKSA9PiBQcm9taXNlPFU+IHwgVSk6IFByb21pc2U8VT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiByZXNvbHZlKGNhbGxiYWNrKHZhbHVlKSkpO1xufVxuXG5mdW5jdGlvbiBpdGVyYXRvclJlc3VsdDxUPih2YWx1ZTogVCk6IEl0ZXJhdG9yUmVzdWx0PFQ+IHtcbiAgcmV0dXJuIHsgdmFsdWUsIGRvbmU6IGZhbHNlIH07XG59XG4iXSwidmVyc2lvbiI6M30=