{"file":"/home/ardat_000/Guild/graphql-tools/packages/utils/src/fields.ts","mappings":"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","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/utils/src/fields.ts"],"sourcesContent":["import { GraphQLFieldConfigMap, GraphQLObjectType, GraphQLFieldConfig, GraphQLSchema } from 'graphql';\nimport { MapperKind } from './Interfaces';\nimport { mapSchema, correctASTNodes } from './mapSchema';\nimport { addTypes } from './addTypes';\n\nexport function appendObjectFields(\n  schema: GraphQLSchema,\n  typeName: string,\n  additionalFields: GraphQLFieldConfigMap<any, any>\n): GraphQLSchema {\n  if (schema.getType(typeName) == null) {\n    return addTypes(schema, [\n      new GraphQLObjectType({\n        name: typeName,\n        fields: additionalFields,\n      }),\n    ]);\n  }\n\n  return mapSchema(schema, {\n    [MapperKind.OBJECT_TYPE]: type => {\n      if (type.name === typeName) {\n        const config = type.toConfig();\n        const originalFieldConfigMap = config.fields;\n\n        const newFieldConfigMap = {};\n        Object.keys(originalFieldConfigMap).forEach(fieldName => {\n          newFieldConfigMap[fieldName] = originalFieldConfigMap[fieldName];\n        });\n        Object.keys(additionalFields).forEach(fieldName => {\n          newFieldConfigMap[fieldName] = additionalFields[fieldName];\n        });\n\n        return correctASTNodes(\n          new GraphQLObjectType({\n            ...config,\n            fields: newFieldConfigMap,\n          })\n        );\n      }\n    },\n  });\n}\n\nexport function removeObjectFields(\n  schema: GraphQLSchema,\n  typeName: string,\n  testFn: (fieldName: string, field: GraphQLFieldConfig<any, any>) => boolean\n): [GraphQLSchema, GraphQLFieldConfigMap<any, any>] {\n  const removedFields = {};\n  const newSchema = mapSchema(schema, {\n    [MapperKind.OBJECT_TYPE]: type => {\n      if (type.name === typeName) {\n        const config = type.toConfig();\n        const originalFieldConfigMap = config.fields;\n\n        const newFieldConfigMap = {};\n        Object.keys(originalFieldConfigMap).forEach(fieldName => {\n          const originalFieldConfig = originalFieldConfigMap[fieldName];\n          if (testFn(fieldName, originalFieldConfig)) {\n            removedFields[fieldName] = originalFieldConfig;\n          } else {\n            newFieldConfigMap[fieldName] = originalFieldConfig;\n          }\n        });\n\n        return correctASTNodes(\n          new GraphQLObjectType({\n            ...config,\n            fields: newFieldConfigMap,\n          })\n        );\n      }\n    },\n  });\n\n  return [newSchema, removedFields];\n}\n\nexport function selectObjectFields(\n  schema: GraphQLSchema,\n  typeName: string,\n  testFn: (fieldName: string, field: GraphQLFieldConfig<any, any>) => boolean\n): GraphQLFieldConfigMap<any, any> {\n  const selectedFields = {};\n  mapSchema(schema, {\n    [MapperKind.OBJECT_TYPE]: type => {\n      if (type.name === typeName) {\n        const config = type.toConfig();\n        const originalFieldConfigMap = config.fields;\n\n        Object.keys(originalFieldConfigMap).forEach(fieldName => {\n          const originalFieldConfig = originalFieldConfigMap[fieldName];\n          if (testFn(fieldName, originalFieldConfig)) {\n            selectedFields[fieldName] = originalFieldConfig;\n          }\n        });\n      }\n\n      return undefined;\n    },\n  });\n\n  return selectedFields;\n}\n\nexport function modifyObjectFields(\n  schema: GraphQLSchema,\n  typeName: string,\n  testFn: (fieldName: string, field: GraphQLFieldConfig<any, any>) => boolean,\n  newFields: GraphQLFieldConfigMap<any, any>\n): [GraphQLSchema, GraphQLFieldConfigMap<any, any>] {\n  const removedFields = {};\n  const newSchema = mapSchema(schema, {\n    [MapperKind.OBJECT_TYPE]: type => {\n      if (type.name === typeName) {\n        const config = type.toConfig();\n        const originalFieldConfigMap = config.fields;\n\n        const newFieldConfigMap = {};\n        Object.keys(originalFieldConfigMap).forEach(fieldName => {\n          const originalFieldConfig = originalFieldConfigMap[fieldName];\n          if (testFn(fieldName, originalFieldConfig)) {\n            removedFields[fieldName] = originalFieldConfig;\n          } else {\n            newFieldConfigMap[fieldName] = originalFieldConfig;\n          }\n        });\n\n        Object.keys(newFields).forEach(fieldName => {\n          const fieldConfig = newFields[fieldName];\n          newFieldConfigMap[fieldName] = fieldConfig;\n        });\n\n        return correctASTNodes(\n          new GraphQLObjectType({\n            ...config,\n            fields: newFieldConfigMap,\n          })\n        );\n      }\n    },\n  });\n\n  return [newSchema, removedFields];\n}\n"],"version":3}