{"file":"/home/ardat_000/Guild/graphql-tools/packages/schema/src/attachDirectiveResolvers.ts","mappings":";;;AAAA,qCAA8D;AAE9D,gDAAiG;AAEjG,SAAgB,wBAAwB,CACtC,MAAqB,EACrB,kBAAuC;IAEvC,IAAI,OAAO,kBAAkB,KAAK,QAAQ,EAAE;QAC1C,MAAM,IAAI,KAAK,CAAC,yDAAyD,OAAO,kBAAkB,EAAE,CAAC,CAAC;KACvG;IAED,IAAI,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE;QACrC,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;KAChF;IAED,OAAO,iBAAS,CAAC,MAAM,EAAE;QACvB,CAAC,kBAAU,CAAC,YAAY,CAAC,EAAE,WAAW,CAAC,EAAE;YACvC,MAAM,cAAc,GAAG,EAAE,GAAG,WAAW,EAAE,CAAC;YAE1C,MAAM,UAAU,GAAG,qBAAa,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YACtD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;gBAC9C,IAAI,kBAAkB,CAAC,aAAa,CAAC,EAAE;oBACrC,MAAM,QAAQ,GAAG,kBAAkB,CAAC,aAAa,CAAC,CAAC;oBACnD,MAAM,gBAAgB,GAAG,cAAc,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,8BAAoB,CAAC;oBACxG,MAAM,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;oBAChD,cAAc,CAAC,OAAO,GAAG,CAAC,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;wBAC/D,OAAO,QAAQ,CACb,GAAG,EAAE,CACH,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;4BAC9B,MAAM,MAAM,GAAG,gBAAgB,CAAC,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;4BACrE,IAAI,MAAM,YAAY,KAAK,EAAE;gCAC3B,MAAM,CAAC,MAAM,CAAC,CAAC;6BAChB;4BACD,OAAO,CAAC,MAAM,CAAC,CAAC;wBAClB,CAAC,CAAC,EACJ,MAAM,EACN,aAAa,EACb,OAAO,EACP,IAAI,CACL,CAAC;oBACJ,CAAC,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;YAEH,OAAO,cAAc,CAAC;QACxB,CAAC;KACF,CAAC,CAAC;AACL,CAAC;AA5CD,4DA4CC","names":[],"sources":["/home/ardat_000/Guild/graphql-tools/packages/schema/src/attachDirectiveResolvers.ts"],"sourcesContent":["import { GraphQLSchema, defaultFieldResolver } from 'graphql';\n\nimport { IDirectiveResolvers, mapSchema, MapperKind, getDirectives } from '@graphql-tools/utils';\n\nexport function attachDirectiveResolvers(\n  schema: GraphQLSchema,\n  directiveResolvers: IDirectiveResolvers\n): GraphQLSchema {\n  if (typeof directiveResolvers !== 'object') {\n    throw new Error(`Expected directiveResolvers to be of type object, got ${typeof directiveResolvers}`);\n  }\n\n  if (Array.isArray(directiveResolvers)) {\n    throw new Error('Expected directiveResolvers to be of type object, got Array');\n  }\n\n  return mapSchema(schema, {\n    [MapperKind.OBJECT_FIELD]: fieldConfig => {\n      const newFieldConfig = { ...fieldConfig };\n\n      const directives = getDirectives(schema, fieldConfig);\n      Object.keys(directives).forEach(directiveName => {\n        if (directiveResolvers[directiveName]) {\n          const resolver = directiveResolvers[directiveName];\n          const originalResolver = newFieldConfig.resolve != null ? newFieldConfig.resolve : defaultFieldResolver;\n          const directiveArgs = directives[directiveName];\n          newFieldConfig.resolve = (source, originalArgs, context, info) => {\n            return resolver(\n              () =>\n                new Promise((resolve, reject) => {\n                  const result = originalResolver(source, originalArgs, context, info);\n                  if (result instanceof Error) {\n                    reject(result);\n                  }\n                  resolve(result);\n                }),\n              source,\n              directiveArgs,\n              context,\n              info\n            );\n          };\n        }\n      });\n\n      return newFieldConfig;\n    },\n  });\n}\n"],"version":3}